name: Cyphera API CI/CD

on:
  push:
    branches: [ dev, main ]
    paths-ignore:
      - 'delegation-server/**'
      - '.github/workflows/delegation-server.yml'
  pull_request:
    branches: [ dev, main ]
    paths-ignore:
      - 'delegation-server/**'
      - '.github/workflows/delegation-server.yml'

env:
  GO_VERSION: '1.23'
  AWS_REGION: us-east-1
  STAGE: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}

jobs:
  test:
    name: Test Go API
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: cyphera_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        cache-dependency-path: go.sum

    - name: Install Go dependencies
      run: go mod download

    - name: Run Go tests
      run: go test -v ./...

    - name: Run integration tests
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/cyphera_test?sslmode=disable
        DELEGATION_LOCAL_MODE: true # Keep true if tests mock the server or run it locally
        DELEGATION_SERVER_URL: localhost:50051 # Assumes test setup might start a mock/local server
        DELEGATION_GRPC_ADDR: localhost:50051
        GRPC_PORT: 50051 # Go API's gRPC port (if any)
        GRPC_HOST: 0.0.0.0 # Go API's gRPC host (if any)
        PORT: 8000 # Go API's HTTP port
      run: |
        chmod +x scripts/integration-test.sh
        make test-integration # This script might need Node if it interacts with the mock server setup

  lint:
    name: Lint Go API
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        cache-dependency-path: go.sum

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: v1.60.1
        skip-cache: true
        args: -v --concurrency=4

  build:
    name: Build Go API
    needs: [test, lint]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        cache-dependency-path: go.sum

    - name: Build Lambda package
      run: |
        chmod +x scripts/build.sh
        ./scripts/build.sh

    - name: Verify binary
      run: |
        echo "Binary details:"
        file bootstrap
        ls -lh bootstrap
        echo "Checking binary architecture..."
        if ! file bootstrap | grep -q "x86-64"; then
          echo "Error: Binary is not compiled for x86_64"
          exit 1
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: bootstrap-${{ env.STAGE }}
        path: bootstrap

  deploy:
    name: Deploy Go API
    needs: [build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}

    steps:
    - uses: actions/checkout@v3

    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: bootstrap-${{ env.STAGE }}
        path: .

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up Node.js # For Serverless Framework
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: Install Serverless Framework
      run: |
        npm install -g serverless@3.33.0
        npm install -g serverless-domain-manager

    - name: Deploy with Serverless
      env:
        STAGE: ${{ env.STAGE }} # Only STAGE is needed now
        # Removed other env vars - they are pulled from AWS by serverless.yml

      run: |
        echo "Deploying Go API for stage: ${{ env.STAGE }}"
        serverless create-domain --stage ${{ env.STAGE }} --verbose || true
        sleep 30
        serverless deploy --stage ${{ env.STAGE }} --verbose

    - name: Log deployment info
      env:
        STAGE: ${{ env.STAGE }}
      run: |
        echo "Deployed Go API to AWS Lambda for stage ${{ env.STAGE }}"
        serverless info --stage ${{ env.STAGE }} --verbose 