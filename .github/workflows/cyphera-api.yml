name: Cyphera API CI/CD

on:
  push:
    branches: [ dev, main ]
    paths-ignore:
      - 'delegation-server/**'
      - '.github/workflows/delegation-server.yml'
  pull_request:
    branches: [ dev, main ]
    paths-ignore:
      - 'delegation-server/**'
      - '.github/workflows/delegation-server.yml'

env:
  GO_VERSION: '1.23'
  AWS_REGION: us-east-1
  STAGE: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
  TEMPLATE_FILE: deployment/template-cyphera-api.yaml

jobs:
  test:
    name: Test Go API
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: cyphera_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        cache-dependency-path: go.sum

    - name: Install Go dependencies
      run: go mod download

    - name: Run Go tests
      run: go test -v ./...

    - name: Run integration tests
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/cyphera_test?sslmode=disable
        DELEGATION_LOCAL_MODE: true # Keep true if tests mock the server or run it locally
        DELEGATION_SERVER_URL: localhost:50051 # Assumes test setup might start a mock/local server
        DELEGATION_GRPC_ADDR: localhost:50051
        GRPC_PORT: 50051 # Go API's gRPC port (if any)
        GRPC_HOST: 0.0.0.0 # Go API's gRPC host (if any)
        PORT: 8000 # Go API's HTTP port
      run: |
        chmod +x scripts/integration-test.sh
        make test-integration # This script might need Node if it interacts with the mock server setup

  lint:
    name: Lint Go API
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        cache-dependency-path: go.sum

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v5
      with:
        version: v1.60.1
        args: --concurrency=4




  # --- Deploy Job ---
  deploy:
    name: Deploy Go API
    needs: [lint, test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}

    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup SAM CLI
      uses: aws-actions/setup-sam@v2
      with:
        use-installer: true # Installs/Ensures latest SAM CLI

    # ADDED: Verify the content of the template file just before building
    - name: Verify template.yaml content
      run: |
        echo "--- Contents of template.yaml --- "
        cat template.yaml
        echo "--- End of template.yaml --- "

    # SAM Build: Use the specific template and build inside container
    - name: SAM Build for Main API
      run: sam build --template ${{ env.TEMPLATE_FILE }} --use-container --no-cached

    # ADDED: Verify the content of the *generated* template after build
    - name: Verify generated template content
      run: |
        echo "--- Contents of .aws-sam/build/template.yaml --- "
        cat .aws-sam/build/template.yaml
        echo "--- End of .aws-sam/build/template.yaml --- "

    # --- NEW DEPLOY STEPS ---
    - name: Make deploy script executable
      run: chmod +x scripts/deploy_cyphera_api.sh

    - name: Run Deployment Script
      env:
        # Pass secrets/variables needed by the script
        # Assumes AWS keys are already configured above
        STAGE: ${{ env.STAGE }}
        AWS_REGION: ${{ env.AWS_REGION }}
        SAM_DEPLOYMENT_BUCKET: ${{ secrets.SAM_DEPLOYMENT_BUCKET }} # From Environment secrets
        LAMBDA_SG_ID: ${{ secrets.LAMBDA_SG_ID }}               # From Environment secrets
        PRIVATE_SUBNET_1_ID: ${{ secrets.PRIVATE_SUBNET_1_ID }} # From Environment secrets
        PRIVATE_SUBNET_2_ID: ${{ secrets.PRIVATE_SUBNET_2_ID }} # From Environment secrets
      run: ./scripts/deploy_cyphera_api.sh
    # --- END NEW DEPLOY STEPS ---

    # Optional: Show stack outputs after successful deployment
    # - name: Show SAM Stack Outputs
    #   if: success() # Only run if deploy script succeeded
    #   run: aws cloudformation describe-stacks --stack-name cyphera-api-${{ env.STAGE }} --query 'Stacks[0].Outputs' --region ${{ env.AWS_REGION }}
        