name: Delegation Server CI/CD

on:
  push:
    branches: [ dev, main ]
    paths: # Only trigger on changes within delegation-server or this workflow file
      - 'apps/delegation-server/**'
      - '.github/workflows/delegation-server.yml'
  pull_request:
    branches: [ dev, main ]
    paths:
      - 'apps/delegation-server/**'
      - '.github/workflows/delegation-server.yml'

env:
  NODE_VERSION: '20'
  # Define stage based on branch, similar to the API workflow
  STAGE: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}

jobs:
  lint:
    name: Lint Delegation Server
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: apps/delegation-server/package-lock.json # Adjust if using yarn or pnpm
      - name: Install dependencies
        run: make delegation-server-setup # Runs npm install/ci via setup script
      - name: Run linter
        run: make delegation-server-lint

  test:
    name: Test Delegation Server
    runs-on: ubuntu-latest
    # Add services if needed (e.g., localstack for AWS S3/SQS interaction tests)
    steps:
      - uses: actions/checkout@v3

      # Add this debug step
      - name: List files in workspace
        run: ls -R

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: apps/delegation-server/package-lock.json
      - name: Install dependencies
        run: make delegation-server-setup
      - name: Run tests
        run: make delegation-server-test

  build:
    name: Build Delegation Server
    needs: [test] # Run build only if lint and test pass
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: apps/delegation-server/package-lock.json
      - name: Install dependencies
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: make delegation-server-setup
      - name: Build application
        run: make delegation-server-build
      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: delegation-server-${{ env.STAGE }}
          path: |
            apps/delegation-server/package.json
            apps/delegation-server/package-lock.json # Include lock file
            # dist is no longer needed here as build happens in Dockerfile

  deploy:
    name: Deploy Delegation Server to ECS Fargate
    needs: [build] # Depends on the build job succeeding
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }} # Fix: Use github context directly

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # No artifact download needed if building Docker image from source
      # - name: Download build artifact ...

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 # Match your Terraform region

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          # Construct repository name based on Terraform convention
          ECR_REPOSITORY: cyphera-delegation-server-${{ env.STAGE }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }} # Use Git SHA for unique image tag
        run: |
          echo "Building and pushing image $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG and :latest"
          # Build the docker image locally
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f infrastructure/docker/delegation-server/Dockerfile apps/delegation-server/
          # Also tag as latest
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          # Push the image with Git SHA tag to ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          # Push the image with 'latest' tag to ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          # Set image URI as output for potential use (optional) - keeping SHA tag for reference
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Update ECS Service to force new deployment
        id: update-service
        env:
          # Construct cluster and service names based on Terraform convention
          ECS_CLUSTER_NAME: cyphera-delegation-cluster-${{ env.STAGE }}
          ECS_SERVICE_NAME: cyphera-delegation-server-${{ env.STAGE }}
          AWS_REGION: us-east-1 # Match your Terraform region
        run: |
          echo "Updating ECS service $ECS_SERVICE_NAME in cluster $ECS_CLUSTER_NAME to force new deployment..."
          # Use AWS CLI v2 to update the service and force a new deployment
          # This pulls the new image tagged with the Git SHA
          aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $ECS_SERVICE_NAME --force-new-deployment --region $AWS_REGION
          echo "ECS service update initiated."

      # Add step to wait for service stability if needed
      - name: Wait for service stability
        timeout-minutes: 15 # Add timeout
        env:
          ECS_CLUSTER_NAME: cyphera-delegation-cluster-${{ env.STAGE }}
          ECS_SERVICE_NAME: cyphera-delegation-server-${{ env.STAGE }}
          AWS_REGION: us-east-1 # Match your Terraform region
        run: |
          echo "Waiting for service $ECS_SERVICE_NAME to become stable..."
          # Use AWS CLI v2 to update the service and force a new deployment
          # This pulls the new image tagged with the Git SHA
          aws ecs wait services-stable --cluster $ECS_CLUSTER_NAME --services $ECS_SERVICE_NAME --region $AWS_REGION
          echo "Service $ECS_SERVICE_NAME is stable." 