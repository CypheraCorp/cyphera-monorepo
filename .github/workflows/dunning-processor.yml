name: Deploy Dunning Processor

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'apps/dunning-processor/**'
      - 'libs/go/**'
      - 'infrastructure/aws-sam/template-dunning.yaml'
      - '.github/workflows/dunning-processor.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'apps/dunning-processor/**'
      - 'libs/go/**'
      - 'infrastructure/aws-sam/template-dunning.yaml'
      - '.github/workflows/dunning-processor.yml'
  workflow_dispatch:
    inputs:
      stage:
        description: 'Deployment stage (dev/prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

env:
  GO_VERSION: '1.21'
  AWS_REGION: 'us-east-1'

jobs:
  test:
    name: Test Dunning Processor
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: |
          cd apps/dunning-processor
          go mod download

      - name: Run tests
        run: |
          cd apps/dunning-processor
          go test -v ./...

      - name: Run linter
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          working-directory: apps/dunning-processor
          args: --timeout=5m

  build:
    name: Build Dunning Processor
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build Lambda function
        run: |
          cd apps/dunning-processor
          make build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dunning-processor-build
          path: apps/dunning-processor/bin/

  deploy-dev:
    name: Deploy to Dev
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.stage == 'dev')
    environment: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.stage || 'dev' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dunning-processor-build
          path: apps/dunning-processor/bin/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install SAM CLI
        uses: aws-actions/setup-sam@v2

      - name: Deploy to Dev
        run: |
          sam deploy \
            --template-file infrastructure/aws-sam/template-dunning.yaml \
            --stack-name dunning-processor-dev \
            --capabilities CAPABILITY_IAM \
            --region ${{ env.AWS_REGION }} \
            --parameter-overrides \
              Stage=dev \
              DBHost=${{ secrets.DEV_DB_HOST }} \
              RDSSecretArn=${{ secrets.DEV_RDS_SECRET_ARN }} \
              ResendAPIKeyArn=${{ secrets.DEV_RESEND_API_KEY_ARN }} \
              VpcSubnetIds=${{ secrets.DEV_VPC_SUBNET_IDS }} \
              VpcSecurityGroupIds=${{ secrets.DEV_VPC_SECURITY_GROUP_IDS }} \
              ScheduleExpression="rate(5 minutes)" \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset

      - name: Verify deployment
        run: |
          FUNCTION_NAME=$(aws cloudformation describe-stacks \
            --stack-name dunning-processor-dev \
            --query 'Stacks[0].Outputs[?OutputKey==`DunningProcessorFunctionName`].OutputValue' \
            --output text)
          echo "Deployed function: $FUNCTION_NAME"
          aws lambda get-function --function-name $FUNCTION_NAME

  deploy-prod:
    name: Deploy to Production
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.stage == 'prod')
    environment: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.stage || 'prod' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dunning-processor-build
          path: apps/dunning-processor/bin/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install SAM CLI
        uses: aws-actions/setup-sam@v2

      - name: Deploy to Production
        run: |
          sam deploy \
            --template-file infrastructure/aws-sam/template-dunning.yaml \
            --stack-name dunning-processor-prod \
            --capabilities CAPABILITY_IAM \
            --region ${{ env.AWS_REGION }} \
            --parameter-overrides \
              Stage=prod \
              DBHost=${{ secrets.PROD_DB_HOST }} \
              RDSSecretArn=${{ secrets.PROD_RDS_SECRET_ARN }} \
              ResendAPIKeyArn=${{ secrets.PROD_RESEND_API_KEY_ARN }} \
              VpcSubnetIds=${{ secrets.PROD_VPC_SUBNET_IDS }} \
              VpcSecurityGroupIds=${{ secrets.PROD_VPC_SECURITY_GROUP_IDS }} \
              ScheduleExpression="rate(1 minute)" \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset

      - name: Verify deployment
        run: |
          FUNCTION_NAME=$(aws cloudformation describe-stacks \
            --stack-name dunning-processor-prod \
            --query 'Stacks[0].Outputs[?OutputKey==`DunningProcessorFunctionName`].OutputValue' \
            --output text)
          echo "Deployed function: $FUNCTION_NAME"
          aws lambda get-function --function-name $FUNCTION_NAME

      - name: Run smoke test
        run: |
          FUNCTION_NAME=$(aws cloudformation describe-stacks \
            --stack-name dunning-processor-prod \
            --query 'Stacks[0].Outputs[?OutputKey==`DunningProcessorFunctionName`].OutputValue' \
            --output text)
          echo "Running smoke test on $FUNCTION_NAME"
          aws lambda invoke \
            --function-name $FUNCTION_NAME \
            --payload '{}' \
            response.json
          cat response.json