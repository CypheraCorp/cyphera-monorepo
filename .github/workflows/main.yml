name: Cyphera API CI/CD

on:
  push:
    branches: [ dev, main ]
  pull_request:
    branches: [ dev, main ]

env:
  GO_VERSION: '1.23'
  AWS_REGION: us-east-1
  ECR_REPOSITORY: cyphera-api
  ECS_SERVICE: cyphera-api
  ECS_CLUSTER: cyphera-api-cluster
  STAGE: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: cyphera_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
    
    - name: Install Go dependencies
      run: go mod download
    
    - name: Install Node dependencies
      env:
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: make delegation-server-setup

    - name: Run Go tests
      run: go test -v ./...

    - name: Run delegation server tests
      run: make delegation-server-test

    - name: Run integration tests
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/cyphera_test?sslmode=disable
        DELEGATION_LOCAL_MODE: true
        DELEGATION_SERVER_URL: localhost:50051
        DELEGATION_GRPC_ADDR: localhost:50051
        GRPC_PORT: 50051
        GRPC_HOST: 0.0.0.0
        PORT: 8000
      run: |
        chmod +x scripts/integration-test.sh
        make test-integration

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: v1.59.1
        skip-cache: true
        args: -v

  build:
    name: Build
    needs: [test, lint]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Build Lambda package
      run: |
        chmod +x scripts/build.sh
        ./scripts/build.sh

    - name: Verify binary
      run: |
        echo "Binary details:"
        file bootstrap
        ls -lh bootstrap
        echo "Checking binary architecture..."
        if ! file bootstrap | grep -q "x86-64"; then
          echo "Error: Binary is not compiled for x86_64"
          exit 1
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: bootstrap
        path: bootstrap

    - name: Build delegation server
      run: make delegation-server-build

    - name: Upload delegation server artifact
      uses: actions/upload-artifact@v4
      with:
        name: delegation-server
        path: delegation-server

  deploy:
    name: Deploy
    needs: [build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'  # Allow deployments from both main and dev branches
    
    steps:
    - uses: actions/checkout@v3

    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: bootstrap
        path: .

    - name: Download delegation server artifact
      uses: actions/download-artifact@v4
      with:
        name: delegation-server
        path: .

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install Serverless Framework
      run: |
        npm install -g serverless@3.33.0
        npm install -g serverless-domain-manager

    - name: Deploy with Serverless
      env:
        STAGE: ${{ env.STAGE }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_JWT_SECRET: ${{ secrets.SUPABASE_JWT_SECRET }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        CORS_ALLOWED_ORIGINS: ${{ secrets.CORS_ALLOWED_ORIGINS || 'http://localhost:3000' }}
        CORS_ALLOWED_METHODS: ${{ secrets.CORS_ALLOWED_METHODS || 'GET,POST,PUT,DELETE,OPTIONS,PATCH' }}
        CORS_ALLOWED_HEADERS: ${{ secrets.CORS_ALLOWED_HEADERS || 'Content-Type,Authorization,X-API-Key,X-Workspace-ID,X-Account-ID' }}
        CORS_EXPOSED_HEADERS: ${{ secrets.CORS_EXPOSED_HEADERS || 'Content-Length,Content-Type' }}
        CORS_ALLOW_CREDENTIALS: ${{ secrets.CORS_ALLOW_CREDENTIALS || 'true' }}
        DELEGATION_SERVER_URL: ${{ secrets.DELEGATION_SERVER_URL || 'localhost:50051' }}
        DELEGATION_LOCAL_MODE: ${{ secrets.DELEGATION_LOCAL_MODE || 'true' }}
        DELEGATION_GRPC_ADDR: ${{ secrets.DELEGATION_GRPC_ADDR || 'localhost:50051' }}
        GRPC_PORT: ${{ secrets.GRPC_PORT || '50051' }}
        GRPC_HOST: ${{ secrets.GRPC_HOST || '0.0.0.0' }}
        PORT: ${{ secrets.PORT || '8000' }}
      run: |
        # Create domain if it doesn't exist
        serverless create-domain --stage ${{ env.STAGE }} --verbose || true
        # Wait a bit for domain to be ready
        sleep 30
        # Deploy the service
        serverless deploy --stage ${{ env.STAGE }} --verbose

    - name: Log deployment info
      env:
        STAGE: ${{ env.STAGE }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_JWT_SECRET: ${{ secrets.SUPABASE_JWT_SECRET }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        CORS_ALLOWED_ORIGINS: ${{ secrets.CORS_ALLOWED_ORIGINS || 'http://localhost:3000' }}
        CORS_ALLOWED_METHODS: ${{ secrets.CORS_ALLOWED_METHODS || 'GET,POST,PUT,DELETE,OPTIONS,PATCH' }}
        CORS_ALLOWED_HEADERS: ${{ secrets.CORS_ALLOWED_HEADERS || 'Content-Type,Authorization,X-API-Key,X-Workspace-ID,X-Account-ID' }}
        CORS_EXPOSED_HEADERS: ${{ secrets.CORS_EXPOSED_HEADERS || 'Content-Length,Content-Type' }}
        CORS_ALLOW_CREDENTIALS: ${{ secrets.CORS_ALLOW_CREDENTIALS || 'true' }}
        DELEGATION_SERVER_URL: ${{ secrets.DELEGATION_SERVER_URL || 'localhost:50051' }}
        DELEGATION_LOCAL_MODE: ${{ secrets.DELEGATION_LOCAL_MODE || 'true' }}
        DELEGATION_GRPC_ADDR: ${{ secrets.DELEGATION_GRPC_ADDR || 'localhost:50051' }}
        GRPC_PORT: ${{ secrets.GRPC_PORT || '50051' }}
        GRPC_HOST: ${{ secrets.GRPC_HOST || '0.0.0.0' }}
        PORT: ${{ secrets.PORT || '8000' }}
      run: |
        echo "Deployed to AWS Lambda"
        serverless info --stage ${{ env.STAGE }} 