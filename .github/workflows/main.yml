name: Cyphera API CI/CD

on:
  push:
    branches: [ dev, main ]
  pull_request:
    branches: [ dev, main ]

env:
  GO_VERSION: '1.23'
  AWS_REGION: us-east-1
  ECR_REPOSITORY: cyphera-api
  ECS_SERVICE: cyphera-api
  ECS_CLUSTER: cyphera-api-cluster
  STAGE: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: cyphera_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
    
    - name: Install dependencies
      run: go mod download

    - name: Run tests
      env:  
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/cyphera_test?sslmode=disable
        AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
        AUTH0_AUDIENCE: ${{ secrets.AUTH0_AUDIENCE }}
      run: go test -v ./...

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest

  build:
    name: Build
    needs: [test, lint]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Build Lambda package
      run: |
        chmod +x scripts/build.sh
        ./scripts/build.sh

    - name: Verify binary
      run: |
        echo "Binary details:"
        file bootstrap
        ls -lh bootstrap
        echo "Checking binary architecture..."
        if ! file bootstrap | grep -q "x86-64"; then
          echo "Error: Binary is not compiled for x86_64"
          exit 1
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: bootstrap
        path: bootstrap

  deploy:
    name: Deploy
    needs: [build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'  # Allow deployments from both main and dev branches
    
    steps:
    - uses: actions/checkout@v3

    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: bootstrap
        path: .

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install Serverless Framework
      run: |
        npm install -g serverless@3.33.0
        npm install -g serverless-domain-manager

    - name: Deploy with Serverless
      env:
        STAGE: ${{ env.STAGE }}
        AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
        AUTH0_AUDIENCE: ${{ secrets.AUTH0_AUDIENCE }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
      run: |
        # Create domain if it doesn't exist
        serverless create-domain --stage ${{ env.STAGE }} --verbose || true
        # Wait a bit for domain to be ready
        sleep 30
        # Deploy the service
        serverless deploy --stage ${{ env.STAGE }} --verbose

    - name: Log deployment info
      env:
        STAGE: ${{ env.STAGE }}
        AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
        AUTH0_AUDIENCE: ${{ secrets.AUTH0_AUDIENCE }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
      run: |
        echo "Deployed to AWS Lambda"
        serverless info --stage ${{ env.STAGE }} 