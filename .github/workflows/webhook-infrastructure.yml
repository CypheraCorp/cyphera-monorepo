name: Webhook Infrastructure CI/CD

on:
  push:
    branches: [ dev, main ]
    paths:
      - 'cmd/webhook-receiver/**'
      - 'cmd/webhook-processor/**'
      - 'cmd/dlq-processor/**'
      - 'internal/services/error_recovery_service.go'
      - 'internal/handlers/error_recovery_handlers.go'
      - 'internal/client/payment_sync/**'
      - 'internal/db/queries/webhook_management.sql'
      - 'deployment/template-webhook.yaml'
      - 'terraform/webhook_*.tf'
      - '.github/workflows/webhook-infrastructure.yml'
      - 'Makefile' # Include Makefile changes that affect webhook builds
  pull_request:
    branches: [ dev, main ]
    paths:
      - 'cmd/webhook-receiver/**'
      - 'cmd/webhook-processor/**'
      - 'cmd/dlq-processor/**'
      - 'internal/services/error_recovery_service.go'
      - 'internal/handlers/error_recovery_handlers.go'
      - 'internal/client/payment_sync/**'
      - 'internal/db/queries/webhook_management.sql'
      - 'deployment/template-webhook.yaml'
      - 'terraform/webhook_*.tf'
      - '.github/workflows/webhook-infrastructure.yml'
      - 'Makefile'

env:
  GO_VERSION: '1.23'
  AWS_REGION: us-east-1
  STAGE: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
  TEMPLATE_FILE: deployment/template-webhook.yaml

jobs:
  test:
    name: Test Webhook Infrastructure
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: cyphera_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        cache-dependency-path: go.sum

    - name: Install Go dependencies
      run: go mod download

    - name: Run webhook-specific tests
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/cyphera_test?sslmode=disable
        STRIPE_API_KEY: sk_test_fake_key_for_testing
        STRIPE_WEBHOOK_SECRET: whsec_fake_secret_for_testing
        PAYMENT_SYNC_ENCRYPTION_KEY: fake_encryption_key_for_testing_32chars
      run: |
        # Test webhook receiver
        go test -v ./cmd/webhook-receiver/...
        # Test webhook processor  
        go test -v ./cmd/webhook-processor/...
        # Test DLQ processor
        go test -v ./cmd/dlq-processor/...
        # Test error recovery service
        go test -v ./internal/services -run ".*ErrorRecovery.*"
        # Test error recovery handlers
        go test -v ./internal/handlers -run ".*ErrorRecovery.*"
        # Test payment sync client
        go test -v ./internal/client/payment_sync/...

    - name: Run webhook integration tests
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/cyphera_test?sslmode=disable
        STRIPE_API_KEY: sk_test_fake_key_for_testing
        STRIPE_WEBHOOK_SECRET: whsec_fake_secret_for_testing
        PAYMENT_SYNC_ENCRYPTION_KEY: fake_encryption_key_for_testing_32chars
      run: |
        # Run database migration to ensure webhook tables exist
        go run cmd/migrate/main.go || echo "Migration may not exist yet"
        # Test webhook end-to-end flow (if integration tests exist)
        make test-webhook-integration || echo "Integration tests not yet implemented"

  lint:
    name: Lint Webhook Infrastructure
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        cache-dependency-path: go.sum

    - name: Run golangci-lint on webhook components
      uses: golangci/golangci-lint-action@v5
      with:
        version: v1.60.1
        args: --concurrency=4 ./cmd/webhook-receiver/... ./cmd/webhook-processor/... ./cmd/dlq-processor/... ./internal/services/error_recovery_service.go ./internal/handlers/error_recovery_handlers.go

  build:
    name: Build Webhook Components
    needs: [test, lint]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        cache-dependency-path: go.sum

    - name: Install Go dependencies
      run: go mod download

    - name: Build webhook receiver
      run: make build-webhook-receiver

    - name: Build webhook processor
      run: make build-webhook-processor

    - name: Build DLQ processor
      run: make build-dlq-processor

    - name: Archive webhook binaries
      uses: actions/upload-artifact@v4
      with:
        name: webhook-binaries-${{ env.STAGE }}
        path: |
          bin/webhook-receiver
          bin/webhook-processor
          bin/dlq-processor
        retention-days: 30

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install Gosec
      run: go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest

    - name: Run Gosec Security Scanner
      run: |
        gosec -fmt sarif -out gosec.sarif ./cmd/webhook-receiver/... ./cmd/webhook-processor/... ./cmd/dlq-processor/... || true

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: gosec.sarif
      if: always()

  terraform-plan:
    name: Terraform Plan (Webhook Infrastructure)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.0

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      working-directory: terraform
      run: terraform init

    - name: Terraform Plan (Webhook Resources)
      working-directory: terraform
      run: |
        terraform plan \
          -target=aws_sqs_queue.provider_webhook_events \
          -target=aws_sqs_queue.provider_webhook_events_dlq \
          -target=aws_api_gateway_rest_api.webhook_api \
          -target=aws_secretsmanager_secret.payment_sync_encryption_key \
          -target=aws_iam_policy.webhook_secrets_policy \
          -target=aws_iam_policy.webhook_sqs_policy \
          -var="stage=${{ env.STAGE }}" \
          -var="aws_region=${{ env.AWS_REGION }}"

  deploy:
    name: Deploy Webhook Infrastructure
    needs: [build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}

    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.0
        terraform_wrapper: false

    - name: Setup SAM CLI
      uses: aws-actions/setup-sam@v2
      with:
        use-installer: true

    # Deploy Terraform infrastructure first
    - name: Terraform Init
      working-directory: terraform
      run: terraform init

    - name: Deploy Terraform Infrastructure
      working-directory: terraform
      env:
        TF_VAR_stage: ${{ env.STAGE }}
        TF_VAR_aws_region: ${{ env.AWS_REGION }}
        TF_VAR_payment_sync_encryption_key_value: ${{ secrets.PAYMENT_SYNC_ENCRYPTION_KEY }}
      run: |
        terraform apply -auto-approve \
          -target=aws_sqs_queue.provider_webhook_events \
          -target=aws_sqs_queue.provider_webhook_events_dlq \
          -target=aws_api_gateway_rest_api.webhook_api \
          -target=aws_secretsmanager_secret.payment_sync_encryption_key \
          -target=aws_iam_policy.webhook_secrets_policy \
          -target=aws_iam_policy.webhook_sqs_policy

    # Get Terraform outputs for SAM deployment
    - name: Get Terraform outputs
      working-directory: terraform
      run: |
        echo "WEBHOOK_SQS_QUEUE_URL=$(terraform output -raw webhook_sqs_queue_url)" >> $GITHUB_ENV
        echo "WEBHOOK_DLQ_QUEUE_URL=$(terraform output -raw webhook_dlq_queue_url)" >> $GITHUB_ENV
        echo "PAYMENT_SYNC_ENCRYPTION_KEY_SECRET_ARN=$(terraform output -raw payment_sync_encryption_key_secret_arn)" >> $GITHUB_ENV
        echo "WEBHOOK_SECRETS_POLICY_ARN=$(terraform output -raw webhook_secrets_policy_arn)" >> $GITHUB_ENV
        echo "WEBHOOK_SQS_POLICY_ARN=$(terraform output -raw webhook_sqs_policy_arn)" >> $GITHUB_ENV

    # SAM Build and Deploy
    - name: SAM Build for Webhook Infrastructure
      run: sam build --template ${{ env.TEMPLATE_FILE }} --use-container --no-cached

    - name: Create webhook deployment script
      run: |
        cat > scripts/deploy_webhook_infrastructure.sh << 'EOF'
        #!/bin/bash
        set -e

        echo "🚀 Deploying Webhook Infrastructure for stage: $STAGE"

        # Deploy SAM stack with all required parameters
        sam deploy \
          --template-file $TEMPLATE_FILE \
          --stack-name cyphera-webhook-infrastructure-$STAGE \
          --parameter-overrides \
            Stage=$STAGE \
            RdsSecretArnValue=$RDS_SECRET_ARN \
            DbHostValue=$DB_HOST \
            WebhookSqsQueueUrl=$WEBHOOK_SQS_QUEUE_URL \
            WebhookDlqQueueUrl=$WEBHOOK_DLQ_QUEUE_URL \
            PaymentSyncEncryptionKeySecretArn=$PAYMENT_SYNC_ENCRYPTION_KEY_SECRET_ARN \
            LambdaSecurityGroupId=$LAMBDA_SG_ID \
            PrivateSubnet1Id=$PRIVATE_SUBNET_1_ID \
            PrivateSubnet2Id=$PRIVATE_SUBNET_2_ID \
            WebhookSecretsManagerPolicyArn=$WEBHOOK_SECRETS_POLICY_ARN \
          --capabilities CAPABILITY_IAM \
          --region $AWS_REGION \
          --no-confirm-changeset \
          --no-fail-on-empty-changeset

        echo "✅ Webhook Infrastructure deployment completed successfully!"
        EOF

        chmod +x scripts/deploy_webhook_infrastructure.sh

    - name: Deploy Webhook Infrastructure
      env:
        STAGE: ${{ env.STAGE }}
        AWS_REGION: ${{ env.AWS_REGION }}
        RDS_SECRET_ARN: ${{ secrets.RDS_SECRET_ARN }}
        DB_HOST: ${{ secrets.DB_HOST }}
        LAMBDA_SG_ID: ${{ secrets.LAMBDA_SG_ID }}
        PRIVATE_SUBNET_1_ID: ${{ secrets.PRIVATE_SUBNET_1_ID }}
        PRIVATE_SUBNET_2_ID: ${{ secrets.PRIVATE_SUBNET_2_ID }}
      run: ./scripts/deploy_webhook_infrastructure.sh

    # Update API Gateway with new Lambda functions
    - name: Update API Gateway Integration
      working-directory: terraform
      run: |
        terraform apply -auto-approve \
          -target=aws_api_gateway_rest_api.webhook_api \
          -target=aws_api_gateway_integration.webhook_lambda_integration \
          -target=aws_lambda_permission.webhook_receiver_api_gateway

    # Health check and verification
    - name: Verify Deployment
      run: |
        echo "🔍 Verifying webhook infrastructure deployment..."
        
        # Check Lambda functions exist
        aws lambda get-function --function-name cyphera-webhook-receiver-${{ env.STAGE }} --region ${{ env.AWS_REGION }}
        aws lambda get-function --function-name cyphera-webhook-processor-${{ env.STAGE }} --region ${{ env.AWS_REGION }}
        aws lambda get-function --function-name cyphera-dlq-processor-${{ env.STAGE }} --region ${{ env.AWS_REGION }}
        
        # Check SQS queues exist
        aws sqs get-queue-attributes --queue-url $WEBHOOK_SQS_QUEUE_URL --attribute-names All --region ${{ env.AWS_REGION }}
        aws sqs get-queue-attributes --queue-url $WEBHOOK_DLQ_QUEUE_URL --attribute-names All --region ${{ env.AWS_REGION }}
        
        echo "✅ All webhook infrastructure components verified successfully!"

    # Optional: Show deployment outputs
    - name: Show Deployment Outputs
      if: success()
      run: |
        echo "📋 Webhook Infrastructure Deployment Summary:"
        echo "Stack: cyphera-webhook-infrastructure-${{ env.STAGE }}"
        echo "Region: ${{ env.AWS_REGION }}"
        aws cloudformation describe-stacks \
          --stack-name cyphera-webhook-infrastructure-${{ env.STAGE }} \
          --query 'Stacks[0].Outputs' \
          --region ${{ env.AWS_REGION }}

  # Post-deployment testing
  smoke-test:
    name: Smoke Test Webhook Infrastructure
    needs: [deploy]
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev') && success()
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}

    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Test Lambda Function Health
      run: |
        echo "🧪 Running smoke tests for webhook infrastructure..."
        
        # Test webhook receiver function
        aws lambda invoke \
          --function-name cyphera-webhook-receiver-${{ env.STAGE }} \
          --payload '{"httpMethod": "GET", "path": "/health"}' \
          --region ${{ env.AWS_REGION }} \
          response.json || true
        
        echo "Webhook receiver response:"
        cat response.json || echo "No response file"
        
        # Test webhook processor function (invoke with empty SQS event)
        aws lambda invoke \
          --function-name cyphera-webhook-processor-${{ env.STAGE }} \
          --payload '{"Records": []}' \
          --region ${{ env.AWS_REGION }} \
          response2.json || true
        
        echo "Webhook processor response:"
        cat response2.json || echo "No response file"
        
        echo "✅ Smoke tests completed"

    - name: Test Error Recovery API Health
      run: |
        echo "🧪 Testing error recovery API endpoints..."
        
        # Test error recovery health endpoint via AWS CLI
        aws lambda invoke \
          --function-name cyphera-webhook-receiver-${{ env.STAGE }} \
          --payload '{"httpMethod": "GET", "path": "/api/v1/error-recovery/health"}' \
          --region ${{ env.AWS_REGION }} \
          health_response.json || true
        
        echo "Error recovery health response:"
        cat health_response.json || echo "No response file"
        
        echo "✅ Error recovery API health check completed" 