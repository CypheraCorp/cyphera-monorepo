basePath: /api/v1
definitions:
  handlers.APIKeyResponse:
    properties:
      access_level:
        type: string
      created_at:
        type: integer
      expires_at:
        type: integer
      id:
        type: string
      last_used_at:
        type: integer
      metadata:
        additionalProperties: true
        type: object
      name:
        type: string
      object:
        type: string
      updated_at:
        type: integer
    type: object
  handlers.AccountDetailsResponse:
    properties:
      account:
        $ref: '#/definitions/handlers.AccountResponse'
      user:
        $ref: '#/definitions/handlers.UserResponse'
    type: object
  handlers.AccountResponse:
    properties:
      account_type:
        type: string
      business_name:
        type: string
      business_type:
        type: string
      created_at:
        type: integer
      finished_onboarding:
        type: boolean
      id:
        type: string
      metadata:
        additionalProperties: true
        type: object
      name:
        type: string
      object:
        type: string
      support_email:
        type: string
      support_phone:
        type: string
      updated_at:
        type: integer
      website_url:
        type: string
      workspaces:
        items:
          $ref: '#/definitions/handlers.WorkspaceResponse'
        type: array
    type: object
  handlers.CircleWalletData:
    properties:
      chain_id:
        type: integer
      circle_user_id:
        type: string
      circle_wallet_id:
        type: string
      state:
        type: string
    type: object
  handlers.CreatePriceRequest:
    properties:
      active:
        type: boolean
      currency:
        type: string
      interval_count:
        type: integer
      interval_type:
        type: string
      metadata:
        type: object
      nickname:
        type: string
      term_length:
        type: integer
      type:
        type: string
      unit_amount_in_pennies:
        type: integer
    required:
    - currency
    - type
    - unit_amount_in_pennies
    type: object
  handlers.CreateProductRequest:
    properties:
      active:
        type: boolean
      description:
        type: string
      image_url:
        type: string
      metadata:
        type: object
      name:
        type: string
      prices:
        items:
          $ref: '#/definitions/handlers.CreatePriceRequest'
        type: array
      product_tokens:
        items:
          $ref: '#/definitions/handlers.CreateProductTokenRequest'
        type: array
      url:
        type: string
      wallet_id:
        type: string
    required:
    - name
    - prices
    - wallet_id
    type: object
  handlers.CreateProductTokenRequest:
    properties:
      active:
        type: boolean
      network_id:
        type: string
      product_id:
        type: string
      token_id:
        type: string
    required:
    - network_id
    - product_id
    - token_id
    type: object
  handlers.CreateWalletRequest:
    properties:
      chain_id:
        description: Only for circle wallets
        type: integer
      circle_user_id:
        description: Circle wallet specific fields
        type: string
      circle_wallet_id:
        description: Only for circle wallets
        type: string
      ens:
        type: string
      is_primary:
        type: boolean
      metadata:
        additionalProperties: true
        type: object
      network_id:
        type: string
      network_type:
        type: string
      nickname:
        type: string
      state:
        description: Only for circle wallets
        type: string
      verified:
        type: boolean
      wallet_address:
        type: string
      wallet_type:
        description: '''wallet'' or ''circle_wallet'''
        type: string
    required:
    - network_id
    - network_type
    - wallet_address
    - wallet_type
    type: object
  handlers.CustomerResponse:
    properties:
      business_name:
        type: string
      created_at:
        type: integer
      description:
        type: string
      email:
        type: string
      external_id:
        type: string
      id:
        type: string
      metadata:
        additionalProperties: true
        type: object
      name:
        type: string
      object:
        type: string
      phone:
        type: string
      updated_at:
        type: integer
      workspace_id:
        type: string
      workspace_name:
        type: string
    type: object
  handlers.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  handlers.GetTokenQuoteRequest:
    properties:
      fiat_symbol:
        type: string
      token_symbol:
        type: string
    required:
    - fiat_symbol
    - token_symbol
    type: object
  handlers.GetTokenQuoteResponse:
    properties:
      fiat_symbol:
        type: string
      token_amount_in_fiat:
        type: number
      token_symbol:
        type: string
    type: object
  handlers.ListAPIKeysResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/handlers.APIKeyResponse'
        type: array
      has_more:
        type: boolean
      object:
        type: string
      total:
        type: integer
    type: object
  handlers.ListNetworksWithTokensResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/handlers.NetworkWithTokensResponse'
        type: array
      object:
        type: string
    type: object
  handlers.ListProductsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/handlers.ProductResponse'
        type: array
      has_more:
        type: boolean
      object:
        type: string
      total:
        type: integer
    type: object
  handlers.ListTokensResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/handlers.TokenResponse'
        type: array
      object:
        type: string
    type: object
  handlers.ListWorkspacesResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/handlers.WorkspaceResponse'
        type: array
      object:
        type: string
    type: object
  handlers.NetworkResponse:
    properties:
      active:
        type: boolean
      block_explorer_url:
        type: string
      chain_id:
        type: integer
      circle_network_type:
        type: string
      created_at:
        type: integer
      id:
        type: string
      is_testnet:
        type: boolean
      name:
        type: string
      network_type:
        type: string
      object:
        type: string
      type:
        type: string
      updated_at:
        type: integer
    type: object
  handlers.NetworkWithTokensResponse:
    properties:
      network:
        $ref: '#/definitions/handlers.NetworkResponse'
      tokens:
        items:
          $ref: '#/definitions/handlers.TokenResponse'
        type: array
    type: object
  handlers.PaginatedResponse:
    properties:
      data: {}
      has_more:
        type: boolean
      object:
        type: string
      pagination:
        $ref: '#/definitions/handlers.Pagination'
    type: object
  handlers.Pagination:
    properties:
      current_page:
        type: integer
      per_page:
        type: integer
      total_items:
        type: integer
      total_pages:
        type: integer
    type: object
  handlers.PriceResponse:
    properties:
      active:
        type: boolean
      created_at:
        type: integer
      currency:
        type: string
      id:
        type: string
      interval_count:
        type: integer
      interval_type:
        type: string
      metadata:
        type: object
      nickname:
        type: string
      object:
        type: string
      product_id:
        type: string
      term_length:
        type: integer
      type:
        type: string
      unit_amount_in_pennies:
        type: integer
      updated_at:
        type: integer
    type: object
  handlers.ProductResponse:
    properties:
      active:
        type: boolean
      created_at:
        type: integer
      description:
        type: string
      id:
        type: string
      image_url:
        type: string
      metadata:
        type: object
      name:
        type: string
      object:
        type: string
      prices:
        items:
          $ref: '#/definitions/handlers.PriceResponse'
        type: array
      product_tokens:
        items:
          $ref: '#/definitions/handlers.ProductTokenResponse'
        type: array
      updated_at:
        type: integer
      url:
        type: string
      wallet_id:
        type: string
      workspace_id:
        type: string
    type: object
  handlers.ProductTokenResponse:
    properties:
      active:
        type: boolean
      chain_id:
        type: integer
      contract_address:
        type: string
      created_at:
        type: integer
      gas_token:
        type: boolean
      id:
        type: string
      network_id:
        type: string
      network_name:
        type: string
      network_type:
        type: string
      product_id:
        type: string
      token_decimals:
        type: integer
      token_id:
        type: string
      token_name:
        type: string
      token_symbol:
        type: string
      updated_at:
        type: integer
    type: object
  handlers.SubscriptionEventPriceInfo:
    properties:
      currency:
        type: string
      id:
        type: string
      interval_count:
        description: Use pgtype.Int4 to handle potential nulls
        type: integer
      interval_type:
        description: Use db.NullIntervalType to handle potential nulls
        type: string
      term_length:
        description: Use pgtype.Int4 to handle potential nulls
        type: integer
      type:
        description: e.g., recurring, one_off
        type: string
      unit_amount_in_pennies:
        type: integer
    type: object
  handlers.SubscriptionEventResponse:
    properties:
      customer:
        $ref: '#/definitions/handlers.CustomerResponse'
      customer_id:
        type: string
      error_message:
        type: string
      event_amount_in_cents:
        type: integer
      event_created_at:
        type: string
      event_metadata:
        items:
          type: integer
        type: array
      event_occurred_at:
        type: string
      event_type:
        type: string
      id:
        type: string
      network:
        $ref: '#/definitions/handlers.NetworkResponse'
      price_info:
        $ref: '#/definitions/handlers.SubscriptionEventPriceInfo'
      product_id:
        type: string
      product_name:
        type: string
      product_token:
        $ref: '#/definitions/handlers.ProductTokenResponse'
      subscription:
        $ref: '#/definitions/handlers.SubscriptionResponse'
      subscription_id:
        type: string
      subscription_status:
        type: string
      transaction_hash:
        type: string
    type: object
  handlers.SubscriptionResponse:
    properties:
      canceled_at:
        type: string
      created_at:
        type: string
      current_period_end:
        type: string
      current_period_start:
        type: string
      customer_email:
        type: string
      customer_id:
        type: string
      customer_name:
        type: string
      id:
        type: string
      price:
        $ref: '#/definitions/handlers.PriceResponse'
      product:
        $ref: '#/definitions/handlers.ProductResponse'
      product_token:
        $ref: '#/definitions/handlers.ProductTokenResponse'
      status:
        type: string
      token_amount:
        type: integer
      trial_end:
        type: string
      trial_start:
        type: string
      updated_at:
        type: string
      workspace_id:
        type: string
    type: object
  handlers.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  handlers.TokenResponse:
    properties:
      active:
        type: boolean
      contract_address:
        type: string
      created_at:
        type: integer
      decimals:
        type: integer
      deleted_at:
        type: integer
      gas_token:
        type: boolean
      id:
        type: string
      name:
        type: string
      network_id:
        type: string
      object:
        type: string
      symbol:
        type: string
      updated_at:
        type: integer
    type: object
  handlers.UpdateProductRequest:
    properties:
      active:
        type: boolean
      description:
        type: string
      image_url:
        type: string
      metadata:
        type: object
      name:
        type: string
      product_tokens:
        items:
          $ref: '#/definitions/handlers.CreateProductTokenRequest'
        type: array
      url:
        type: string
      wallet_id:
        type: string
    type: object
  handlers.UserResponse:
    properties:
      address_line_1:
        type: string
      address_line_2:
        type: string
      city:
        type: string
      country:
        type: string
      created_at:
        type: integer
      display_name:
        type: string
      email:
        type: string
      email_verified:
        type: boolean
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      locale:
        type: string
      metadata:
        additionalProperties: true
        type: object
      object:
        type: string
      phone:
        type: string
      picture_url:
        type: string
      postal_code:
        type: string
      state_region:
        type: string
      status:
        type: string
      supabase_id:
        type: string
      timezone:
        type: string
      two_factor_enabled:
        type: boolean
      updated_at:
        type: integer
    type: object
  handlers.WalletListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/handlers.WalletResponse'
        type: array
      object:
        type: string
    type: object
  handlers.WalletResponse:
    properties:
      circle_data:
        allOf:
        - $ref: '#/definitions/handlers.CircleWalletData'
        description: Only present for circle wallets
      created_at:
        type: integer
      ens:
        type: string
      id:
        type: string
      is_primary:
        type: boolean
      last_used_at:
        type: integer
      metadata:
        additionalProperties: true
        type: object
      network_id:
        type: string
      network_type:
        type: string
      nickname:
        type: string
      object:
        type: string
      updated_at:
        type: integer
      verified:
        type: boolean
      wallet_address:
        type: string
      wallet_type:
        description: '''wallet'' or ''circle_wallet'''
        type: string
      workspace_id:
        type: string
    type: object
  handlers.WorkspaceResponse:
    description: Workspace response
    properties:
      account_id:
        type: string
      business_name:
        type: string
      business_type:
        type: string
      created_at:
        type: integer
      description:
        type: string
      id:
        type: string
      livemode:
        type: boolean
      metadata:
        additionalProperties: true
        type: object
      name:
        type: string
      object:
        type: string
      support_email:
        type: string
      support_phone:
        type: string
      updated_at:
        type: integer
      website_url:
        type: string
    type: object
host: localhost:8000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API Server for Cyphera application
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Cyphera API
  version: "1.0"
paths:
  /accounts/{account_id}:
    get:
      consumes:
      - application/json
      description: Retrieves the details of the user's account
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.AccountDetailsResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get account
      tags:
      - accounts
  /api-keys:
    get:
      consumes:
      - application/json
      description: Retrieves all API keys for the current workspace
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ListAPIKeysResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List API keys
      tags:
      - api-keys
  /api-keys/{api_key_id}:
    delete:
      consumes:
      - application/json
      description: Soft deletes an API key
      parameters:
      - description: API Key ID
        in: path
        name: api_key_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete API key
      tags:
      - api-keys
    get:
      consumes:
      - application/json
      description: Retrieves a specific API key by its ID
      parameters:
      - description: API Key ID
        in: path
        name: api_key_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.APIKeyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get an API key
      tags:
      - api-keys
  /customers:
    get:
      consumes:
      - application/json
      description: Retrieves paginated customers for the current workspace
      parameters:
      - description: Number of customers to return (default 10, max 100)
        in: query
        name: limit
        type: integer
      - description: Number of customers to skip (default 0)
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/handlers.CustomerResponse'
                  type: array
              type: object
        "400":
          description: Invalid workspace ID format or pagination parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized access to workspace
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List customers
      tags:
      - customers
  /customers/{customer_id}:
    get:
      consumes:
      - application/json
      description: Get customer details by customer ID
      parameters:
      - description: Customer ID
        in: path
        name: customer_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.CustomerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get customer by ID
      tags:
      - customers
  /customers/{customer_id}/subscriptions:
    get:
      consumes:
      - application/json
      description: Get a list of all subscriptions for a specific customer
      parameters:
      - description: Customer ID
        in: path
        name: customer_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/handlers.SubscriptionResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List subscriptions by customer
      tags:
      - subscriptions
  /networks:
    get:
      consumes:
      - application/json
      description: Retrieves all networks with their associated tokens
      parameters:
      - description: Filter networks by testnet status
        in: query
        name: testnet
        type: boolean
      - description: Filter networks by active status
        in: query
        name: active
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ListNetworksWithTokensResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List networks with tokens
      tags:
      - networks
  /networks/{network_id}:
    get:
      consumes:
      - application/json
      description: Get network details by network ID
      parameters:
      - description: Network ID
        in: path
        name: network_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.NetworkResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get network by ID
      tags:
      - networks
  /networks/chain/{chain_id}:
    get:
      consumes:
      - application/json
      description: Get network details by chain ID
      parameters:
      - description: Chain ID
        in: path
        name: chain_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.NetworkResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get network by chain ID
      tags:
      - networks
  /products:
    get:
      consumes:
      - application/json
      description: Retrieves paginated products for a workspace
      parameters:
      - description: Number of products to return (default 10, max 100)
        in: query
        name: limit
        type: integer
      - description: Number of products to skip (default 0)
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ListProductsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Creates a new product with associated prices
      parameters:
      - description: Product and prices creation data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.ProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create product
      tags:
      - products
  /products/{product_id}:
    delete:
      consumes:
      - application/json
      description: Deletes a product and its associated prices (soft delete)
      parameters:
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete product
      tags:
      - products
    get:
      consumes:
      - application/json
      description: Get product details by product ID
      parameters:
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get product by ID
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Updates an existing product. Price updates should be done via price-specific
        endpoints.
      parameters:
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: string
      - description: Product update data (prices are not updated here)
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update product
      tags:
      - products
  /products/{product_id}/subscriptions:
    get:
      consumes:
      - application/json
      description: Get a list of all subscriptions for a specific product
      parameters:
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/handlers.SubscriptionResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List subscriptions by product
      tags:
      - subscriptions
  /subscription-events:
    get:
      consumes:
      - application/json
      description: Retrieves a paginated list of subscription events for the workspace
      parameters:
      - description: Workspace ID
        in: header
        name: X-Workspace-ID
        required: true
        type: string
      - description: Number of events to return (default 20, max 100)
        in: query
        name: limit
        type: integer
      - description: Page number (default 1)
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.PaginatedResponse'
        "400":
          description: Invalid workspace ID format or pagination parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Failed to retrieve or count subscription events
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: List subscription events
      tags:
      - subscription-events
  /subscription-events/{event_id}:
    get:
      consumes:
      - application/json
      description: Retrieves a subscription event by its ID
      parameters:
      - description: Event ID
        in: path
        name: event_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SubscriptionEventResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get a subscription event by ID
      tags:
      - subscription-events
  /subscriptions:
    get:
      consumes:
      - application/json
      description: Get a list of all non-deleted subscriptions
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/handlers.SubscriptionResponse'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List all subscriptions
      tags:
      - subscriptions
  /subscriptions/{subscription_id}:
    delete:
      consumes:
      - application/json
      description: Soft-deletes a subscription (marks as deleted)
      parameters:
      - description: Subscription ID
        in: path
        name: subscription_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete a subscription
      tags:
      - subscriptions
    get:
      consumes:
      - application/json
      description: Retrieves a subscription by its ID
      parameters:
      - description: Subscription ID
        in: path
        name: subscription_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SubscriptionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get a subscription by ID
      tags:
      - subscriptions
  /subscriptions/{subscription_id}/events:
    get:
      consumes:
      - application/json
      description: Get a list of all events for a specific subscription
      parameters:
      - description: Subscription ID
        in: path
        name: subscription_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.SubscriptionEventResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List events for a subscription
      tags:
      - subscription-events
  /tokens:
    get:
      consumes:
      - application/json
      description: Retrieves all tokens
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ListTokensResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List tokens
      tags:
      - tokens
  /tokens/{token_id}:
    get:
      consumes:
      - application/json
      description: Get token details by token ID
      parameters:
      - description: Token ID
        in: path
        name: token_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get token by ID
      tags:
      - tokens
  /tokens/network/{network_id}:
    get:
      consumes:
      - application/json
      description: Retrieves all tokens for a specific network
      parameters:
      - description: Network ID
        in: path
        name: network_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ListTokensResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List tokens by network
      tags:
      - tokens
  /tokens/network/{network_id}/address/{address}:
    get:
      consumes:
      - application/json
      description: Get token details by network ID and contract address
      parameters:
      - description: Network ID
        in: path
        name: network_id
        required: true
        type: string
      - description: Contract Address
        in: path
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get token by address
      tags:
      - tokens
  /tokens/quote:
    post:
      consumes:
      - application/json
      description: Retrieves the price of a given token symbol in the specified fiat
        currency using CoinMarketCap API.
      parameters:
      - description: Token and Fiat symbols
        in: body
        name: quote
        required: true
        schema:
          $ref: '#/definitions/handlers.GetTokenQuoteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.GetTokenQuoteResponse'
        "400":
          description: Invalid request body or missing parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error or failed to fetch price from CoinMarketCap
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get token quote
      tags:
      - tokens
  /users/{user_id}:
    get:
      consumes:
      - application/json
      description: Gets a user by their ID
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user by ID
      tags:
      - users
  /wallets:
    get:
      consumes:
      - application/json
      description: List all wallets for the authenticated workspace
      parameters:
      - description: Include Circle wallet data
        in: query
        name: include_circle_data
        type: boolean
      - description: Filter by wallet type (wallet, circle_wallet)
        in: query
        name: wallet_type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.WalletListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List all wallets
      tags:
      - wallets
    post:
      consumes:
      - application/json
      description: Creates a new wallet for the authenticated workspace
      parameters:
      - description: Wallet creation request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateWalletRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.WalletResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new wallet
      tags:
      - wallets
  /wallets/{wallet_id}:
    delete:
      consumes:
      - application/json
      description: Soft delete a wallet
      parameters:
      - description: Wallet ID
        in: path
        name: wallet_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete a wallet
      tags:
      - wallets
    get:
      consumes:
      - application/json
      description: Get wallet details by wallet ID
      parameters:
      - description: Wallet ID
        in: path
        name: wallet_id
        required: true
        type: string
      - description: Include Circle wallet data
        in: query
        name: include_circle_data
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.WalletResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get wallet by ID
      tags:
      - wallets
  /workspaces:
    get:
      consumes:
      - application/json
      description: Retrieves all workspaces for the current account
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ListWorkspacesResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List workspaces
      tags:
      - workspaces
  /workspaces/{workspace_id}:
    get:
      consumes:
      - application/json
      description: Retrieves a specific workspace by its ID
      parameters:
      - description: Workspace ID
        in: path
        name: workspace_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.WorkspaceResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get a workspace
      tags:
      - workspaces
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
