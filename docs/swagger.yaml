basePath: /api/v1
definitions:
  actalink.Network:
    properties:
      chain_id:
        type: integer
      currency:
        type: string
      name:
        type: string
      type:
        type: string
    type: object
  actalink.Operation:
    properties:
      entryPoint:
        type: string
      executionTime:
        type: integer
      paymentType:
        type: string
      paymentTypeParams:
        $ref: '#/definitions/actalink.PaymentTypeParams'
      status:
        type: string
      transactionHash:
        type: string
      userOp:
        $ref: '#/definitions/actalink.UserOperation'
      userOpHash:
        type: string
    type: object
  actalink.PaymentLink:
    properties:
      createdAt:
        type: string
      id:
        type: string
      subscriptionId:
        type: string
      title:
        type: string
      validTill:
        type: string
    type: object
  actalink.PaymentTypeParams:
    properties:
      paylinkUrl:
        type: string
      subscriptionId:
        type: string
    type: object
  actalink.Plan:
    properties:
      frequency:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        type: number
      subscriptionId:
        type: string
      volume:
        type: integer
    type: object
  actalink.Receiver:
    properties:
      address:
        type: string
      networkId:
        type: integer
      receiverId:
        type: string
      subscriptionId:
        type: string
    type: object
  actalink.Subscriber:
    properties:
      eoaaddress:
        type: string
      plan:
        $ref: '#/definitions/actalink.Plan'
      planId:
        type: string
      status:
        type: string
      subscribedAt:
        type: string
      subscriptionId:
        type: string
      swaddress:
        type: string
    type: object
  actalink.SubscribersData:
    properties:
      subscribers:
        items:
          $ref: '#/definitions/actalink.Subscriber'
        type: array
      subscriptionId:
        type: string
      title:
        type: string
      userid:
        type: string
    type: object
  actalink.Subscription:
    properties:
      createdAt:
        type: string
      id:
        type: string
      linktree:
        type: string
      paymentlink:
        $ref: '#/definitions/actalink.PaymentLink'
      plans:
        items:
          $ref: '#/definitions/actalink.Plan'
        type: array
      receivers:
        items:
          $ref: '#/definitions/actalink.Receiver'
        type: array
      status:
        type: string
      title:
        type: string
      tokens:
        items:
          $ref: '#/definitions/actalink.Token'
        type: array
      trialDays:
        type: integer
      userId:
        type: string
    type: object
  actalink.Token:
    properties:
      address:
        type: string
      chainId:
        type: integer
      coingeckoId:
        type: string
      decimals:
        type: integer
      id:
        type: integer
      logoURI:
        type: string
      name:
        type: string
      symbol:
        type: string
    type: object
  actalink.UserOperation:
    properties:
      callData:
        type: string
      callGasLimit:
        type: string
      initCode:
        type: string
      maxFeePerGas:
        type: string
      maxPriorityFeePerGas:
        type: string
      nonce:
        type: string
      paymasterAndData:
        type: string
      preVerificationGas:
        type: string
      sender:
        type: string
      signature:
        type: string
      verificationGasLimit:
        type: string
    type: object
  handlers.CreateCustomerRequest:
    properties:
      currency:
        type: string
      description:
        type: string
      email:
        type: string
      metadata:
        additionalProperties: true
        type: object
      name:
        type: string
      tax_exempt:
        type: string
      tax_ids:
        additionalProperties: true
        type: object
    required:
    - email
    type: object
  handlers.CreateSubscriptionResponse:
    properties:
      message:
        type: string
    type: object
  handlers.CreateUserRequest:
    properties:
      auth0_id:
        type: string
      email:
        type: string
      metadata:
        additionalProperties: true
        type: object
      name:
        type: string
      picture_url:
        type: string
      role:
        enum:
        - admin
        - account
        type: string
    required:
    - auth0_id
    - email
    - role
    type: object
  handlers.CustomerResponse:
    properties:
      account_id:
        type: string
      account_name:
        type: string
      balance:
        type: integer
      business_name:
        type: string
      created:
        type: integer
      currency:
        type: string
      default_source:
        type: string
      description:
        type: string
      email:
        type: string
      id:
        type: string
      invoice_prefix:
        type: string
      livemode:
        type: boolean
      metadata:
        additionalProperties: true
        type: object
      name:
        type: string
      next_invoice_number:
        type: integer
      object:
        type: string
      tax_exempt:
        type: string
      tax_ids:
        additionalProperties: true
        type: object
    type: object
  handlers.DeleteSubscriptionRequest:
    properties:
      subscriptionId:
        type: string
    required:
    - subscriptionId
    type: object
  handlers.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  handlers.GetNetworksResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/actalink.Network'
        type: array
    type: object
  handlers.GetNonceResponse:
    properties:
      nonce:
        type: string
    type: object
  handlers.GetSubscribersResponse:
    properties:
      data:
        $ref: '#/definitions/actalink.SubscribersData'
    type: object
  handlers.GetSubscriptionsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/actalink.Subscription'
        type: array
    type: object
  handlers.GetTokensResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/actalink.Token'
        type: array
    type: object
  handlers.HealthResponse:
    properties:
      status:
        type: string
    type: object
  handlers.OperationsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/actalink.Operation'
        type: array
    type: object
  handlers.RegisterOrLoginUserResponse:
    properties:
      message:
        type: string
    type: object
  handlers.SubscriptionRequest:
    properties:
      linktree:
        type: string
      plans:
        items:
          $ref: '#/definitions/actalink.Plan'
        type: array
      receivers:
        items:
          $ref: '#/definitions/actalink.Receiver'
        type: array
      title:
        type: string
      tokens:
        items:
          type: string
        type: array
      trialDays:
        type: integer
    type: object
  handlers.UpdateCustomerRequest:
    properties:
      currency:
        type: string
      description:
        type: string
      email:
        type: string
      metadata:
        additionalProperties: true
        type: object
      name:
        type: string
      tax_exempt:
        type: string
      tax_ids:
        additionalProperties: true
        type: object
    type: object
  handlers.UpdateUserRequest:
    properties:
      email:
        type: string
      metadata:
        additionalProperties: true
        type: object
      name:
        type: string
      picture_url:
        type: string
      role:
        enum:
        - admin
        - account
        type: string
    type: object
  handlers.UserAvailabilityResponse:
    properties:
      exists:
        type: boolean
    type: object
  handlers.UserLoginRegisterRequest:
    properties:
      address:
        type: string
      message:
        type: string
      nonce:
        type: string
      signature:
        type: string
    type: object
  handlers.UserResponse:
    properties:
      auth0_id:
        type: string
      created:
        type: integer
      email:
        type: string
      id:
        type: string
      metadata:
        additionalProperties: true
        type: object
      name:
        type: string
      object:
        type: string
      picture_url:
        type: string
      role:
        type: string
      updated:
        type: integer
    type: object
host: localhost:8000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API Server for Cyphera application
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Cyphera API
  version: "1.0"
paths:
  /customers:
    get:
      consumes:
      - application/json
      description: Returns a list of your customers. The customers are returned sorted
        by creation date, with the most recent customers appearing first.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.CustomerResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List all customers
      tags:
      - customers
    post:
      consumes:
      - application/json
      description: Creates a new customer object
      parameters:
      - description: Customer creation data
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateCustomerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.CustomerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a customer
      tags:
      - customers
  /customers/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a customer
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete a customer
      tags:
      - customers
    get:
      consumes:
      - application/json
      description: Retrieves the details of an existing customer
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.CustomerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get a customer
      tags:
      - customers
    put:
      consumes:
      - application/json
      description: Updates the specified customer by setting the values of the parameters
        passed
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      - description: Customer update data
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateCustomerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.CustomerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update a customer
      tags:
      - customers
  /health:
    get:
      consumes:
      - application/json
      description: Checks if the server is running
      produces:
      - application/json
      responses:
        "200":
          description: Returns health status
          schema:
            $ref: '#/definitions/handlers.HealthResponse'
      summary: Health check
      tags:
      - health
  /isuseravailable:
    get:
      consumes:
      - application/json
      description: Verifies if a username is available for registration
      parameters:
      - description: Address
        example: '"0x1234567890abcdef"'
        in: query
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.UserAvailabilityResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Check username availability
      tags:
      - users
  /networks:
    get:
      consumes:
      - application/json
      description: Retrieves all supported blockchain networks
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.GetNetworksResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: List networks
      tags:
      - networks
  /nonce:
    get:
      consumes:
      - application/json
      description: Retrieves a nonce for wallet-based authentication
      produces:
      - application/json
      responses:
        "200":
          description: Returns nonce
          schema:
            $ref: '#/definitions/handlers.GetNonceResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get authentication nonce
      tags:
      - authentication
  /operations:
    get:
      consumes:
      - application/json
      description: Retrieves all operations for authenticated user
      parameters:
      - description: Smart Wallet Address
        example: '"0x1234567890abcdef"'
        in: query
        name: swaddress
        required: true
        type: string
      - description: Subscription ID
        example: '"1234567890"'
        in: query
        name: subscriptionId
        required: true
        type: string
      - description: Status
        in: query
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.OperationsResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: List operations
  /subscribers:
    get:
      consumes:
      - application/json
      description: Retrieves all subscribers for authenticated user
      parameters:
      - description: Subscription ID
        example: '"1234567890"'
        in: query
        name: subscriptionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.GetSubscribersResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: List subscribers
      tags:
      - subscribers
  /subscriptions:
    delete:
      consumes:
      - application/json
      description: Deletes a subscription plan
      parameters:
      - description: Subscription details
        in: body
        name: subscription
        required: true
        schema:
          $ref: '#/definitions/handlers.DeleteSubscriptionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Delete a subscription
      tags:
      - subscriptions
    get:
      consumes:
      - application/json
      description: Retrieves all available subscription plans
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.GetSubscriptionsResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: List all subscriptions
      tags:
      - subscriptions
    post:
      consumes:
      - application/json
      description: Creates a new subscription plan
      parameters:
      - description: Subscription details
        in: body
        name: subscription
        required: true
        schema:
          $ref: '#/definitions/handlers.SubscriptionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.CreateSubscriptionResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Create a new subscription
      tags:
      - subscriptions
  /tokens:
    get:
      consumes:
      - application/json
      description: Retrieves all available tokens
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.GetTokensResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: List tokens
      tags:
      - tokens
  /user/login:
    post:
      consumes:
      - application/json
      description: Authenticates user using wallet signature and returns JWT token
      parameters:
      - description: User login payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.UserLoginRegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.RegisterOrLoginUserResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Authenticate user
      tags:
      - users
  /user/register:
    post:
      consumes:
      - application/json
      description: Creates a new user account with wallet authentication
      parameters:
      - description: User registration payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.UserLoginRegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.RegisterOrLoginUserResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Register new user
      tags:
      - users
  /users:
    get:
      consumes:
      - application/json
      description: Returns a list of users. Only accessible by admins.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.UserResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Creates a new user object. Only accessible by admins.
      parameters:
      - description: User creation data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a user. Only accessible by admins.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete a user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Retrieves the details of an existing user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get a user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Updates the specified user by setting the values of the parameters
        passed
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User update data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update a user
      tags:
      - users
  /users/me:
    get:
      consumes:
      - application/json
      description: Retrieves the details of the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get current user
      tags:
      - users
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
