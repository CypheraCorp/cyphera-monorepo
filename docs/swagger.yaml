basePath: /api/v1
definitions:
  actalink.Network:
    properties:
      chain_id:
        type: integer
      currency:
        type: string
      name:
        type: string
      type:
        type: string
    type: object
  actalink.Operation:
    properties:
      entryPoint:
        type: string
      executionTime:
        type: integer
      paymentType:
        type: string
      paymentTypeParams:
        $ref: '#/definitions/actalink.PaymentTypeParams'
      status:
        type: string
      transactionHash:
        type: string
      userOp:
        $ref: '#/definitions/actalink.UserOperation'
      userOpHash:
        type: string
    type: object
  actalink.PaymentLink:
    properties:
      createdAt:
        type: string
      id:
        type: string
      subscriptionId:
        type: string
      title:
        type: string
      validTill:
        type: string
    type: object
  actalink.PaymentTypeParams:
    properties:
      paylinkUrl:
        type: string
      subscriptionId:
        type: string
    type: object
  actalink.Plan:
    properties:
      frequency:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        type: number
      subscriptionId:
        type: string
      volume:
        type: integer
    type: object
  actalink.Receiver:
    properties:
      address:
        type: string
      networkId:
        type: integer
      receiverId:
        type: string
      subscriptionId:
        type: string
    type: object
  actalink.Subscriber:
    properties:
      eoaaddress:
        type: string
      plan:
        $ref: '#/definitions/actalink.Plan'
      planId:
        type: string
      status:
        type: string
      subscribedAt:
        type: string
      subscriptionId:
        type: string
      swaddress:
        type: string
    type: object
  actalink.SubscribersData:
    properties:
      subscribers:
        items:
          $ref: '#/definitions/actalink.Subscriber'
        type: array
      subscriptionId:
        type: string
      title:
        type: string
      userid:
        type: string
    type: object
  actalink.Subscription:
    properties:
      createdAt:
        type: string
      id:
        type: string
      linktree:
        type: string
      paymentlink:
        $ref: '#/definitions/actalink.PaymentLink'
      plans:
        items:
          $ref: '#/definitions/actalink.Plan'
        type: array
      receivers:
        items:
          $ref: '#/definitions/actalink.Receiver'
        type: array
      status:
        type: string
      title:
        type: string
      tokens:
        items:
          $ref: '#/definitions/actalink.Token'
        type: array
      trialDays:
        type: integer
      userId:
        type: string
    type: object
  actalink.Token:
    properties:
      address:
        type: string
      chainId:
        type: integer
      coingeckoId:
        type: string
      decimals:
        type: integer
      id:
        type: integer
      logoURI:
        type: string
      name:
        type: string
      symbol:
        type: string
    type: object
  actalink.UserOperation:
    properties:
      callData:
        type: string
      callGasLimit:
        type: string
      initCode:
        type: string
      maxFeePerGas:
        type: string
      maxPriorityFeePerGas:
        type: string
      nonce:
        type: string
      paymasterAndData:
        type: string
      preVerificationGas:
        type: string
      sender:
        type: string
      signature:
        type: string
      verificationGasLimit:
        type: string
    type: object
  handlers.APIKeyResponse:
    properties:
      access_level:
        type: string
      created:
        type: integer
      expires_at:
        type: integer
      id:
        type: string
      last_used_at:
        type: integer
      metadata:
        additionalProperties: true
        type: object
      name:
        type: string
      object:
        type: string
      updated:
        type: integer
    type: object
  handlers.AccountResponse:
    properties:
      account_type:
        type: string
      business_name:
        type: string
      business_type:
        type: string
      created:
        type: integer
      finished_onboarding:
        type: boolean
      id:
        type: string
      metadata:
        additionalProperties: true
        type: object
      name:
        type: string
      object:
        type: string
      support_email:
        type: string
      support_phone:
        type: string
      updated:
        type: integer
      website_url:
        type: string
    type: object
  handlers.CreateAPIKeyRequest:
    properties:
      access_level:
        enum:
        - read
        - write
        - admin
        type: string
      description:
        type: string
      expires_at:
        type: string
      metadata:
        additionalProperties: true
        type: object
      name:
        type: string
    required:
    - access_level
    - description
    - name
    type: object
  handlers.CreateAccountRequest:
    properties:
      account_type:
        enum:
        - admin
        - merchant
        type: string
      business_name:
        type: string
      business_type:
        type: string
      description:
        type: string
      finished_onboarding:
        type: boolean
      metadata:
        additionalProperties: true
        type: object
      name:
        type: string
      support_email:
        type: string
      support_phone:
        type: string
      website_url:
        type: string
    required:
    - account_type
    - name
    type: object
  handlers.CreateCustomerRequest:
    properties:
      currency:
        type: string
      description:
        type: string
      email:
        type: string
      external_id:
        type: string
      metadata:
        additionalProperties: true
        type: object
      name:
        type: string
      phone:
        type: string
      tax_exempt:
        type: boolean
      tax_ids:
        additionalProperties: true
        type: object
    required:
    - email
    type: object
  handlers.CreateSubscriptionResponse:
    properties:
      message:
        type: string
    type: object
  handlers.CreateUserRequest:
    properties:
      account_id:
        type: string
      auth0_id:
        type: string
      display_name:
        type: string
      email:
        type: string
      email_verified:
        type: boolean
      first_name:
        type: string
      is_account_owner:
        type: boolean
      last_name:
        type: string
      locale:
        type: string
      metadata:
        additionalProperties: true
        type: object
      phone:
        type: string
      picture_url:
        type: string
      role:
        enum:
        - admin
        - support
        - developer
        type: string
      timezone:
        type: string
    required:
    - account_id
    - auth0_id
    - email
    - role
    type: object
  handlers.CreateWorkspaceRequest:
    description: Creates a new workspace
    properties:
      account_id:
        type: string
      business_name:
        type: string
      business_type:
        type: string
      description:
        type: string
      livemode:
        type: boolean
      metadata:
        additionalProperties: true
        type: object
      name:
        type: string
      support_email:
        type: string
      support_phone:
        type: string
      website_url:
        type: string
    required:
    - business_name
    - name
    type: object
  handlers.CustomerResponse:
    properties:
      balance:
        type: integer
      business_name:
        type: string
      created:
        type: integer
      currency:
        type: string
      default_source:
        type: string
      description:
        type: string
      email:
        type: string
      external_id:
        type: string
      id:
        type: string
      invoice_prefix:
        type: string
      livemode:
        type: boolean
      metadata:
        additionalProperties: true
        type: object
      name:
        type: string
      next_invoice_number:
        type: integer
      object:
        type: string
      phone:
        type: string
      tax_exempt:
        type: boolean
      tax_ids:
        additionalProperties: true
        type: object
      workspace_id:
        type: string
      workspace_name:
        type: string
    type: object
  handlers.DeleteSubscriptionRequest:
    properties:
      subscriptionId:
        type: string
    required:
    - subscriptionId
    type: object
  handlers.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  handlers.FullAccountResponse:
    properties:
      account:
        $ref: '#/definitions/handlers.AccountResponse'
      user:
        $ref: '#/definitions/handlers.UserResponse'
      workspaces:
        items:
          $ref: '#/definitions/handlers.WorkspaceResponse'
        type: array
    type: object
  handlers.GetNetworksResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/actalink.Network'
        type: array
    type: object
  handlers.GetNonceResponse:
    properties:
      nonce:
        type: string
    type: object
  handlers.GetSubscribersResponse:
    properties:
      data:
        $ref: '#/definitions/actalink.SubscribersData'
    type: object
  handlers.GetSubscriptionsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/actalink.Subscription'
        type: array
    type: object
  handlers.GetTokensResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/actalink.Token'
        type: array
    type: object
  handlers.HealthResponse:
    properties:
      status:
        type: string
    type: object
  handlers.ListCustomersResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/handlers.CustomerResponse'
        type: array
      has_more:
        type: boolean
      object:
        type: string
      total:
        type: integer
    type: object
  handlers.OperationsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/actalink.Operation'
        type: array
    type: object
  handlers.RegisterOrLoginUserResponse:
    properties:
      message:
        type: string
    type: object
  handlers.SubscriptionRequest:
    properties:
      linktree:
        type: string
      plans:
        items:
          $ref: '#/definitions/actalink.Plan'
        type: array
      receivers:
        items:
          $ref: '#/definitions/actalink.Receiver'
        type: array
      title:
        type: string
      tokens:
        items:
          type: string
        type: array
      trialDays:
        type: integer
    type: object
  handlers.UpdateAPIKeyRequest:
    properties:
      access_level:
        enum:
        - read
        - write
        - admin
        type: string
      description:
        type: string
      expires_at:
        type: string
      metadata:
        additionalProperties: true
        type: object
      name:
        type: string
    type: object
  handlers.UpdateAccountRequest:
    properties:
      account_type:
        enum:
        - admin
        - merchant
        type: string
      business_name:
        type: string
      business_type:
        type: string
      description:
        type: string
      finished_onboarding:
        type: boolean
      metadata:
        additionalProperties: true
        type: object
      name:
        type: string
      support_email:
        type: string
      support_phone:
        type: string
      website_url:
        type: string
    type: object
  handlers.UpdateCustomerRequest:
    properties:
      currency:
        type: string
      description:
        type: string
      email:
        type: string
      external_id:
        type: string
      metadata:
        additionalProperties: true
        type: object
      name:
        type: string
      phone:
        type: string
      tax_exempt:
        type: boolean
      tax_ids:
        additionalProperties: true
        type: object
    type: object
  handlers.UpdateUserRequest:
    properties:
      display_name:
        type: string
      email:
        type: string
      email_verified:
        type: boolean
      first_name:
        type: string
      last_name:
        type: string
      locale:
        type: string
      metadata:
        additionalProperties: true
        type: object
      phone:
        type: string
      picture_url:
        type: string
      status:
        type: string
      timezone:
        type: string
      two_factor_enabled:
        type: boolean
    type: object
  handlers.UpdateWorkspaceRequest:
    description: Updates an existing workspace
    properties:
      account_id:
        type: string
      business_name:
        type: string
      business_type:
        type: string
      description:
        type: string
      livemode:
        type: boolean
      metadata:
        additionalProperties: true
        type: object
      name:
        type: string
      support_email:
        type: string
      support_phone:
        type: string
      website_url:
        type: string
    type: object
  handlers.UserAccountResponse:
    properties:
      account_name:
        type: string
      auth0_id:
        type: string
      created:
        type: integer
      display_name:
        type: string
      email:
        type: string
      email_verified:
        type: boolean
      first_name:
        type: string
      id:
        type: string
      is_owner:
        type: boolean
      last_name:
        type: string
      locale:
        type: string
      metadata:
        additionalProperties: true
        type: object
      object:
        type: string
      phone:
        type: string
      picture_url:
        type: string
      role:
        type: string
      status:
        type: string
      timezone:
        type: string
      two_factor_enabled:
        type: boolean
      updated:
        type: integer
    type: object
  handlers.UserAvailabilityResponse:
    properties:
      exists:
        type: boolean
    type: object
  handlers.UserLoginRegisterRequest:
    properties:
      address:
        type: string
      message:
        type: string
      nonce:
        type: string
      signature:
        type: string
    type: object
  handlers.UserResponse:
    properties:
      auth0_id:
        type: string
      created:
        type: integer
      display_name:
        type: string
      email:
        type: string
      email_verified:
        type: boolean
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      locale:
        type: string
      metadata:
        additionalProperties: true
        type: object
      object:
        type: string
      phone:
        type: string
      picture_url:
        type: string
      status:
        type: string
      timezone:
        type: string
      two_factor_enabled:
        type: boolean
      updated:
        type: integer
    type: object
  handlers.WorkspaceResponse:
    description: Workspace response
    properties:
      account_id:
        type: string
      business_name:
        type: string
      business_type:
        type: string
      created:
        type: integer
      description:
        type: string
      id:
        type: string
      livemode:
        type: boolean
      metadata:
        additionalProperties: true
        type: object
      name:
        type: string
      object:
        type: string
      support_email:
        type: string
      support_phone:
        type: string
      updated:
        type: integer
      website_url:
        type: string
    type: object
host: localhost:8000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API Server for Cyphera application
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Cyphera API
  version: "1.0"
paths:
  /accounts:
    get:
      consumes:
      - application/json
      description: Returns a list of accounts. Only accessible by admins.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.AccountResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List accounts
      tags:
      - accounts
    post:
      consumes:
      - application/json
      description: Creates a new account with a default workspace. Only accessible
        by admins.
      parameters:
      - description: Account creation data
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateAccountRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.AccountResponse'
        "400":
          description: Invalid request body or metadata format
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Not authenticated
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Not authorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create an account
      tags:
      - accounts
  /accounts/:id:
    put:
      consumes:
      - application/json
      description: Updates the specified account by setting the values of the parameters
        passed
      parameters:
      - description: Account update data
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateAccountRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.AccountResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update an account
      tags:
      - accounts
  /accounts/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves the details of an existing account
      parameters:
      - description: Account ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.AccountResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get an account
      tags:
      - accounts
  /accounts/me:
    put:
      consumes:
      - application/json
      description: Updates the currently authenticated user's account details
      parameters:
      - description: Account update data
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateAccountRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.FullAccountResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update current account
      tags:
      - accounts
  /accounts/me/details:
    get:
      consumes:
      - application/json
      description: Retrieves the details of the currently authenticated user's account
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.FullAccountResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get current account
      tags:
      - accounts
  /accounts/signin:
    post:
      consumes:
      - application/json
      description: Creates a new account with user and workspace, or returns existing
        account details
      parameters:
      - description: Account creation data
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateAccountRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Existing account details
          schema:
            $ref: '#/definitions/handlers.FullAccountResponse'
        "201":
          description: Newly created account
          schema:
            $ref: '#/definitions/handlers.FullAccountResponse'
        "400":
          description: Invalid request body, metadata format, or missing required
            fields
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Register or sign in to an account
      tags:
      - accounts
  /admin/accounts/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes an account. Only accessible by admins.
      parameters:
      - description: Account ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete an account
      tags:
      - accounts
  /admin/api-keys:
    get:
      consumes:
      - application/json
      description: Retrieves all API keys across all workspaces (admin only)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.APIKeyResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get all API keys
      tags:
      - api-keys
  /admin/api-keys/expired:
    get:
      consumes:
      - application/json
      description: Retrieves all expired API keys
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.APIKeyResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get expired API keys
      tags:
      - api-keys
  /admin/workspaces/{id}/hard:
    delete:
      consumes:
      - application/json
      description: Permanently deletes a workspace (admin only)
      parameters:
      - description: Workspace ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Hard delete workspace
      tags:
      - workspaces
  /admin/workspaces/all:
    get:
      consumes:
      - application/json
      description: Retrieves all workspaces including deleted ones (admin only)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.WorkspaceResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get all workspaces
      tags:
      - workspaces
  /api-keys:
    get:
      consumes:
      - application/json
      description: Retrieves all API keys for the current workspace
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.APIKeyResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List API keys
      tags:
      - api-keys
    post:
      consumes:
      - application/json
      description: Creates a new API key for the current workspace
      parameters:
      - description: API key creation data
        in: body
        name: key
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateAPIKeyRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.APIKeyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create API key
      tags:
      - api-keys
  /api-keys/{id}:
    delete:
      consumes:
      - application/json
      description: Soft deletes an API key
      parameters:
      - description: API Key ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete API key
      tags:
      - api-keys
    get:
      consumes:
      - application/json
      description: Retrieves a specific API key by its ID
      parameters:
      - description: API Key ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.APIKeyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get an API key
      tags:
      - api-keys
    put:
      consumes:
      - application/json
      description: Updates an existing API key
      parameters:
      - description: API Key ID
        in: path
        name: id
        required: true
        type: string
      - description: API key update data
        in: body
        name: key
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateAPIKeyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.APIKeyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update API key
      tags:
      - api-keys
  /api-keys/count:
    get:
      consumes:
      - application/json
      description: Gets the count of active API keys for a workspace
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: integer
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get active API key count
      tags:
      - api-keys
  /customers:
    get:
      consumes:
      - application/json
      description: Retrieves paginated customers for the current workspace
      parameters:
      - description: Number of customers to return (default 10, max 100)
        in: query
        name: limit
        type: integer
      - description: Number of customers to skip (default 0)
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ListCustomersResponse'
        "400":
          description: Invalid workspace ID format or pagination parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized access to workspace
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List customers
      tags:
      - customers
    post:
      consumes:
      - application/json
      description: Creates a new customer in the current workspace
      parameters:
      - description: Customer creation data
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateCustomerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.CustomerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create customer
      tags:
      - customers
  /customers/{id}:
    delete:
      consumes:
      - application/json
      description: Soft deletes a customer
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete customer
      tags:
      - customers
    get:
      consumes:
      - application/json
      description: Retrieves a specific customer by its ID
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.CustomerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get a customer
      tags:
      - customers
    put:
      consumes:
      - application/json
      description: Updates an existing customer
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      - description: Customer update data
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateCustomerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.CustomerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update customer
      tags:
      - customers
  /health:
    get:
      consumes:
      - application/json
      description: Checks if the server is running
      produces:
      - application/json
      responses:
        "200":
          description: Returns health status
          schema:
            $ref: '#/definitions/handlers.HealthResponse'
      summary: Health check
      tags:
      - health
  /isuseravailable:
    get:
      consumes:
      - application/json
      description: Verifies if a username is available for registration
      parameters:
      - description: Address
        example: '"0x1234567890abcdef"'
        in: query
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.UserAvailabilityResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Check username availability
      tags:
      - Actalink
  /networks:
    get:
      consumes:
      - application/json
      description: Retrieves all supported blockchain networks
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.GetNetworksResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: List networks
      tags:
      - Actalink
  /nonce:
    get:
      consumes:
      - application/json
      description: Retrieves a nonce for wallet-based authentication
      produces:
      - application/json
      responses:
        "200":
          description: Returns nonce
          schema:
            $ref: '#/definitions/handlers.GetNonceResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get authentication nonce
      tags:
      - Actalink
  /operations:
    get:
      consumes:
      - application/json
      description: Retrieves all operations for authenticated user
      parameters:
      - description: Smart Wallet Address
        example: '"0x1234567890abcdef"'
        in: query
        name: swaddress
        required: true
        type: string
      - description: Subscription ID
        example: '"1234567890"'
        in: query
        name: subscriptionId
        required: true
        type: string
      - description: Status
        in: query
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.OperationsResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: List operations
      tags:
      - Actalink
  /subscribers:
    get:
      consumes:
      - application/json
      description: Retrieves all subscribers for authenticated user
      parameters:
      - description: Subscription ID
        example: '"1234567890"'
        in: query
        name: subscriptionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.GetSubscribersResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: List subscribers
      tags:
      - Actalink
  /subscriptions:
    delete:
      consumes:
      - application/json
      description: Deletes a subscription plan
      parameters:
      - description: Subscription details
        in: body
        name: subscription
        required: true
        schema:
          $ref: '#/definitions/handlers.DeleteSubscriptionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Delete a subscription
      tags:
      - Actalink
    get:
      consumes:
      - application/json
      description: Retrieves all available subscription plans
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.GetSubscriptionsResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: List all subscriptions
      tags:
      - Actalink
    post:
      consumes:
      - application/json
      description: Creates a new subscription plan
      parameters:
      - description: Subscription details
        in: body
        name: subscription
        required: true
        schema:
          $ref: '#/definitions/handlers.SubscriptionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.CreateSubscriptionResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Create a new subscription
      tags:
      - Actalink
  /tokens:
    get:
      consumes:
      - application/json
      description: Retrieves all available tokens
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.GetTokensResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: List tokens
      tags:
      - Actalink
  /user/login:
    post:
      consumes:
      - application/json
      description: Authenticates user using wallet signature and returns JWT token
      parameters:
      - description: User login payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.UserLoginRegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.RegisterOrLoginUserResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Authenticate user
      tags:
      - Actalink
  /user/register:
    post:
      consumes:
      - application/json
      description: Creates a new user workspace with wallet authentication
      parameters:
      - description: User registration payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.UserLoginRegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.RegisterOrLoginUserResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Register new user
      tags:
      - Actalink
  /users:
    post:
      consumes:
      - application/json
      description: Creates a new user
      parameters:
      - description: User creation data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Soft deletes a user from the system
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete a user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Retrieves the details of an existing user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get a user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Updates an existing user's information
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User update data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update a user
      tags:
      - users
  /users/{id}/account:
    get:
      consumes:
      - application/json
      description: Gets the account details associated with a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.UserAccountResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user's account
      tags:
      - users
  /users/auth0/{auth0_id}:
    get:
      consumes:
      - application/json
      description: Retrieves a user's details using their Auth0 ID
      parameters:
      - description: Auth0 ID
        in: path
        name: auth0_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user by Auth0 ID
      tags:
      - users
  /users/me:
    get:
      consumes:
      - application/json
      description: Retrieves the details of the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get current user
      tags:
      - users
  /workspaces:
    get:
      consumes:
      - application/json
      description: Retrieves all non-deleted workspaces
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.WorkspaceResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List workspaces
      tags:
      - workspaces
    post:
      consumes:
      - application/json
      description: Creates a new workspace
      parameters:
      - description: Workspace creation data
        in: body
        name: workspace
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateWorkspaceRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.WorkspaceResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create workspace
      tags:
      - workspaces
  /workspaces/{id}:
    delete:
      consumes:
      - application/json
      description: Soft deletes a workspace
      parameters:
      - description: Workspace ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete workspace
      tags:
      - workspaces
    get:
      consumes:
      - application/json
      description: Retrieves a specific workspace by its ID
      parameters:
      - description: Workspace ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.WorkspaceResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get a workspace
      tags:
      - workspaces
    put:
      consumes:
      - application/json
      description: Updates an existing workspace
      parameters:
      - description: Workspace ID
        in: path
        name: id
        required: true
        type: string
      - description: Workspace update data
        in: body
        name: workspace
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateWorkspaceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.WorkspaceResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update workspace
      tags:
      - workspaces
  /workspaces/{id}/customers:
    get:
      consumes:
      - application/json
      description: Retrieves all customers for a workspace
      parameters:
      - description: Workspace ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.CustomerResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List workspace customers
      tags:
      - workspaces
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
