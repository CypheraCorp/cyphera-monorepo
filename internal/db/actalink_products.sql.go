// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: actalink_products.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createActalinkProduct = `-- name: CreateActalinkProduct :one
INSERT INTO actalink_products (product_id, product_token_id, actalink_payment_link_id, actalink_subscription_id)
VALUES ($1, $2, $3, $4)
RETURNING id, product_id, product_token_id, actalink_payment_link_id, actalink_subscription_id, created_at, updated_at, deleted_at
`

type CreateActalinkProductParams struct {
	ProductID              uuid.UUID `json:"product_id"`
	ProductTokenID         uuid.UUID `json:"product_token_id"`
	ActalinkPaymentLinkID  string    `json:"actalink_payment_link_id"`
	ActalinkSubscriptionID string    `json:"actalink_subscription_id"`
}

// Create a new actalink product
func (q *Queries) CreateActalinkProduct(ctx context.Context, arg CreateActalinkProductParams) (ActalinkProduct, error) {
	row := q.db.QueryRow(ctx, createActalinkProduct,
		arg.ProductID,
		arg.ProductTokenID,
		arg.ActalinkPaymentLinkID,
		arg.ActalinkSubscriptionID,
	)
	var i ActalinkProduct
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.ProductTokenID,
		&i.ActalinkPaymentLinkID,
		&i.ActalinkSubscriptionID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getActalinkProduct = `-- name: GetActalinkProduct :one
SELECT id, product_id, product_token_id, actalink_payment_link_id, actalink_subscription_id, created_at, updated_at, deleted_at FROM actalink_products
WHERE id = $1 AND deleted_at IS NULL
`

// Get a single actalink product by ID
func (q *Queries) GetActalinkProduct(ctx context.Context, id uuid.UUID) (ActalinkProduct, error) {
	row := q.db.QueryRow(ctx, getActalinkProduct, id)
	var i ActalinkProduct
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.ProductTokenID,
		&i.ActalinkPaymentLinkID,
		&i.ActalinkSubscriptionID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getActalinkProductByProductTokenID = `-- name: GetActalinkProductByProductTokenID :one
SELECT id, product_id, product_token_id, actalink_payment_link_id, actalink_subscription_id, created_at, updated_at, deleted_at FROM actalink_products
WHERE product_token_id = $1 AND deleted_at IS NULL
`

// Get a single actalink product by product_token_id (unique due to table constraint)
func (q *Queries) GetActalinkProductByProductTokenID(ctx context.Context, productTokenID uuid.UUID) (ActalinkProduct, error) {
	row := q.db.QueryRow(ctx, getActalinkProductByProductTokenID, productTokenID)
	var i ActalinkProduct
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.ProductTokenID,
		&i.ActalinkPaymentLinkID,
		&i.ActalinkSubscriptionID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getActalinkProductsByProductID = `-- name: GetActalinkProductsByProductID :many
SELECT id, product_id, product_token_id, actalink_payment_link_id, actalink_subscription_id, created_at, updated_at, deleted_at FROM actalink_products
WHERE product_id = $1 AND deleted_at IS NULL
ORDER BY created_at DESC
`

// Get all actalink products for a given product_id
func (q *Queries) GetActalinkProductsByProductID(ctx context.Context, productID uuid.UUID) ([]ActalinkProduct, error) {
	rows, err := q.db.Query(ctx, getActalinkProductsByProductID, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ActalinkProduct{}
	for rows.Next() {
		var i ActalinkProduct
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.ProductTokenID,
			&i.ActalinkPaymentLinkID,
			&i.ActalinkSubscriptionID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listActalinkProducts = `-- name: ListActalinkProducts :many
SELECT id, product_id, product_token_id, actalink_payment_link_id, actalink_subscription_id, created_at, updated_at, deleted_at FROM actalink_products
WHERE deleted_at IS NULL
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListActalinkProductsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

// List all actalink products with optional pagination
func (q *Queries) ListActalinkProducts(ctx context.Context, arg ListActalinkProductsParams) ([]ActalinkProduct, error) {
	rows, err := q.db.Query(ctx, listActalinkProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ActalinkProduct{}
	for rows.Next() {
		var i ActalinkProduct
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.ProductTokenID,
			&i.ActalinkPaymentLinkID,
			&i.ActalinkSubscriptionID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
