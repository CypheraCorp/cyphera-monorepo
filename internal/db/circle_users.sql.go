// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: circle_users.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createCircleUser = `-- name: CreateCircleUser :one
INSERT INTO circle_users (
    id,
    workspace_id,
    circle_create_date,
    pin_status,
    status,
    security_question_status
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, workspace_id, circle_create_date, pin_status, status, security_question_status, created_at, updated_at
`

type CreateCircleUserParams struct {
	ID                     uuid.UUID          `json:"id"`
	WorkspaceID            uuid.UUID          `json:"workspace_id"`
	CircleCreateDate       pgtype.Timestamptz `json:"circle_create_date"`
	PinStatus              string             `json:"pin_status"`
	Status                 string             `json:"status"`
	SecurityQuestionStatus string             `json:"security_question_status"`
}

func (q *Queries) CreateCircleUser(ctx context.Context, arg CreateCircleUserParams) (CircleUser, error) {
	row := q.db.QueryRow(ctx, createCircleUser,
		arg.ID,
		arg.WorkspaceID,
		arg.CircleCreateDate,
		arg.PinStatus,
		arg.Status,
		arg.SecurityQuestionStatus,
	)
	var i CircleUser
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.CircleCreateDate,
		&i.PinStatus,
		&i.Status,
		&i.SecurityQuestionStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCircleUser = `-- name: DeleteCircleUser :exec
DELETE FROM circle_users
WHERE id = $1
`

func (q *Queries) DeleteCircleUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCircleUser, id)
	return err
}

const deleteCircleUserByWorkspaceID = `-- name: DeleteCircleUserByWorkspaceID :exec
DELETE FROM circle_users
WHERE workspace_id = $1
`

func (q *Queries) DeleteCircleUserByWorkspaceID(ctx context.Context, workspaceID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCircleUserByWorkspaceID, workspaceID)
	return err
}

const getCircleUserByID = `-- name: GetCircleUserByID :one
SELECT id, workspace_id, circle_create_date, pin_status, status, security_question_status, created_at, updated_at FROM circle_users
WHERE id = $1
`

func (q *Queries) GetCircleUserByID(ctx context.Context, id uuid.UUID) (CircleUser, error) {
	row := q.db.QueryRow(ctx, getCircleUserByID, id)
	var i CircleUser
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.CircleCreateDate,
		&i.PinStatus,
		&i.Status,
		&i.SecurityQuestionStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCircleUserByWorkspaceID = `-- name: GetCircleUserByWorkspaceID :one
SELECT id, workspace_id, circle_create_date, pin_status, status, security_question_status, created_at, updated_at FROM circle_users
WHERE workspace_id = $1
`

func (q *Queries) GetCircleUserByWorkspaceID(ctx context.Context, workspaceID uuid.UUID) (CircleUser, error) {
	row := q.db.QueryRow(ctx, getCircleUserByWorkspaceID, workspaceID)
	var i CircleUser
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.CircleCreateDate,
		&i.PinStatus,
		&i.Status,
		&i.SecurityQuestionStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCircleUserWithWallets = `-- name: GetCircleUserWithWallets :one
SELECT 
    cu.id, cu.workspace_id, cu.circle_create_date, cu.pin_status, cu.status, cu.security_question_status, cu.created_at, cu.updated_at,
    COUNT(cw.id) as wallet_count
FROM 
    circle_users cu
LEFT JOIN 
    circle_wallets cw ON cu.id = cw.circle_user_id
WHERE 
    cu.id = $1
GROUP BY 
    cu.id
`

type GetCircleUserWithWalletsRow struct {
	ID                     uuid.UUID          `json:"id"`
	WorkspaceID            uuid.UUID          `json:"workspace_id"`
	CircleCreateDate       pgtype.Timestamptz `json:"circle_create_date"`
	PinStatus              string             `json:"pin_status"`
	Status                 string             `json:"status"`
	SecurityQuestionStatus string             `json:"security_question_status"`
	CreatedAt              pgtype.Timestamptz `json:"created_at"`
	UpdatedAt              pgtype.Timestamptz `json:"updated_at"`
	WalletCount            int64              `json:"wallet_count"`
}

func (q *Queries) GetCircleUserWithWallets(ctx context.Context, id uuid.UUID) (GetCircleUserWithWalletsRow, error) {
	row := q.db.QueryRow(ctx, getCircleUserWithWallets, id)
	var i GetCircleUserWithWalletsRow
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.CircleCreateDate,
		&i.PinStatus,
		&i.Status,
		&i.SecurityQuestionStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.WalletCount,
	)
	return i, err
}

const getCircleUserWithWalletsByWorkspaceID = `-- name: GetCircleUserWithWalletsByWorkspaceID :one
SELECT 
    cu.id, cu.workspace_id, cu.circle_create_date, cu.pin_status, cu.status, cu.security_question_status, cu.created_at, cu.updated_at,
    COUNT(cw.id) as wallet_count
FROM 
    circle_users cu
LEFT JOIN 
    circle_wallets cw ON cu.id = cw.circle_user_id
WHERE 
    cu.workspace_id = $1
GROUP BY 
    cu.id
`

type GetCircleUserWithWalletsByWorkspaceIDRow struct {
	ID                     uuid.UUID          `json:"id"`
	WorkspaceID            uuid.UUID          `json:"workspace_id"`
	CircleCreateDate       pgtype.Timestamptz `json:"circle_create_date"`
	PinStatus              string             `json:"pin_status"`
	Status                 string             `json:"status"`
	SecurityQuestionStatus string             `json:"security_question_status"`
	CreatedAt              pgtype.Timestamptz `json:"created_at"`
	UpdatedAt              pgtype.Timestamptz `json:"updated_at"`
	WalletCount            int64              `json:"wallet_count"`
}

func (q *Queries) GetCircleUserWithWalletsByWorkspaceID(ctx context.Context, workspaceID uuid.UUID) (GetCircleUserWithWalletsByWorkspaceIDRow, error) {
	row := q.db.QueryRow(ctx, getCircleUserWithWalletsByWorkspaceID, workspaceID)
	var i GetCircleUserWithWalletsByWorkspaceIDRow
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.CircleCreateDate,
		&i.PinStatus,
		&i.Status,
		&i.SecurityQuestionStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.WalletCount,
	)
	return i, err
}

const listCircleUsers = `-- name: ListCircleUsers :many
SELECT id, workspace_id, circle_create_date, pin_status, status, security_question_status, created_at, updated_at FROM circle_users
ORDER BY created_at DESC
`

func (q *Queries) ListCircleUsers(ctx context.Context) ([]CircleUser, error) {
	rows, err := q.db.Query(ctx, listCircleUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CircleUser{}
	for rows.Next() {
		var i CircleUser
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.CircleCreateDate,
			&i.PinStatus,
			&i.Status,
			&i.SecurityQuestionStatus,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCircleUser = `-- name: UpdateCircleUser :one
UPDATE circle_users
SET 
    pin_status = COALESCE($1, pin_status),
    status = COALESCE($2, status),
    security_question_status = COALESCE($3, security_question_status),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $4
RETURNING id, workspace_id, circle_create_date, pin_status, status, security_question_status, created_at, updated_at
`

type UpdateCircleUserParams struct {
	PinStatus              string    `json:"pin_status"`
	Status                 string    `json:"status"`
	SecurityQuestionStatus string    `json:"security_question_status"`
	ID                     uuid.UUID `json:"id"`
}

func (q *Queries) UpdateCircleUser(ctx context.Context, arg UpdateCircleUserParams) (CircleUser, error) {
	row := q.db.QueryRow(ctx, updateCircleUser,
		arg.PinStatus,
		arg.Status,
		arg.SecurityQuestionStatus,
		arg.ID,
	)
	var i CircleUser
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.CircleCreateDate,
		&i.PinStatus,
		&i.Status,
		&i.SecurityQuestionStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateCircleUserByWorkspaceID = `-- name: UpdateCircleUserByWorkspaceID :one
UPDATE circle_users
SET 
    pin_status = COALESCE($1, pin_status),
    status = COALESCE($2, status),
    security_question_status = COALESCE($3, security_question_status),
    updated_at = CURRENT_TIMESTAMP
WHERE workspace_id = $4
RETURNING id, workspace_id, circle_create_date, pin_status, status, security_question_status, created_at, updated_at
`

type UpdateCircleUserByWorkspaceIDParams struct {
	PinStatus              string    `json:"pin_status"`
	Status                 string    `json:"status"`
	SecurityQuestionStatus string    `json:"security_question_status"`
	WorkspaceID            uuid.UUID `json:"workspace_id"`
}

func (q *Queries) UpdateCircleUserByWorkspaceID(ctx context.Context, arg UpdateCircleUserByWorkspaceIDParams) (CircleUser, error) {
	row := q.db.QueryRow(ctx, updateCircleUserByWorkspaceID,
		arg.PinStatus,
		arg.Status,
		arg.SecurityQuestionStatus,
		arg.WorkspaceID,
	)
	var i CircleUser
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.CircleCreateDate,
		&i.PinStatus,
		&i.Status,
		&i.SecurityQuestionStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
