// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: customers.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countCustomers = `-- name: CountCustomers :one
SELECT COUNT(*) FROM customers
WHERE deleted_at IS NULL
`

func (q *Queries) CountCustomers(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countCustomers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customers (
    external_id,
    email,
    name,
    phone,
    description,
    metadata,
    payment_sync_status,
    payment_provider
) VALUES (
    $1, $2, $3, $4, $5, $6, 
    COALESCE($7, 'pending'), 
    $8
)
RETURNING id, web3auth_id, external_id, email, name, phone, description, metadata, payment_sync_status, payment_synced_at, payment_sync_version, payment_provider, created_at, updated_at, deleted_at
`

type CreateCustomerParams struct {
	ExternalID      pgtype.Text `json:"external_id"`
	Email           pgtype.Text `json:"email"`
	Name            pgtype.Text `json:"name"`
	Phone           pgtype.Text `json:"phone"`
	Description     pgtype.Text `json:"description"`
	Metadata        []byte      `json:"metadata"`
	Column7         interface{} `json:"column_7"`
	PaymentProvider pgtype.Text `json:"payment_provider"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, createCustomer,
		arg.ExternalID,
		arg.Email,
		arg.Name,
		arg.Phone,
		arg.Description,
		arg.Metadata,
		arg.Column7,
		arg.PaymentProvider,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Web3authID,
		&i.ExternalID,
		&i.Email,
		&i.Name,
		&i.Phone,
		&i.Description,
		&i.Metadata,
		&i.PaymentSyncStatus,
		&i.PaymentSyncedAt,
		&i.PaymentSyncVersion,
		&i.PaymentProvider,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createCustomerWithSync = `-- name: CreateCustomerWithSync :one
INSERT INTO customers (
    external_id,
    email,
    name,
    phone,
    description,
    metadata,
    payment_sync_status,
    payment_synced_at,
    payment_sync_version,
    payment_provider
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
)
RETURNING id, web3auth_id, external_id, email, name, phone, description, metadata, payment_sync_status, payment_synced_at, payment_sync_version, payment_provider, created_at, updated_at, deleted_at
`

type CreateCustomerWithSyncParams struct {
	ExternalID         pgtype.Text        `json:"external_id"`
	Email              pgtype.Text        `json:"email"`
	Name               pgtype.Text        `json:"name"`
	Phone              pgtype.Text        `json:"phone"`
	Description        pgtype.Text        `json:"description"`
	Metadata           []byte             `json:"metadata"`
	PaymentSyncStatus  pgtype.Text        `json:"payment_sync_status"`
	PaymentSyncedAt    pgtype.Timestamptz `json:"payment_synced_at"`
	PaymentSyncVersion pgtype.Int4        `json:"payment_sync_version"`
	PaymentProvider    pgtype.Text        `json:"payment_provider"`
}

func (q *Queries) CreateCustomerWithSync(ctx context.Context, arg CreateCustomerWithSyncParams) (Customer, error) {
	row := q.db.QueryRow(ctx, createCustomerWithSync,
		arg.ExternalID,
		arg.Email,
		arg.Name,
		arg.Phone,
		arg.Description,
		arg.Metadata,
		arg.PaymentSyncStatus,
		arg.PaymentSyncedAt,
		arg.PaymentSyncVersion,
		arg.PaymentProvider,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Web3authID,
		&i.ExternalID,
		&i.Email,
		&i.Name,
		&i.Phone,
		&i.Description,
		&i.Metadata,
		&i.PaymentSyncStatus,
		&i.PaymentSyncedAt,
		&i.PaymentSyncVersion,
		&i.PaymentProvider,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createCustomerWithWeb3Auth = `-- name: CreateCustomerWithWeb3Auth :one
INSERT INTO customers (
    web3auth_id,
    email,
    name,
    phone,
    description,
    metadata
) VALUES (
    $1, $2, $3, $4, $5, $6
)
RETURNING id, web3auth_id, external_id, email, name, phone, description, metadata, payment_sync_status, payment_synced_at, payment_sync_version, payment_provider, created_at, updated_at, deleted_at
`

type CreateCustomerWithWeb3AuthParams struct {
	Web3authID  pgtype.Text `json:"web3auth_id"`
	Email       pgtype.Text `json:"email"`
	Name        pgtype.Text `json:"name"`
	Phone       pgtype.Text `json:"phone"`
	Description pgtype.Text `json:"description"`
	Metadata    []byte      `json:"metadata"`
}

func (q *Queries) CreateCustomerWithWeb3Auth(ctx context.Context, arg CreateCustomerWithWeb3AuthParams) (Customer, error) {
	row := q.db.QueryRow(ctx, createCustomerWithWeb3Auth,
		arg.Web3authID,
		arg.Email,
		arg.Name,
		arg.Phone,
		arg.Description,
		arg.Metadata,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Web3authID,
		&i.ExternalID,
		&i.Email,
		&i.Name,
		&i.Phone,
		&i.Description,
		&i.Metadata,
		&i.PaymentSyncStatus,
		&i.PaymentSyncedAt,
		&i.PaymentSyncVersion,
		&i.PaymentProvider,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteCustomer = `-- name: DeleteCustomer :exec
UPDATE customers
SET deleted_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) DeleteCustomer(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCustomer, id)
	return err
}

const getAllCustomers = `-- name: GetAllCustomers :many
SELECT id, web3auth_id, external_id, email, name, phone, description, metadata, payment_sync_status, payment_synced_at, payment_sync_version, payment_provider, created_at, updated_at, deleted_at FROM customers
ORDER BY created_at DESC
`

func (q *Queries) GetAllCustomers(ctx context.Context) ([]Customer, error) {
	rows, err := q.db.Query(ctx, getAllCustomers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Customer{}
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.Web3authID,
			&i.ExternalID,
			&i.Email,
			&i.Name,
			&i.Phone,
			&i.Description,
			&i.Metadata,
			&i.PaymentSyncStatus,
			&i.PaymentSyncedAt,
			&i.PaymentSyncVersion,
			&i.PaymentProvider,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCustomer = `-- name: GetCustomer :one
SELECT id, web3auth_id, external_id, email, name, phone, description, metadata, payment_sync_status, payment_synced_at, payment_sync_version, payment_provider, created_at, updated_at, deleted_at FROM customers
WHERE id = $1 AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) GetCustomer(ctx context.Context, id uuid.UUID) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomer, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Web3authID,
		&i.ExternalID,
		&i.Email,
		&i.Name,
		&i.Phone,
		&i.Description,
		&i.Metadata,
		&i.PaymentSyncStatus,
		&i.PaymentSyncedAt,
		&i.PaymentSyncVersion,
		&i.PaymentProvider,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getCustomerByEmail = `-- name: GetCustomerByEmail :one
SELECT id, web3auth_id, external_id, email, name, phone, description, metadata, payment_sync_status, payment_synced_at, payment_sync_version, payment_provider, created_at, updated_at, deleted_at FROM customers
WHERE email = $1 AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) GetCustomerByEmail(ctx context.Context, email pgtype.Text) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomerByEmail, email)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Web3authID,
		&i.ExternalID,
		&i.Email,
		&i.Name,
		&i.Phone,
		&i.Description,
		&i.Metadata,
		&i.PaymentSyncStatus,
		&i.PaymentSyncedAt,
		&i.PaymentSyncVersion,
		&i.PaymentProvider,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getCustomerByExternalID = `-- name: GetCustomerByExternalID :one
SELECT id, web3auth_id, external_id, email, name, phone, description, metadata, payment_sync_status, payment_synced_at, payment_sync_version, payment_provider, created_at, updated_at, deleted_at FROM customers
WHERE external_id = $1 AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) GetCustomerByExternalID(ctx context.Context, externalID pgtype.Text) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomerByExternalID, externalID)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Web3authID,
		&i.ExternalID,
		&i.Email,
		&i.Name,
		&i.Phone,
		&i.Description,
		&i.Metadata,
		&i.PaymentSyncStatus,
		&i.PaymentSyncedAt,
		&i.PaymentSyncVersion,
		&i.PaymentProvider,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getCustomerByWeb3AuthID = `-- name: GetCustomerByWeb3AuthID :one
SELECT id, web3auth_id, external_id, email, name, phone, description, metadata, payment_sync_status, payment_synced_at, payment_sync_version, payment_provider, created_at, updated_at, deleted_at FROM customers
WHERE web3auth_id = $1 AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) GetCustomerByWeb3AuthID(ctx context.Context, web3authID pgtype.Text) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomerByWeb3AuthID, web3authID)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Web3authID,
		&i.ExternalID,
		&i.Email,
		&i.Name,
		&i.Phone,
		&i.Description,
		&i.Metadata,
		&i.PaymentSyncStatus,
		&i.PaymentSyncedAt,
		&i.PaymentSyncVersion,
		&i.PaymentProvider,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getCustomersByExternalIDs = `-- name: GetCustomersByExternalIDs :many

SELECT id, web3auth_id, external_id, email, name, phone, description, metadata, payment_sync_status, payment_synced_at, payment_sync_version, payment_provider, created_at, updated_at, deleted_at FROM customers 
WHERE external_id = ANY($1::text[]) AND deleted_at IS NULL
`

// Payment Sync Related Customer Queries
func (q *Queries) GetCustomersByExternalIDs(ctx context.Context, dollar_1 []string) ([]Customer, error) {
	rows, err := q.db.Query(ctx, getCustomersByExternalIDs, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Customer{}
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.Web3authID,
			&i.ExternalID,
			&i.Email,
			&i.Name,
			&i.Phone,
			&i.Description,
			&i.Metadata,
			&i.PaymentSyncStatus,
			&i.PaymentSyncedAt,
			&i.PaymentSyncVersion,
			&i.PaymentProvider,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCustomersNeedingSync = `-- name: GetCustomersNeedingSync :many
SELECT id, web3auth_id, external_id, email, name, phone, description, metadata, payment_sync_status, payment_synced_at, payment_sync_version, payment_provider, created_at, updated_at, deleted_at FROM customers 
WHERE payment_sync_status = 'pending' AND deleted_at IS NULL
ORDER BY created_at ASC
`

func (q *Queries) GetCustomersNeedingSync(ctx context.Context) ([]Customer, error) {
	rows, err := q.db.Query(ctx, getCustomersNeedingSync)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Customer{}
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.Web3authID,
			&i.ExternalID,
			&i.Email,
			&i.Name,
			&i.Phone,
			&i.Description,
			&i.Metadata,
			&i.PaymentSyncStatus,
			&i.PaymentSyncedAt,
			&i.PaymentSyncVersion,
			&i.PaymentProvider,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCustomersSyncedByProvider = `-- name: GetCustomersSyncedByProvider :many
SELECT id, web3auth_id, external_id, email, name, phone, description, metadata, payment_sync_status, payment_synced_at, payment_sync_version, payment_provider, created_at, updated_at, deleted_at FROM customers 
WHERE payment_provider = $1 AND payment_sync_status != 'pending' AND deleted_at IS NULL
ORDER BY payment_synced_at DESC
`

func (q *Queries) GetCustomersSyncedByProvider(ctx context.Context, paymentProvider pgtype.Text) ([]Customer, error) {
	rows, err := q.db.Query(ctx, getCustomersSyncedByProvider, paymentProvider)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Customer{}
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.Web3authID,
			&i.ExternalID,
			&i.Email,
			&i.Name,
			&i.Phone,
			&i.Description,
			&i.Metadata,
			&i.PaymentSyncStatus,
			&i.PaymentSyncedAt,
			&i.PaymentSyncVersion,
			&i.PaymentProvider,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCustomersWithSyncConflicts = `-- name: GetCustomersWithSyncConflicts :many
SELECT id, web3auth_id, external_id, email, name, phone, description, metadata, payment_sync_status, payment_synced_at, payment_sync_version, payment_provider, created_at, updated_at, deleted_at FROM customers 
WHERE payment_sync_status = 'conflict' AND deleted_at IS NULL
ORDER BY payment_synced_at DESC
`

func (q *Queries) GetCustomersWithSyncConflicts(ctx context.Context) ([]Customer, error) {
	rows, err := q.db.Query(ctx, getCustomersWithSyncConflicts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Customer{}
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.Web3authID,
			&i.ExternalID,
			&i.Email,
			&i.Name,
			&i.Phone,
			&i.Description,
			&i.Metadata,
			&i.PaymentSyncStatus,
			&i.PaymentSyncedAt,
			&i.PaymentSyncVersion,
			&i.PaymentProvider,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCustomers = `-- name: ListCustomers :many
SELECT id, web3auth_id, external_id, email, name, phone, description, metadata, payment_sync_status, payment_synced_at, payment_sync_version, payment_provider, created_at, updated_at, deleted_at FROM customers
WHERE deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) ListCustomers(ctx context.Context) ([]Customer, error) {
	rows, err := q.db.Query(ctx, listCustomers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Customer{}
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.Web3authID,
			&i.ExternalID,
			&i.Email,
			&i.Name,
			&i.Phone,
			&i.Description,
			&i.Metadata,
			&i.PaymentSyncStatus,
			&i.PaymentSyncedAt,
			&i.PaymentSyncVersion,
			&i.PaymentProvider,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCustomersWithPagination = `-- name: ListCustomersWithPagination :many
SELECT id, web3auth_id, external_id, email, name, phone, description, metadata, payment_sync_status, payment_synced_at, payment_sync_version, payment_provider, created_at, updated_at, deleted_at FROM customers
WHERE deleted_at IS NULL
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListCustomersWithPaginationParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCustomersWithPagination(ctx context.Context, arg ListCustomersWithPaginationParams) ([]Customer, error) {
	rows, err := q.db.Query(ctx, listCustomersWithPagination, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Customer{}
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.Web3authID,
			&i.ExternalID,
			&i.Email,
			&i.Name,
			&i.Phone,
			&i.Description,
			&i.Metadata,
			&i.PaymentSyncStatus,
			&i.PaymentSyncedAt,
			&i.PaymentSyncVersion,
			&i.PaymentProvider,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCustomer = `-- name: UpdateCustomer :one
UPDATE customers
SET
    email = COALESCE($2, email),
    name = COALESCE($3, name),
    phone = COALESCE($4, phone),
    description = COALESCE($5, description),
    metadata = COALESCE($6, metadata),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, web3auth_id, external_id, email, name, phone, description, metadata, payment_sync_status, payment_synced_at, payment_sync_version, payment_provider, created_at, updated_at, deleted_at
`

type UpdateCustomerParams struct {
	ID          uuid.UUID   `json:"id"`
	Email       pgtype.Text `json:"email"`
	Name        pgtype.Text `json:"name"`
	Phone       pgtype.Text `json:"phone"`
	Description pgtype.Text `json:"description"`
	Metadata    []byte      `json:"metadata"`
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, updateCustomer,
		arg.ID,
		arg.Email,
		arg.Name,
		arg.Phone,
		arg.Description,
		arg.Metadata,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Web3authID,
		&i.ExternalID,
		&i.Email,
		&i.Name,
		&i.Phone,
		&i.Description,
		&i.Metadata,
		&i.PaymentSyncStatus,
		&i.PaymentSyncedAt,
		&i.PaymentSyncVersion,
		&i.PaymentProvider,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateCustomerPaymentSyncStatus = `-- name: UpdateCustomerPaymentSyncStatus :one
UPDATE customers 
SET payment_sync_status = $2, 
    payment_synced_at = CASE WHEN $2 != 'pending' THEN CURRENT_TIMESTAMP ELSE payment_synced_at END,
    payment_sync_version = CASE WHEN $2 != 'pending' THEN payment_sync_version + 1 ELSE payment_sync_version END,
    payment_provider = COALESCE($3, payment_provider),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, web3auth_id, external_id, email, name, phone, description, metadata, payment_sync_status, payment_synced_at, payment_sync_version, payment_provider, created_at, updated_at, deleted_at
`

type UpdateCustomerPaymentSyncStatusParams struct {
	ID                uuid.UUID   `json:"id"`
	PaymentSyncStatus pgtype.Text `json:"payment_sync_status"`
	PaymentProvider   pgtype.Text `json:"payment_provider"`
}

func (q *Queries) UpdateCustomerPaymentSyncStatus(ctx context.Context, arg UpdateCustomerPaymentSyncStatusParams) (Customer, error) {
	row := q.db.QueryRow(ctx, updateCustomerPaymentSyncStatus, arg.ID, arg.PaymentSyncStatus, arg.PaymentProvider)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Web3authID,
		&i.ExternalID,
		&i.Email,
		&i.Name,
		&i.Phone,
		&i.Description,
		&i.Metadata,
		&i.PaymentSyncStatus,
		&i.PaymentSyncedAt,
		&i.PaymentSyncVersion,
		&i.PaymentProvider,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateCustomerWithSync = `-- name: UpdateCustomerWithSync :one
UPDATE customers
SET
    email = COALESCE($2, email),
    name = COALESCE($3, name),
    phone = COALESCE($4, phone),
    description = COALESCE($5, description),
    metadata = COALESCE($6, metadata),
    payment_sync_status = COALESCE($7, payment_sync_status),
    payment_synced_at = COALESCE($8, payment_synced_at),
    payment_sync_version = COALESCE($9, payment_sync_version),
    payment_provider = COALESCE($10, payment_provider),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, web3auth_id, external_id, email, name, phone, description, metadata, payment_sync_status, payment_synced_at, payment_sync_version, payment_provider, created_at, updated_at, deleted_at
`

type UpdateCustomerWithSyncParams struct {
	ID                 uuid.UUID          `json:"id"`
	Email              pgtype.Text        `json:"email"`
	Name               pgtype.Text        `json:"name"`
	Phone              pgtype.Text        `json:"phone"`
	Description        pgtype.Text        `json:"description"`
	Metadata           []byte             `json:"metadata"`
	PaymentSyncStatus  pgtype.Text        `json:"payment_sync_status"`
	PaymentSyncedAt    pgtype.Timestamptz `json:"payment_synced_at"`
	PaymentSyncVersion pgtype.Int4        `json:"payment_sync_version"`
	PaymentProvider    pgtype.Text        `json:"payment_provider"`
}

func (q *Queries) UpdateCustomerWithSync(ctx context.Context, arg UpdateCustomerWithSyncParams) (Customer, error) {
	row := q.db.QueryRow(ctx, updateCustomerWithSync,
		arg.ID,
		arg.Email,
		arg.Name,
		arg.Phone,
		arg.Description,
		arg.Metadata,
		arg.PaymentSyncStatus,
		arg.PaymentSyncedAt,
		arg.PaymentSyncVersion,
		arg.PaymentProvider,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Web3authID,
		&i.ExternalID,
		&i.Email,
		&i.Name,
		&i.Phone,
		&i.Description,
		&i.Metadata,
		&i.PaymentSyncStatus,
		&i.PaymentSyncedAt,
		&i.PaymentSyncVersion,
		&i.PaymentProvider,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
