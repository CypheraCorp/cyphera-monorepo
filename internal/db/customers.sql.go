// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: customers.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countCustomers = `-- name: CountCustomers :one
SELECT COUNT(*) FROM customers
WHERE workspace_id = $1 AND deleted_at IS NULL
`

func (q *Queries) CountCustomers(ctx context.Context, workspaceID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countCustomers, workspaceID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customers (
    workspace_id,
    external_id,
    email,
    name,
    phone,
    description,
    balance_in_pennies,
    currency,
    default_source_id,
    invoice_prefix,
    next_invoice_sequence,
    tax_exempt,
    tax_ids,
    metadata,
    livemode
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15
)
RETURNING id, workspace_id, external_id, email, name, phone, description, balance_in_pennies, currency, default_source_id, invoice_prefix, next_invoice_sequence, tax_exempt, tax_ids, metadata, livemode, created_at, updated_at, deleted_at
`

type CreateCustomerParams struct {
	WorkspaceID         uuid.UUID   `json:"workspace_id"`
	ExternalID          pgtype.Text `json:"external_id"`
	Email               pgtype.Text `json:"email"`
	Name                pgtype.Text `json:"name"`
	Phone               pgtype.Text `json:"phone"`
	Description         pgtype.Text `json:"description"`
	BalanceInPennies    pgtype.Int4 `json:"balance_in_pennies"`
	Currency            pgtype.Text `json:"currency"`
	DefaultSourceID     pgtype.UUID `json:"default_source_id"`
	InvoicePrefix       pgtype.Text `json:"invoice_prefix"`
	NextInvoiceSequence pgtype.Int4 `json:"next_invoice_sequence"`
	TaxExempt           pgtype.Bool `json:"tax_exempt"`
	TaxIds              []byte      `json:"tax_ids"`
	Metadata            []byte      `json:"metadata"`
	Livemode            pgtype.Bool `json:"livemode"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, createCustomer,
		arg.WorkspaceID,
		arg.ExternalID,
		arg.Email,
		arg.Name,
		arg.Phone,
		arg.Description,
		arg.BalanceInPennies,
		arg.Currency,
		arg.DefaultSourceID,
		arg.InvoicePrefix,
		arg.NextInvoiceSequence,
		arg.TaxExempt,
		arg.TaxIds,
		arg.Metadata,
		arg.Livemode,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.ExternalID,
		&i.Email,
		&i.Name,
		&i.Phone,
		&i.Description,
		&i.BalanceInPennies,
		&i.Currency,
		&i.DefaultSourceID,
		&i.InvoicePrefix,
		&i.NextInvoiceSequence,
		&i.TaxExempt,
		&i.TaxIds,
		&i.Metadata,
		&i.Livemode,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteCustomer = `-- name: DeleteCustomer :exec
UPDATE customers
SET deleted_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) DeleteCustomer(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCustomer, id)
	return err
}

const getAllCustomers = `-- name: GetAllCustomers :many
SELECT id, workspace_id, external_id, email, name, phone, description, balance_in_pennies, currency, default_source_id, invoice_prefix, next_invoice_sequence, tax_exempt, tax_ids, metadata, livemode, created_at, updated_at, deleted_at FROM customers
ORDER BY created_at DESC
`

func (q *Queries) GetAllCustomers(ctx context.Context) ([]Customer, error) {
	rows, err := q.db.Query(ctx, getAllCustomers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Customer{}
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.ExternalID,
			&i.Email,
			&i.Name,
			&i.Phone,
			&i.Description,
			&i.BalanceInPennies,
			&i.Currency,
			&i.DefaultSourceID,
			&i.InvoicePrefix,
			&i.NextInvoiceSequence,
			&i.TaxExempt,
			&i.TaxIds,
			&i.Metadata,
			&i.Livemode,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCustomer = `-- name: GetCustomer :one
SELECT id, workspace_id, external_id, email, name, phone, description, balance_in_pennies, currency, default_source_id, invoice_prefix, next_invoice_sequence, tax_exempt, tax_ids, metadata, livemode, created_at, updated_at, deleted_at FROM customers
WHERE id = $1 AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) GetCustomer(ctx context.Context, id uuid.UUID) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomer, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.ExternalID,
		&i.Email,
		&i.Name,
		&i.Phone,
		&i.Description,
		&i.BalanceInPennies,
		&i.Currency,
		&i.DefaultSourceID,
		&i.InvoicePrefix,
		&i.NextInvoiceSequence,
		&i.TaxExempt,
		&i.TaxIds,
		&i.Metadata,
		&i.Livemode,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getCustomerByEmail = `-- name: GetCustomerByEmail :one
SELECT id, workspace_id, external_id, email, name, phone, description, balance_in_pennies, currency, default_source_id, invoice_prefix, next_invoice_sequence, tax_exempt, tax_ids, metadata, livemode, created_at, updated_at, deleted_at FROM customers
WHERE workspace_id = $1 AND email = $2 AND deleted_at IS NULL LIMIT 1
`

type GetCustomerByEmailParams struct {
	WorkspaceID uuid.UUID   `json:"workspace_id"`
	Email       pgtype.Text `json:"email"`
}

func (q *Queries) GetCustomerByEmail(ctx context.Context, arg GetCustomerByEmailParams) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomerByEmail, arg.WorkspaceID, arg.Email)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.ExternalID,
		&i.Email,
		&i.Name,
		&i.Phone,
		&i.Description,
		&i.BalanceInPennies,
		&i.Currency,
		&i.DefaultSourceID,
		&i.InvoicePrefix,
		&i.NextInvoiceSequence,
		&i.TaxExempt,
		&i.TaxIds,
		&i.Metadata,
		&i.Livemode,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getCustomerByExternalID = `-- name: GetCustomerByExternalID :one
SELECT id, workspace_id, external_id, email, name, phone, description, balance_in_pennies, currency, default_source_id, invoice_prefix, next_invoice_sequence, tax_exempt, tax_ids, metadata, livemode, created_at, updated_at, deleted_at FROM customers
WHERE workspace_id = $1 AND external_id = $2 AND deleted_at IS NULL LIMIT 1
`

type GetCustomerByExternalIDParams struct {
	WorkspaceID uuid.UUID   `json:"workspace_id"`
	ExternalID  pgtype.Text `json:"external_id"`
}

func (q *Queries) GetCustomerByExternalID(ctx context.Context, arg GetCustomerByExternalIDParams) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomerByExternalID, arg.WorkspaceID, arg.ExternalID)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.ExternalID,
		&i.Email,
		&i.Name,
		&i.Phone,
		&i.Description,
		&i.BalanceInPennies,
		&i.Currency,
		&i.DefaultSourceID,
		&i.InvoicePrefix,
		&i.NextInvoiceSequence,
		&i.TaxExempt,
		&i.TaxIds,
		&i.Metadata,
		&i.Livemode,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getCustomersByBalance = `-- name: GetCustomersByBalance :many
SELECT id, workspace_id, external_id, email, name, phone, description, balance_in_pennies, currency, default_source_id, invoice_prefix, next_invoice_sequence, tax_exempt, tax_ids, metadata, livemode, created_at, updated_at, deleted_at FROM customers
WHERE workspace_id = $1 
AND deleted_at IS NULL 
AND balance_in_pennies > $2
ORDER BY balance_in_pennies DESC
`

type GetCustomersByBalanceParams struct {
	WorkspaceID      uuid.UUID   `json:"workspace_id"`
	BalanceInPennies pgtype.Int4 `json:"balance_in_pennies"`
}

func (q *Queries) GetCustomersByBalance(ctx context.Context, arg GetCustomersByBalanceParams) ([]Customer, error) {
	rows, err := q.db.Query(ctx, getCustomersByBalance, arg.WorkspaceID, arg.BalanceInPennies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Customer{}
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.ExternalID,
			&i.Email,
			&i.Name,
			&i.Phone,
			&i.Description,
			&i.BalanceInPennies,
			&i.Currency,
			&i.DefaultSourceID,
			&i.InvoicePrefix,
			&i.NextInvoiceSequence,
			&i.TaxExempt,
			&i.TaxIds,
			&i.Metadata,
			&i.Livemode,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCustomersWithWorkspaceInfo = `-- name: GetCustomersWithWorkspaceInfo :many
SELECT 
    c.id, c.workspace_id, c.external_id, c.email, c.name, c.phone, c.description, c.balance_in_pennies, c.currency, c.default_source_id, c.invoice_prefix, c.next_invoice_sequence, c.tax_exempt, c.tax_ids, c.metadata, c.livemode, c.created_at, c.updated_at, c.deleted_at,
    w.name as workspace_name,
    w.business_name as workspace_business_name,
    w.support_email as workspace_support_email
FROM customers c
INNER JOIN workspaces w ON c.workspace_id = w.id
WHERE c.workspace_id = $1 AND c.deleted_at IS NULL
ORDER BY c.created_at DESC
`

type GetCustomersWithWorkspaceInfoRow struct {
	ID                    uuid.UUID          `json:"id"`
	WorkspaceID           uuid.UUID          `json:"workspace_id"`
	ExternalID            pgtype.Text        `json:"external_id"`
	Email                 pgtype.Text        `json:"email"`
	Name                  pgtype.Text        `json:"name"`
	Phone                 pgtype.Text        `json:"phone"`
	Description           pgtype.Text        `json:"description"`
	BalanceInPennies      pgtype.Int4        `json:"balance_in_pennies"`
	Currency              pgtype.Text        `json:"currency"`
	DefaultSourceID       pgtype.UUID        `json:"default_source_id"`
	InvoicePrefix         pgtype.Text        `json:"invoice_prefix"`
	NextInvoiceSequence   pgtype.Int4        `json:"next_invoice_sequence"`
	TaxExempt             pgtype.Bool        `json:"tax_exempt"`
	TaxIds                []byte             `json:"tax_ids"`
	Metadata              []byte             `json:"metadata"`
	Livemode              pgtype.Bool        `json:"livemode"`
	CreatedAt             pgtype.Timestamptz `json:"created_at"`
	UpdatedAt             pgtype.Timestamptz `json:"updated_at"`
	DeletedAt             pgtype.Timestamptz `json:"deleted_at"`
	WorkspaceName         string             `json:"workspace_name"`
	WorkspaceBusinessName pgtype.Text        `json:"workspace_business_name"`
	WorkspaceSupportEmail pgtype.Text        `json:"workspace_support_email"`
}

func (q *Queries) GetCustomersWithWorkspaceInfo(ctx context.Context, workspaceID uuid.UUID) ([]GetCustomersWithWorkspaceInfoRow, error) {
	rows, err := q.db.Query(ctx, getCustomersWithWorkspaceInfo, workspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCustomersWithWorkspaceInfoRow{}
	for rows.Next() {
		var i GetCustomersWithWorkspaceInfoRow
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.ExternalID,
			&i.Email,
			&i.Name,
			&i.Phone,
			&i.Description,
			&i.BalanceInPennies,
			&i.Currency,
			&i.DefaultSourceID,
			&i.InvoicePrefix,
			&i.NextInvoiceSequence,
			&i.TaxExempt,
			&i.TaxIds,
			&i.Metadata,
			&i.Livemode,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.WorkspaceName,
			&i.WorkspaceBusinessName,
			&i.WorkspaceSupportEmail,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCustomers = `-- name: ListCustomers :many
SELECT id, workspace_id, external_id, email, name, phone, description, balance_in_pennies, currency, default_source_id, invoice_prefix, next_invoice_sequence, tax_exempt, tax_ids, metadata, livemode, created_at, updated_at, deleted_at FROM customers
WHERE workspace_id = $1 AND deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) ListCustomers(ctx context.Context, workspaceID uuid.UUID) ([]Customer, error) {
	rows, err := q.db.Query(ctx, listCustomers, workspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Customer{}
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.ExternalID,
			&i.Email,
			&i.Name,
			&i.Phone,
			&i.Description,
			&i.BalanceInPennies,
			&i.Currency,
			&i.DefaultSourceID,
			&i.InvoicePrefix,
			&i.NextInvoiceSequence,
			&i.TaxExempt,
			&i.TaxIds,
			&i.Metadata,
			&i.Livemode,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCustomersWithPagination = `-- name: ListCustomersWithPagination :many
SELECT id, workspace_id, external_id, email, name, phone, description, balance_in_pennies, currency, default_source_id, invoice_prefix, next_invoice_sequence, tax_exempt, tax_ids, metadata, livemode, created_at, updated_at, deleted_at FROM customers
WHERE workspace_id = $1 AND deleted_at IS NULL
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListCustomersWithPaginationParams struct {
	WorkspaceID uuid.UUID `json:"workspace_id"`
	Limit       int32     `json:"limit"`
	Offset      int32     `json:"offset"`
}

func (q *Queries) ListCustomersWithPagination(ctx context.Context, arg ListCustomersWithPaginationParams) ([]Customer, error) {
	rows, err := q.db.Query(ctx, listCustomersWithPagination, arg.WorkspaceID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Customer{}
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.ExternalID,
			&i.Email,
			&i.Name,
			&i.Phone,
			&i.Description,
			&i.BalanceInPennies,
			&i.Currency,
			&i.DefaultSourceID,
			&i.InvoicePrefix,
			&i.NextInvoiceSequence,
			&i.TaxExempt,
			&i.TaxIds,
			&i.Metadata,
			&i.Livemode,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCustomer = `-- name: UpdateCustomer :one
UPDATE customers
SET
    email = COALESCE($2, email),
    name = COALESCE($3, name),
    phone = COALESCE($4, phone),
    description = COALESCE($5, description),
    balance_in_pennies = COALESCE($6, balance_in_pennies),
    currency = COALESCE($7, currency),
    default_source_id = COALESCE($8, default_source_id),
    invoice_prefix = COALESCE($9, invoice_prefix),
    next_invoice_sequence = COALESCE($10, next_invoice_sequence),
    tax_exempt = COALESCE($11, tax_exempt),
    tax_ids = COALESCE($12, tax_ids),
    metadata = COALESCE($13, metadata),
    livemode = COALESCE($14, livemode),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, workspace_id, external_id, email, name, phone, description, balance_in_pennies, currency, default_source_id, invoice_prefix, next_invoice_sequence, tax_exempt, tax_ids, metadata, livemode, created_at, updated_at, deleted_at
`

type UpdateCustomerParams struct {
	ID                  uuid.UUID   `json:"id"`
	Email               pgtype.Text `json:"email"`
	Name                pgtype.Text `json:"name"`
	Phone               pgtype.Text `json:"phone"`
	Description         pgtype.Text `json:"description"`
	BalanceInPennies    pgtype.Int4 `json:"balance_in_pennies"`
	Currency            pgtype.Text `json:"currency"`
	DefaultSourceID     pgtype.UUID `json:"default_source_id"`
	InvoicePrefix       pgtype.Text `json:"invoice_prefix"`
	NextInvoiceSequence pgtype.Int4 `json:"next_invoice_sequence"`
	TaxExempt           pgtype.Bool `json:"tax_exempt"`
	TaxIds              []byte      `json:"tax_ids"`
	Metadata            []byte      `json:"metadata"`
	Livemode            pgtype.Bool `json:"livemode"`
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, updateCustomer,
		arg.ID,
		arg.Email,
		arg.Name,
		arg.Phone,
		arg.Description,
		arg.BalanceInPennies,
		arg.Currency,
		arg.DefaultSourceID,
		arg.InvoicePrefix,
		arg.NextInvoiceSequence,
		arg.TaxExempt,
		arg.TaxIds,
		arg.Metadata,
		arg.Livemode,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.ExternalID,
		&i.Email,
		&i.Name,
		&i.Phone,
		&i.Description,
		&i.BalanceInPennies,
		&i.Currency,
		&i.DefaultSourceID,
		&i.InvoicePrefix,
		&i.NextInvoiceSequence,
		&i.TaxExempt,
		&i.TaxIds,
		&i.Metadata,
		&i.Livemode,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateCustomerBalance = `-- name: UpdateCustomerBalance :one
UPDATE customers
SET 
    balance_in_pennies = balance_in_pennies + $2,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, workspace_id, external_id, email, name, phone, description, balance_in_pennies, currency, default_source_id, invoice_prefix, next_invoice_sequence, tax_exempt, tax_ids, metadata, livemode, created_at, updated_at, deleted_at
`

type UpdateCustomerBalanceParams struct {
	ID               uuid.UUID   `json:"id"`
	BalanceInPennies pgtype.Int4 `json:"balance_in_pennies"`
}

func (q *Queries) UpdateCustomerBalance(ctx context.Context, arg UpdateCustomerBalanceParams) (Customer, error) {
	row := q.db.QueryRow(ctx, updateCustomerBalance, arg.ID, arg.BalanceInPennies)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.ExternalID,
		&i.Email,
		&i.Name,
		&i.Phone,
		&i.Description,
		&i.BalanceInPennies,
		&i.Currency,
		&i.DefaultSourceID,
		&i.InvoicePrefix,
		&i.NextInvoiceSequence,
		&i.TaxExempt,
		&i.TaxIds,
		&i.Metadata,
		&i.Livemode,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
