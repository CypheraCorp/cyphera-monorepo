// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: customers.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customers (
    email,
    name,
    description,
    metadata,
    currency,
    tax_exempt,
    tax_ids,
    livemode
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, email, name, description, metadata, created_at, updated_at, deleted_at, balance, currency, default_source_id, invoice_prefix, next_invoice_sequence, tax_exempt, tax_ids, livemode
`

type CreateCustomerParams struct {
	Email       string      `json:"email"`
	Name        pgtype.Text `json:"name"`
	Description pgtype.Text `json:"description"`
	Metadata    []byte      `json:"metadata"`
	Currency    pgtype.Text `json:"currency"`
	TaxExempt   pgtype.Text `json:"tax_exempt"`
	TaxIds      []byte      `json:"tax_ids"`
	Livemode    pgtype.Bool `json:"livemode"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, createCustomer,
		arg.Email,
		arg.Name,
		arg.Description,
		arg.Metadata,
		arg.Currency,
		arg.TaxExempt,
		arg.TaxIds,
		arg.Livemode,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Description,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Balance,
		&i.Currency,
		&i.DefaultSourceID,
		&i.InvoicePrefix,
		&i.NextInvoiceSequence,
		&i.TaxExempt,
		&i.TaxIds,
		&i.Livemode,
	)
	return i, err
}

const deleteCustomer = `-- name: DeleteCustomer :exec
UPDATE customers
SET deleted_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) DeleteCustomer(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCustomer, id)
	return err
}

const getCustomer = `-- name: GetCustomer :one
SELECT id, email, name, description, metadata, created_at, updated_at, deleted_at, balance, currency, default_source_id, invoice_prefix, next_invoice_sequence, tax_exempt, tax_ids, livemode FROM customers
WHERE id = $1 AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) GetCustomer(ctx context.Context, id uuid.UUID) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomer, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Description,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Balance,
		&i.Currency,
		&i.DefaultSourceID,
		&i.InvoicePrefix,
		&i.NextInvoiceSequence,
		&i.TaxExempt,
		&i.TaxIds,
		&i.Livemode,
	)
	return i, err
}

const listCustomers = `-- name: ListCustomers :many
SELECT id, email, name, description, metadata, created_at, updated_at, deleted_at, balance, currency, default_source_id, invoice_prefix, next_invoice_sequence, tax_exempt, tax_ids, livemode FROM customers
WHERE deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) ListCustomers(ctx context.Context) ([]Customer, error) {
	rows, err := q.db.Query(ctx, listCustomers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Customer{}
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.Description,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Balance,
			&i.Currency,
			&i.DefaultSourceID,
			&i.InvoicePrefix,
			&i.NextInvoiceSequence,
			&i.TaxExempt,
			&i.TaxIds,
			&i.Livemode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCustomer = `-- name: UpdateCustomer :one
UPDATE customers
SET
    email = COALESCE($2, email),
    name = COALESCE($3, name),
    description = COALESCE($4, description),
    metadata = COALESCE($5, metadata),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, email, name, description, metadata, created_at, updated_at, deleted_at, balance, currency, default_source_id, invoice_prefix, next_invoice_sequence, tax_exempt, tax_ids, livemode
`

type UpdateCustomerParams struct {
	ID          uuid.UUID   `json:"id"`
	Email       string      `json:"email"`
	Name        pgtype.Text `json:"name"`
	Description pgtype.Text `json:"description"`
	Metadata    []byte      `json:"metadata"`
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, updateCustomer,
		arg.ID,
		arg.Email,
		arg.Name,
		arg.Description,
		arg.Metadata,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Description,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Balance,
		&i.Currency,
		&i.DefaultSourceID,
		&i.InvoicePrefix,
		&i.NextInvoiceSequence,
		&i.TaxExempt,
		&i.TaxIds,
		&i.Livemode,
	)
	return i, err
}
