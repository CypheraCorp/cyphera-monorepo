// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: customers.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countCustomers = `-- name: CountCustomers :one
SELECT COUNT(*) FROM customers
WHERE workspace_id = $1 AND deleted_at IS NULL
`

func (q *Queries) CountCustomers(ctx context.Context, workspaceID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countCustomers, workspaceID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countCustomersByWorkspaceID = `-- name: CountCustomersByWorkspaceID :one
SELECT COUNT(*) FROM customers
WHERE workspace_id = $1 AND deleted_at IS NULL
`

func (q *Queries) CountCustomersByWorkspaceID(ctx context.Context, workspaceID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countCustomersByWorkspaceID, workspaceID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customers (
    workspace_id,
    external_id,
    email,
    name,
    phone,
    description,
    metadata
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, workspace_id, external_id, email, name, phone, description, metadata, created_at, updated_at, deleted_at
`

type CreateCustomerParams struct {
	WorkspaceID uuid.UUID   `json:"workspace_id"`
	ExternalID  pgtype.Text `json:"external_id"`
	Email       pgtype.Text `json:"email"`
	Name        pgtype.Text `json:"name"`
	Phone       pgtype.Text `json:"phone"`
	Description pgtype.Text `json:"description"`
	Metadata    []byte      `json:"metadata"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, createCustomer,
		arg.WorkspaceID,
		arg.ExternalID,
		arg.Email,
		arg.Name,
		arg.Phone,
		arg.Description,
		arg.Metadata,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.ExternalID,
		&i.Email,
		&i.Name,
		&i.Phone,
		&i.Description,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteCustomer = `-- name: DeleteCustomer :exec
UPDATE customers
SET deleted_at = CURRENT_TIMESTAMP
WHERE id = $1 AND workspace_id = $2 AND deleted_at IS NULL
`

type DeleteCustomerParams struct {
	ID          uuid.UUID `json:"id"`
	WorkspaceID uuid.UUID `json:"workspace_id"`
}

func (q *Queries) DeleteCustomer(ctx context.Context, arg DeleteCustomerParams) error {
	_, err := q.db.Exec(ctx, deleteCustomer, arg.ID, arg.WorkspaceID)
	return err
}

const getAllCustomers = `-- name: GetAllCustomers :many
SELECT id, workspace_id, external_id, email, name, phone, description, metadata, created_at, updated_at, deleted_at FROM customers
ORDER BY created_at DESC
`

func (q *Queries) GetAllCustomers(ctx context.Context) ([]Customer, error) {
	rows, err := q.db.Query(ctx, getAllCustomers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Customer{}
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.ExternalID,
			&i.Email,
			&i.Name,
			&i.Phone,
			&i.Description,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCustomer = `-- name: GetCustomer :one
SELECT id, workspace_id, external_id, email, name, phone, description, metadata, created_at, updated_at, deleted_at FROM customers
WHERE id = $1 AND workspace_id = $2 AND deleted_at IS NULL LIMIT 1
`

type GetCustomerParams struct {
	ID          uuid.UUID `json:"id"`
	WorkspaceID uuid.UUID `json:"workspace_id"`
}

func (q *Queries) GetCustomer(ctx context.Context, arg GetCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomer, arg.ID, arg.WorkspaceID)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.ExternalID,
		&i.Email,
		&i.Name,
		&i.Phone,
		&i.Description,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getCustomerByEmail = `-- name: GetCustomerByEmail :one
SELECT id, workspace_id, external_id, email, name, phone, description, metadata, created_at, updated_at, deleted_at FROM customers
WHERE workspace_id = $1 AND email = $2 AND deleted_at IS NULL LIMIT 1
`

type GetCustomerByEmailParams struct {
	WorkspaceID uuid.UUID   `json:"workspace_id"`
	Email       pgtype.Text `json:"email"`
}

func (q *Queries) GetCustomerByEmail(ctx context.Context, arg GetCustomerByEmailParams) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomerByEmail, arg.WorkspaceID, arg.Email)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.ExternalID,
		&i.Email,
		&i.Name,
		&i.Phone,
		&i.Description,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getCustomerByExternalID = `-- name: GetCustomerByExternalID :one
SELECT id, workspace_id, external_id, email, name, phone, description, metadata, created_at, updated_at, deleted_at FROM customers
WHERE workspace_id = $1 AND external_id = $2 AND deleted_at IS NULL LIMIT 1
`

type GetCustomerByExternalIDParams struct {
	WorkspaceID uuid.UUID   `json:"workspace_id"`
	ExternalID  pgtype.Text `json:"external_id"`
}

func (q *Queries) GetCustomerByExternalID(ctx context.Context, arg GetCustomerByExternalIDParams) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomerByExternalID, arg.WorkspaceID, arg.ExternalID)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.ExternalID,
		&i.Email,
		&i.Name,
		&i.Phone,
		&i.Description,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getCustomersWithWorkspaceInfo = `-- name: GetCustomersWithWorkspaceInfo :many
SELECT 
    c.id, c.workspace_id, c.external_id, c.email, c.name, c.phone, c.description, c.metadata, c.created_at, c.updated_at, c.deleted_at,
    w.name as workspace_name,
    w.business_name as workspace_business_name,
    w.support_email as workspace_support_email
FROM customers c
INNER JOIN workspaces w ON c.workspace_id = w.id
WHERE c.workspace_id = $1 AND c.deleted_at IS NULL
ORDER BY c.created_at DESC
`

type GetCustomersWithWorkspaceInfoRow struct {
	ID                    uuid.UUID          `json:"id"`
	WorkspaceID           uuid.UUID          `json:"workspace_id"`
	ExternalID            pgtype.Text        `json:"external_id"`
	Email                 pgtype.Text        `json:"email"`
	Name                  pgtype.Text        `json:"name"`
	Phone                 pgtype.Text        `json:"phone"`
	Description           pgtype.Text        `json:"description"`
	Metadata              []byte             `json:"metadata"`
	CreatedAt             pgtype.Timestamptz `json:"created_at"`
	UpdatedAt             pgtype.Timestamptz `json:"updated_at"`
	DeletedAt             pgtype.Timestamptz `json:"deleted_at"`
	WorkspaceName         string             `json:"workspace_name"`
	WorkspaceBusinessName pgtype.Text        `json:"workspace_business_name"`
	WorkspaceSupportEmail pgtype.Text        `json:"workspace_support_email"`
}

func (q *Queries) GetCustomersWithWorkspaceInfo(ctx context.Context, workspaceID uuid.UUID) ([]GetCustomersWithWorkspaceInfoRow, error) {
	rows, err := q.db.Query(ctx, getCustomersWithWorkspaceInfo, workspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCustomersWithWorkspaceInfoRow{}
	for rows.Next() {
		var i GetCustomersWithWorkspaceInfoRow
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.ExternalID,
			&i.Email,
			&i.Name,
			&i.Phone,
			&i.Description,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.WorkspaceName,
			&i.WorkspaceBusinessName,
			&i.WorkspaceSupportEmail,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCustomers = `-- name: ListCustomers :many
SELECT id, workspace_id, external_id, email, name, phone, description, metadata, created_at, updated_at, deleted_at FROM customers
WHERE workspace_id = $1 AND deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) ListCustomers(ctx context.Context, workspaceID uuid.UUID) ([]Customer, error) {
	rows, err := q.db.Query(ctx, listCustomers, workspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Customer{}
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.ExternalID,
			&i.Email,
			&i.Name,
			&i.Phone,
			&i.Description,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCustomersWithPagination = `-- name: ListCustomersWithPagination :many
SELECT id, workspace_id, external_id, email, name, phone, description, metadata, created_at, updated_at, deleted_at FROM customers
WHERE workspace_id = $1 AND deleted_at IS NULL
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListCustomersWithPaginationParams struct {
	WorkspaceID uuid.UUID `json:"workspace_id"`
	Limit       int32     `json:"limit"`
	Offset      int32     `json:"offset"`
}

func (q *Queries) ListCustomersWithPagination(ctx context.Context, arg ListCustomersWithPaginationParams) ([]Customer, error) {
	rows, err := q.db.Query(ctx, listCustomersWithPagination, arg.WorkspaceID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Customer{}
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.ExternalID,
			&i.Email,
			&i.Name,
			&i.Phone,
			&i.Description,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCustomer = `-- name: UpdateCustomer :one
UPDATE customers
SET
    email = COALESCE($3, email),
    name = COALESCE($4, name),
    phone = COALESCE($5, phone),
    description = COALESCE($6, description),
    metadata = COALESCE($7, metadata),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND workspace_id = $2 AND deleted_at IS NULL
RETURNING id, workspace_id, external_id, email, name, phone, description, metadata, created_at, updated_at, deleted_at
`

type UpdateCustomerParams struct {
	ID          uuid.UUID   `json:"id"`
	WorkspaceID uuid.UUID   `json:"workspace_id"`
	Email       pgtype.Text `json:"email"`
	Name        pgtype.Text `json:"name"`
	Phone       pgtype.Text `json:"phone"`
	Description pgtype.Text `json:"description"`
	Metadata    []byte      `json:"metadata"`
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, updateCustomer,
		arg.ID,
		arg.WorkspaceID,
		arg.Email,
		arg.Name,
		arg.Phone,
		arg.Description,
		arg.Metadata,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.ExternalID,
		&i.Email,
		&i.Name,
		&i.Phone,
		&i.Description,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
