// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type AccountType string

const (
	AccountTypeAdmin    AccountType = "admin"
	AccountTypeMerchant AccountType = "merchant"
)

func (e *AccountType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AccountType(s)
	case string:
		*e = AccountType(s)
	default:
		return fmt.Errorf("unsupported scan type for AccountType: %T", src)
	}
	return nil
}

type NullAccountType struct {
	AccountType AccountType `json:"account_type"`
	Valid       bool        `json:"valid"` // Valid is true if AccountType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAccountType) Scan(value interface{}) error {
	if value == nil {
		ns.AccountType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AccountType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAccountType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AccountType), nil
}

type ApiKeyLevel string

const (
	ApiKeyLevelRead  ApiKeyLevel = "read"
	ApiKeyLevelWrite ApiKeyLevel = "write"
	ApiKeyLevelAdmin ApiKeyLevel = "admin"
)

func (e *ApiKeyLevel) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ApiKeyLevel(s)
	case string:
		*e = ApiKeyLevel(s)
	default:
		return fmt.Errorf("unsupported scan type for ApiKeyLevel: %T", src)
	}
	return nil
}

type NullApiKeyLevel struct {
	ApiKeyLevel ApiKeyLevel `json:"api_key_level"`
	Valid       bool        `json:"valid"` // Valid is true if ApiKeyLevel is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullApiKeyLevel) Scan(value interface{}) error {
	if value == nil {
		ns.ApiKeyLevel, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ApiKeyLevel.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullApiKeyLevel) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ApiKeyLevel), nil
}

type IntervalType string

const (
	IntervalType5minutes IntervalType = "5minutes"
	IntervalTypeDaily    IntervalType = "Daily"
	IntervalTypeWeekly   IntervalType = "Weekly"
	IntervalTypeMonthly  IntervalType = "Monthly"
	IntervalTypeYearly   IntervalType = "Yearly"
)

func (e *IntervalType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = IntervalType(s)
	case string:
		*e = IntervalType(s)
	default:
		return fmt.Errorf("unsupported scan type for IntervalType: %T", src)
	}
	return nil
}

type NullIntervalType struct {
	IntervalType IntervalType `json:"interval_type"`
	Valid        bool         `json:"valid"` // Valid is true if IntervalType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullIntervalType) Scan(value interface{}) error {
	if value == nil {
		ns.IntervalType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.IntervalType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullIntervalType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.IntervalType), nil
}

type ProductType string

const (
	ProductTypeRecurring ProductType = "recurring"
	ProductTypeOneOff    ProductType = "one-off"
)

func (e *ProductType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProductType(s)
	case string:
		*e = ProductType(s)
	default:
		return fmt.Errorf("unsupported scan type for ProductType: %T", src)
	}
	return nil
}

type NullProductType struct {
	ProductType ProductType `json:"product_type"`
	Valid       bool        `json:"valid"` // Valid is true if ProductType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProductType) Scan(value interface{}) error {
	if value == nil {
		ns.ProductType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProductType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProductType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ProductType), nil
}

type UserRole string

const (
	UserRoleAdmin     UserRole = "admin"
	UserRoleSupport   UserRole = "support"
	UserRoleDeveloper UserRole = "developer"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole `json:"user_role"`
	Valid    bool     `json:"valid"` // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type UserStatus string

const (
	UserStatusActive    UserStatus = "active"
	UserStatusInactive  UserStatus = "inactive"
	UserStatusSuspended UserStatus = "suspended"
	UserStatusPending   UserStatus = "pending"
)

func (e *UserStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserStatus(s)
	case string:
		*e = UserStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for UserStatus: %T", src)
	}
	return nil
}

type NullUserStatus struct {
	UserStatus UserStatus `json:"user_status"`
	Valid      bool       `json:"valid"` // Valid is true if UserStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserStatus) Scan(value interface{}) error {
	if value == nil {
		ns.UserStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserStatus), nil
}

type Account struct {
	ID                 uuid.UUID          `json:"id"`
	Name               string             `json:"name"`
	AccountType        AccountType        `json:"account_type"`
	BusinessName       pgtype.Text        `json:"business_name"`
	BusinessType       pgtype.Text        `json:"business_type"`
	WebsiteUrl         pgtype.Text        `json:"website_url"`
	SupportEmail       pgtype.Text        `json:"support_email"`
	SupportPhone       pgtype.Text        `json:"support_phone"`
	Metadata           []byte             `json:"metadata"`
	FinishedOnboarding pgtype.Bool        `json:"finished_onboarding"`
	CreatedAt          pgtype.Timestamptz `json:"created_at"`
	UpdatedAt          pgtype.Timestamptz `json:"updated_at"`
	DeletedAt          pgtype.Timestamptz `json:"deleted_at"`
}

type ApiKey struct {
	ID          uuid.UUID          `json:"id"`
	WorkspaceID uuid.UUID          `json:"workspace_id"`
	Name        string             `json:"name"`
	KeyHash     string             `json:"key_hash"`
	AccessLevel ApiKeyLevel        `json:"access_level"`
	ExpiresAt   pgtype.Timestamptz `json:"expires_at"`
	LastUsedAt  pgtype.Timestamptz `json:"last_used_at"`
	Metadata    []byte             `json:"metadata"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	DeletedAt   pgtype.Timestamptz `json:"deleted_at"`
}

type Customer struct {
	ID                  uuid.UUID          `json:"id"`
	WorkspaceID         uuid.UUID          `json:"workspace_id"`
	ExternalID          pgtype.Text        `json:"external_id"`
	Email               pgtype.Text        `json:"email"`
	Name                pgtype.Text        `json:"name"`
	Phone               pgtype.Text        `json:"phone"`
	Description         pgtype.Text        `json:"description"`
	Balance             pgtype.Int4        `json:"balance"`
	Currency            pgtype.Text        `json:"currency"`
	DefaultSourceID     pgtype.UUID        `json:"default_source_id"`
	InvoicePrefix       pgtype.Text        `json:"invoice_prefix"`
	NextInvoiceSequence pgtype.Int4        `json:"next_invoice_sequence"`
	TaxExempt           pgtype.Bool        `json:"tax_exempt"`
	TaxIds              []byte             `json:"tax_ids"`
	Metadata            []byte             `json:"metadata"`
	Livemode            pgtype.Bool        `json:"livemode"`
	CreatedAt           pgtype.Timestamptz `json:"created_at"`
	UpdatedAt           pgtype.Timestamptz `json:"updated_at"`
	DeletedAt           pgtype.Timestamptz `json:"deleted_at"`
}

type Network struct {
	ID        uuid.UUID          `json:"id"`
	Name      string             `json:"name"`
	Type      string             `json:"type"`
	ChainID   int32              `json:"chain_id"`
	Active    bool               `json:"active"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	DeletedAt pgtype.Timestamptz `json:"deleted_at"`
}

type Product struct {
	ID              uuid.UUID          `json:"id"`
	WorkspaceID     uuid.UUID          `json:"workspace_id"`
	Name            string             `json:"name"`
	Description     pgtype.Text        `json:"description"`
	ProductType     ProductType        `json:"product_type"`
	IntervalType    NullIntervalType   `json:"interval_type"`
	TermLength      pgtype.Int4        `json:"term_length"`
	PriceInPennies  int32              `json:"price_in_pennies"`
	ImageUrl        pgtype.Text        `json:"image_url"`
	Url             pgtype.Text        `json:"url"`
	MerchantPaidGas bool               `json:"merchant_paid_gas"`
	Active          bool               `json:"active"`
	Metadata        []byte             `json:"metadata"`
	CreatedAt       pgtype.Timestamptz `json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `json:"updated_at"`
	DeletedAt       pgtype.Timestamptz `json:"deleted_at"`
}

type ProductsToken struct {
	ID        uuid.UUID          `json:"id"`
	ProductID uuid.UUID          `json:"product_id"`
	NetworkID uuid.UUID          `json:"network_id"`
	TokenID   uuid.UUID          `json:"token_id"`
	Active    bool               `json:"active"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	DeletedAt pgtype.Timestamptz `json:"deleted_at"`
}

type Token struct {
	ID              uuid.UUID          `json:"id"`
	NetworkID       uuid.UUID          `json:"network_id"`
	GasToken        bool               `json:"gas_token"`
	Name            string             `json:"name"`
	Symbol          string             `json:"symbol"`
	ContractAddress string             `json:"contract_address"`
	Active          bool               `json:"active"`
	CreatedAt       pgtype.Timestamptz `json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `json:"updated_at"`
	DeletedAt       pgtype.Timestamptz `json:"deleted_at"`
}

type User struct {
	ID               uuid.UUID          `json:"id"`
	Auth0ID          string             `json:"auth0_id"`
	Email            string             `json:"email"`
	AccountID        uuid.UUID          `json:"account_id"`
	Role             UserRole           `json:"role"`
	IsAccountOwner   pgtype.Bool        `json:"is_account_owner"`
	FirstName        pgtype.Text        `json:"first_name"`
	LastName         pgtype.Text        `json:"last_name"`
	DisplayName      pgtype.Text        `json:"display_name"`
	PictureUrl       pgtype.Text        `json:"picture_url"`
	Phone            pgtype.Text        `json:"phone"`
	Timezone         pgtype.Text        `json:"timezone"`
	Locale           pgtype.Text        `json:"locale"`
	LastLoginAt      pgtype.Timestamptz `json:"last_login_at"`
	EmailVerified    pgtype.Bool        `json:"email_verified"`
	TwoFactorEnabled pgtype.Bool        `json:"two_factor_enabled"`
	Status           NullUserStatus     `json:"status"`
	Metadata         []byte             `json:"metadata"`
	CreatedAt        pgtype.Timestamptz `json:"created_at"`
	UpdatedAt        pgtype.Timestamptz `json:"updated_at"`
	DeletedAt        pgtype.Timestamptz `json:"deleted_at"`
}

type Workspace struct {
	ID           uuid.UUID          `json:"id"`
	AccountID    uuid.UUID          `json:"account_id"`
	Name         string             `json:"name"`
	Description  pgtype.Text        `json:"description"`
	BusinessName pgtype.Text        `json:"business_name"`
	BusinessType pgtype.Text        `json:"business_type"`
	WebsiteUrl   pgtype.Text        `json:"website_url"`
	SupportEmail pgtype.Text        `json:"support_email"`
	SupportPhone pgtype.Text        `json:"support_phone"`
	Metadata     []byte             `json:"metadata"`
	Livemode     pgtype.Bool        `json:"livemode"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
	DeletedAt    pgtype.Timestamptz `json:"deleted_at"`
}
