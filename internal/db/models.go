// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type AccountType string

const (
	AccountTypeAdmin    AccountType = "admin"
	AccountTypeMerchant AccountType = "merchant"
)

func (e *AccountType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AccountType(s)
	case string:
		*e = AccountType(s)
	default:
		return fmt.Errorf("unsupported scan type for AccountType: %T", src)
	}
	return nil
}

type NullAccountType struct {
	AccountType AccountType `json:"account_type"`
	Valid       bool        `json:"valid"` // Valid is true if AccountType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAccountType) Scan(value interface{}) error {
	if value == nil {
		ns.AccountType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AccountType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAccountType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AccountType), nil
}

type ApiKeyLevel string

const (
	ApiKeyLevelRead  ApiKeyLevel = "read"
	ApiKeyLevelWrite ApiKeyLevel = "write"
	ApiKeyLevelAdmin ApiKeyLevel = "admin"
)

func (e *ApiKeyLevel) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ApiKeyLevel(s)
	case string:
		*e = ApiKeyLevel(s)
	default:
		return fmt.Errorf("unsupported scan type for ApiKeyLevel: %T", src)
	}
	return nil
}

type NullApiKeyLevel struct {
	ApiKeyLevel ApiKeyLevel `json:"api_key_level"`
	Valid       bool        `json:"valid"` // Valid is true if ApiKeyLevel is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullApiKeyLevel) Scan(value interface{}) error {
	if value == nil {
		ns.ApiKeyLevel, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ApiKeyLevel.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullApiKeyLevel) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ApiKeyLevel), nil
}

type CircleNetworkType string

const (
	CircleNetworkTypeARB             CircleNetworkType = "ARB"
	CircleNetworkTypeARBSEPOLIA      CircleNetworkType = "ARB-SEPOLIA"
	CircleNetworkTypeETH             CircleNetworkType = "ETH"
	CircleNetworkTypeETHSEPOLIA      CircleNetworkType = "ETH-SEPOLIA"
	CircleNetworkTypeMATIC           CircleNetworkType = "MATIC"
	CircleNetworkTypeMATICAMOY       CircleNetworkType = "MATIC-AMOY"
	CircleNetworkTypeBASE            CircleNetworkType = "BASE"
	CircleNetworkTypeBASESEPOLIA     CircleNetworkType = "BASE-SEPOLIA"
	CircleNetworkTypeUNICHAIN        CircleNetworkType = "UNICHAIN"
	CircleNetworkTypeUNICHAINSEPOLIA CircleNetworkType = "UNICHAIN-SEPOLIA"
	CircleNetworkTypeSOL             CircleNetworkType = "SOL"
	CircleNetworkTypeSOLDEVNET       CircleNetworkType = "SOL-DEVNET"
)

func (e *CircleNetworkType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CircleNetworkType(s)
	case string:
		*e = CircleNetworkType(s)
	default:
		return fmt.Errorf("unsupported scan type for CircleNetworkType: %T", src)
	}
	return nil
}

type NullCircleNetworkType struct {
	CircleNetworkType CircleNetworkType `json:"circle_network_type"`
	Valid             bool              `json:"valid"` // Valid is true if CircleNetworkType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCircleNetworkType) Scan(value interface{}) error {
	if value == nil {
		ns.CircleNetworkType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CircleNetworkType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCircleNetworkType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CircleNetworkType), nil
}

type Currency string

const (
	CurrencyUSD Currency = "USD"
	CurrencyEUR Currency = "EUR"
)

func (e *Currency) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Currency(s)
	case string:
		*e = Currency(s)
	default:
		return fmt.Errorf("unsupported scan type for Currency: %T", src)
	}
	return nil
}

type NullCurrency struct {
	Currency Currency `json:"currency"`
	Valid    bool     `json:"valid"` // Valid is true if Currency is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCurrency) Scan(value interface{}) error {
	if value == nil {
		ns.Currency, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Currency.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCurrency) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Currency), nil
}

type IntervalType string

const (
	IntervalType1min  IntervalType = "1min"
	IntervalType5mins IntervalType = "5mins"
	IntervalTypeDaily IntervalType = "daily"
	IntervalTypeWeek  IntervalType = "week"
	IntervalTypeMonth IntervalType = "month"
	IntervalTypeYear  IntervalType = "year"
)

func (e *IntervalType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = IntervalType(s)
	case string:
		*e = IntervalType(s)
	default:
		return fmt.Errorf("unsupported scan type for IntervalType: %T", src)
	}
	return nil
}

type NullIntervalType struct {
	IntervalType IntervalType `json:"interval_type"`
	Valid        bool         `json:"valid"` // Valid is true if IntervalType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullIntervalType) Scan(value interface{}) error {
	if value == nil {
		ns.IntervalType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.IntervalType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullIntervalType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.IntervalType), nil
}

type NetworkType string

const (
	NetworkTypeEvm      NetworkType = "evm"
	NetworkTypeSolana   NetworkType = "solana"
	NetworkTypeCosmos   NetworkType = "cosmos"
	NetworkTypeBitcoin  NetworkType = "bitcoin"
	NetworkTypePolkadot NetworkType = "polkadot"
)

func (e *NetworkType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = NetworkType(s)
	case string:
		*e = NetworkType(s)
	default:
		return fmt.Errorf("unsupported scan type for NetworkType: %T", src)
	}
	return nil
}

type NullNetworkType struct {
	NetworkType NetworkType `json:"network_type"`
	Valid       bool        `json:"valid"` // Valid is true if NetworkType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullNetworkType) Scan(value interface{}) error {
	if value == nil {
		ns.NetworkType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.NetworkType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullNetworkType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.NetworkType), nil
}

type ProductType string

const (
	ProductTypeRecurring ProductType = "recurring"
	ProductTypeOneOff    ProductType = "one_off"
)

func (e *ProductType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProductType(s)
	case string:
		*e = ProductType(s)
	default:
		return fmt.Errorf("unsupported scan type for ProductType: %T", src)
	}
	return nil
}

type NullProductType struct {
	ProductType ProductType `json:"product_type"`
	Valid       bool        `json:"valid"` // Valid is true if ProductType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProductType) Scan(value interface{}) error {
	if value == nil {
		ns.ProductType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProductType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProductType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ProductType), nil
}

type SubscriptionEventType string

const (
	SubscriptionEventTypeCreated                 SubscriptionEventType = "created"
	SubscriptionEventTypeRedeemed                SubscriptionEventType = "redeemed"
	SubscriptionEventTypeRenewed                 SubscriptionEventType = "renewed"
	SubscriptionEventTypeCanceled                SubscriptionEventType = "canceled"
	SubscriptionEventTypeExpired                 SubscriptionEventType = "expired"
	SubscriptionEventTypeCompleted               SubscriptionEventType = "completed"
	SubscriptionEventTypeFailed                  SubscriptionEventType = "failed"
	SubscriptionEventTypeFailedValidation        SubscriptionEventType = "failed_validation"
	SubscriptionEventTypeFailedCustomerCreation  SubscriptionEventType = "failed_customer_creation"
	SubscriptionEventTypeFailedWalletCreation    SubscriptionEventType = "failed_wallet_creation"
	SubscriptionEventTypeFailedDelegationStorage SubscriptionEventType = "failed_delegation_storage"
	SubscriptionEventTypeFailedSubscriptionDb    SubscriptionEventType = "failed_subscription_db"
	SubscriptionEventTypeFailedRedemption        SubscriptionEventType = "failed_redemption"
	SubscriptionEventTypeFailedTransaction       SubscriptionEventType = "failed_transaction"
	SubscriptionEventTypeFailedDuplicate         SubscriptionEventType = "failed_duplicate"
)

func (e *SubscriptionEventType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SubscriptionEventType(s)
	case string:
		*e = SubscriptionEventType(s)
	default:
		return fmt.Errorf("unsupported scan type for SubscriptionEventType: %T", src)
	}
	return nil
}

type NullSubscriptionEventType struct {
	SubscriptionEventType SubscriptionEventType `json:"subscription_event_type"`
	Valid                 bool                  `json:"valid"` // Valid is true if SubscriptionEventType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSubscriptionEventType) Scan(value interface{}) error {
	if value == nil {
		ns.SubscriptionEventType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SubscriptionEventType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSubscriptionEventType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SubscriptionEventType), nil
}

type SubscriptionStatus string

const (
	SubscriptionStatusActive    SubscriptionStatus = "active"
	SubscriptionStatusCanceled  SubscriptionStatus = "canceled"
	SubscriptionStatusExpired   SubscriptionStatus = "expired"
	SubscriptionStatusOverdue   SubscriptionStatus = "overdue"
	SubscriptionStatusSuspended SubscriptionStatus = "suspended"
	SubscriptionStatusFailed    SubscriptionStatus = "failed"
	SubscriptionStatusCompleted SubscriptionStatus = "completed"
)

func (e *SubscriptionStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SubscriptionStatus(s)
	case string:
		*e = SubscriptionStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for SubscriptionStatus: %T", src)
	}
	return nil
}

type NullSubscriptionStatus struct {
	SubscriptionStatus SubscriptionStatus `json:"subscription_status"`
	Valid              bool               `json:"valid"` // Valid is true if SubscriptionStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSubscriptionStatus) Scan(value interface{}) error {
	if value == nil {
		ns.SubscriptionStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SubscriptionStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSubscriptionStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SubscriptionStatus), nil
}

type UserRole string

const (
	UserRoleAdmin     UserRole = "admin"
	UserRoleSupport   UserRole = "support"
	UserRoleDeveloper UserRole = "developer"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole `json:"user_role"`
	Valid    bool     `json:"valid"` // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type UserStatus string

const (
	UserStatusActive    UserStatus = "active"
	UserStatusInactive  UserStatus = "inactive"
	UserStatusSuspended UserStatus = "suspended"
	UserStatusPending   UserStatus = "pending"
)

func (e *UserStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserStatus(s)
	case string:
		*e = UserStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for UserStatus: %T", src)
	}
	return nil
}

type NullUserStatus struct {
	UserStatus UserStatus `json:"user_status"`
	Valid      bool       `json:"valid"` // Valid is true if UserStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserStatus) Scan(value interface{}) error {
	if value == nil {
		ns.UserStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserStatus), nil
}

type WalletType string

const (
	WalletTypeWallet       WalletType = "wallet"
	WalletTypeCircleWallet WalletType = "circle_wallet"
)

func (e *WalletType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = WalletType(s)
	case string:
		*e = WalletType(s)
	default:
		return fmt.Errorf("unsupported scan type for WalletType: %T", src)
	}
	return nil
}

type NullWalletType struct {
	WalletType WalletType `json:"wallet_type"`
	Valid      bool       `json:"valid"` // Valid is true if WalletType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullWalletType) Scan(value interface{}) error {
	if value == nil {
		ns.WalletType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.WalletType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullWalletType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.WalletType), nil
}

type Account struct {
	ID                 uuid.UUID          `json:"id"`
	Name               string             `json:"name"`
	AccountType        AccountType        `json:"account_type"`
	OwnerID            pgtype.UUID        `json:"owner_id"`
	BusinessName       pgtype.Text        `json:"business_name"`
	BusinessType       pgtype.Text        `json:"business_type"`
	WebsiteUrl         pgtype.Text        `json:"website_url"`
	SupportEmail       pgtype.Text        `json:"support_email"`
	SupportPhone       pgtype.Text        `json:"support_phone"`
	Metadata           []byte             `json:"metadata"`
	FinishedOnboarding pgtype.Bool        `json:"finished_onboarding"`
	CreatedAt          pgtype.Timestamptz `json:"created_at"`
	UpdatedAt          pgtype.Timestamptz `json:"updated_at"`
	DeletedAt          pgtype.Timestamptz `json:"deleted_at"`
}

type ApiKey struct {
	ID          uuid.UUID          `json:"id"`
	WorkspaceID uuid.UUID          `json:"workspace_id"`
	Name        string             `json:"name"`
	KeyHash     string             `json:"key_hash"`
	AccessLevel ApiKeyLevel        `json:"access_level"`
	ExpiresAt   pgtype.Timestamptz `json:"expires_at"`
	LastUsedAt  pgtype.Timestamptz `json:"last_used_at"`
	Metadata    []byte             `json:"metadata"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	DeletedAt   pgtype.Timestamptz `json:"deleted_at"`
}

type CircleUser struct {
	ID                     uuid.UUID          `json:"id"`
	WorkspaceID            uuid.UUID          `json:"workspace_id"`
	CircleCreateDate       pgtype.Timestamptz `json:"circle_create_date"`
	PinStatus              string             `json:"pin_status"`
	Status                 string             `json:"status"`
	SecurityQuestionStatus string             `json:"security_question_status"`
	CreatedAt              pgtype.Timestamptz `json:"created_at"`
	UpdatedAt              pgtype.Timestamptz `json:"updated_at"`
}

type CircleWallet struct {
	ID             uuid.UUID          `json:"id"`
	WalletID       uuid.UUID          `json:"wallet_id"`
	CircleUserID   uuid.UUID          `json:"circle_user_id"`
	CircleWalletID string             `json:"circle_wallet_id"`
	ChainID        int32              `json:"chain_id"`
	State          string             `json:"state"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
	DeletedAt      pgtype.Timestamptz `json:"deleted_at"`
}

type Customer struct {
	ID                  uuid.UUID          `json:"id"`
	WorkspaceID         uuid.UUID          `json:"workspace_id"`
	ExternalID          pgtype.Text        `json:"external_id"`
	Email               pgtype.Text        `json:"email"`
	Name                pgtype.Text        `json:"name"`
	Phone               pgtype.Text        `json:"phone"`
	Description         pgtype.Text        `json:"description"`
	BalanceInPennies    pgtype.Int4        `json:"balance_in_pennies"`
	Currency            pgtype.Text        `json:"currency"`
	DefaultSourceID     pgtype.UUID        `json:"default_source_id"`
	InvoicePrefix       pgtype.Text        `json:"invoice_prefix"`
	NextInvoiceSequence pgtype.Int4        `json:"next_invoice_sequence"`
	TaxExempt           pgtype.Bool        `json:"tax_exempt"`
	TaxIds              []byte             `json:"tax_ids"`
	Metadata            []byte             `json:"metadata"`
	Livemode            pgtype.Bool        `json:"livemode"`
	CreatedAt           pgtype.Timestamptz `json:"created_at"`
	UpdatedAt           pgtype.Timestamptz `json:"updated_at"`
	DeletedAt           pgtype.Timestamptz `json:"deleted_at"`
}

type CustomerWallet struct {
	ID            uuid.UUID          `json:"id"`
	CustomerID    uuid.UUID          `json:"customer_id"`
	WalletAddress string             `json:"wallet_address"`
	NetworkType   NetworkType        `json:"network_type"`
	Nickname      pgtype.Text        `json:"nickname"`
	Ens           pgtype.Text        `json:"ens"`
	IsPrimary     pgtype.Bool        `json:"is_primary"`
	Verified      pgtype.Bool        `json:"verified"`
	LastUsedAt    pgtype.Timestamptz `json:"last_used_at"`
	Metadata      []byte             `json:"metadata"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `json:"updated_at"`
	DeletedAt     pgtype.Timestamptz `json:"deleted_at"`
}

type DelegationDatum struct {
	ID        uuid.UUID          `json:"id"`
	Delegate  string             `json:"delegate"`
	Delegator string             `json:"delegator"`
	Authority string             `json:"authority"`
	Caveats   json.RawMessage    `json:"caveats"`
	Salt      string             `json:"salt"`
	Signature string             `json:"signature"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	DeletedAt pgtype.Timestamptz `json:"deleted_at"`
}

type FailedSubscriptionAttempt struct {
	ID                  uuid.UUID             `json:"id"`
	CustomerID          pgtype.UUID           `json:"customer_id"`
	ProductID           uuid.UUID             `json:"product_id"`
	ProductTokenID      uuid.UUID             `json:"product_token_id"`
	CustomerWalletID    pgtype.UUID           `json:"customer_wallet_id"`
	WalletAddress       string                `json:"wallet_address"`
	ErrorType           SubscriptionEventType `json:"error_type"`
	ErrorMessage        string                `json:"error_message"`
	ErrorDetails        []byte                `json:"error_details"`
	DelegationSignature pgtype.Text           `json:"delegation_signature"`
	OccurredAt          pgtype.Timestamptz    `json:"occurred_at"`
	Metadata            []byte                `json:"metadata"`
	CreatedAt           pgtype.Timestamptz    `json:"created_at"`
	UpdatedAt           pgtype.Timestamptz    `json:"updated_at"`
}

type Network struct {
	ID                uuid.UUID          `json:"id"`
	Name              string             `json:"name"`
	Type              string             `json:"type"`
	NetworkType       NetworkType        `json:"network_type"`
	CircleNetworkType CircleNetworkType  `json:"circle_network_type"`
	BlockExplorerUrl  pgtype.Text        `json:"block_explorer_url"`
	ChainID           int32              `json:"chain_id"`
	IsTestnet         bool               `json:"is_testnet"`
	Active            bool               `json:"active"`
	CreatedAt         pgtype.Timestamptz `json:"created_at"`
	UpdatedAt         pgtype.Timestamptz `json:"updated_at"`
	DeletedAt         pgtype.Timestamptz `json:"deleted_at"`
}

type Product struct {
	ID              uuid.UUID          `json:"id"`
	WorkspaceID     uuid.UUID          `json:"workspace_id"`
	WalletID        uuid.UUID          `json:"wallet_id"`
	Name            string             `json:"name"`
	Description     pgtype.Text        `json:"description"`
	ProductType     ProductType        `json:"product_type"`
	IntervalType    NullIntervalType   `json:"interval_type"`
	TermLength      pgtype.Int4        `json:"term_length"`
	PriceInPennies  int32              `json:"price_in_pennies"`
	Currency        Currency           `json:"currency"`
	ImageUrl        pgtype.Text        `json:"image_url"`
	Url             pgtype.Text        `json:"url"`
	MerchantPaidGas bool               `json:"merchant_paid_gas"`
	Active          bool               `json:"active"`
	Metadata        []byte             `json:"metadata"`
	CreatedAt       pgtype.Timestamptz `json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `json:"updated_at"`
	DeletedAt       pgtype.Timestamptz `json:"deleted_at"`
}

type ProductsToken struct {
	ID        uuid.UUID          `json:"id"`
	ProductID uuid.UUID          `json:"product_id"`
	NetworkID uuid.UUID          `json:"network_id"`
	TokenID   uuid.UUID          `json:"token_id"`
	Active    bool               `json:"active"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	DeletedAt pgtype.Timestamptz `json:"deleted_at"`
}

type Subscription struct {
	ID                    uuid.UUID          `json:"id"`
	CustomerID            uuid.UUID          `json:"customer_id"`
	ProductID             uuid.UUID          `json:"product_id"`
	ProductTokenID        uuid.UUID          `json:"product_token_id"`
	TokenAmount           pgtype.Numeric     `json:"token_amount"`
	ProductPriceInPennies pgtype.Numeric     `json:"product_price_in_pennies"`
	Currency              Currency           `json:"currency"`
	IntervalType          IntervalType       `json:"interval_type"`
	TermLength            int32              `json:"term_length"`
	DelegationID          uuid.UUID          `json:"delegation_id"`
	CustomerWalletID      pgtype.UUID        `json:"customer_wallet_id"`
	Status                SubscriptionStatus `json:"status"`
	CurrentPeriodStart    pgtype.Timestamptz `json:"current_period_start"`
	CurrentPeriodEnd      pgtype.Timestamptz `json:"current_period_end"`
	NextRedemptionDate    pgtype.Timestamptz `json:"next_redemption_date"`
	TotalRedemptions      int32              `json:"total_redemptions"`
	TotalAmountInCents    int32              `json:"total_amount_in_cents"`
	Metadata              []byte             `json:"metadata"`
	CreatedAt             pgtype.Timestamptz `json:"created_at"`
	UpdatedAt             pgtype.Timestamptz `json:"updated_at"`
	DeletedAt             pgtype.Timestamptz `json:"deleted_at"`
}

type SubscriptionEvent struct {
	ID              uuid.UUID             `json:"id"`
	SubscriptionID  uuid.UUID             `json:"subscription_id"`
	EventType       SubscriptionEventType `json:"event_type"`
	TransactionHash pgtype.Text           `json:"transaction_hash"`
	AmountInCents   int32                 `json:"amount_in_cents"`
	OccurredAt      pgtype.Timestamptz    `json:"occurred_at"`
	ErrorMessage    pgtype.Text           `json:"error_message"`
	Metadata        []byte                `json:"metadata"`
	CreatedAt       pgtype.Timestamptz    `json:"created_at"`
	UpdatedAt       pgtype.Timestamptz    `json:"updated_at"`
}

type Token struct {
	ID              uuid.UUID          `json:"id"`
	NetworkID       uuid.UUID          `json:"network_id"`
	GasToken        bool               `json:"gas_token"`
	Name            string             `json:"name"`
	Symbol          string             `json:"symbol"`
	ContractAddress string             `json:"contract_address"`
	Active          bool               `json:"active"`
	Decimals        int32              `json:"decimals"`
	CreatedAt       pgtype.Timestamptz `json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `json:"updated_at"`
	DeletedAt       pgtype.Timestamptz `json:"deleted_at"`
}

type User struct {
	ID               uuid.UUID          `json:"id"`
	SupabaseID       string             `json:"supabase_id"`
	Email            string             `json:"email"`
	AccountID        uuid.UUID          `json:"account_id"`
	Role             UserRole           `json:"role"`
	IsAccountOwner   pgtype.Bool        `json:"is_account_owner"`
	FirstName        pgtype.Text        `json:"first_name"`
	LastName         pgtype.Text        `json:"last_name"`
	AddressLine1     pgtype.Text        `json:"address_line_1"`
	AddressLine2     pgtype.Text        `json:"address_line_2"`
	City             pgtype.Text        `json:"city"`
	StateRegion      pgtype.Text        `json:"state_region"`
	PostalCode       pgtype.Text        `json:"postal_code"`
	Country          pgtype.Text        `json:"country"`
	DisplayName      pgtype.Text        `json:"display_name"`
	PictureUrl       pgtype.Text        `json:"picture_url"`
	Phone            pgtype.Text        `json:"phone"`
	Timezone         pgtype.Text        `json:"timezone"`
	Locale           pgtype.Text        `json:"locale"`
	LastLoginAt      pgtype.Timestamptz `json:"last_login_at"`
	EmailVerified    pgtype.Bool        `json:"email_verified"`
	TwoFactorEnabled pgtype.Bool        `json:"two_factor_enabled"`
	Status           NullUserStatus     `json:"status"`
	Metadata         []byte             `json:"metadata"`
	CreatedAt        pgtype.Timestamptz `json:"created_at"`
	UpdatedAt        pgtype.Timestamptz `json:"updated_at"`
	DeletedAt        pgtype.Timestamptz `json:"deleted_at"`
}

type Wallet struct {
	ID            uuid.UUID          `json:"id"`
	WorkspaceID   uuid.UUID          `json:"workspace_id"`
	WalletType    string             `json:"wallet_type"`
	WalletAddress string             `json:"wallet_address"`
	NetworkType   NetworkType        `json:"network_type"`
	NetworkID     pgtype.UUID        `json:"network_id"`
	Nickname      pgtype.Text        `json:"nickname"`
	Ens           pgtype.Text        `json:"ens"`
	IsPrimary     pgtype.Bool        `json:"is_primary"`
	Verified      pgtype.Bool        `json:"verified"`
	LastUsedAt    pgtype.Timestamptz `json:"last_used_at"`
	Metadata      []byte             `json:"metadata"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `json:"updated_at"`
	DeletedAt     pgtype.Timestamptz `json:"deleted_at"`
}

type Workspace struct {
	ID           uuid.UUID          `json:"id"`
	AccountID    uuid.UUID          `json:"account_id"`
	Name         string             `json:"name"`
	Description  pgtype.Text        `json:"description"`
	BusinessName pgtype.Text        `json:"business_name"`
	BusinessType pgtype.Text        `json:"business_type"`
	WebsiteUrl   pgtype.Text        `json:"website_url"`
	SupportEmail pgtype.Text        `json:"support_email"`
	SupportPhone pgtype.Text        `json:"support_phone"`
	Metadata     []byte             `json:"metadata"`
	Livemode     pgtype.Bool        `json:"livemode"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
	DeletedAt    pgtype.Timestamptz `json:"deleted_at"`
}
