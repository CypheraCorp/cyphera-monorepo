// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type ApiKeyLevel string

const (
	ApiKeyLevelRead  ApiKeyLevel = "read"
	ApiKeyLevelWrite ApiKeyLevel = "write"
	ApiKeyLevelAdmin ApiKeyLevel = "admin"
)

func (e *ApiKeyLevel) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ApiKeyLevel(s)
	case string:
		*e = ApiKeyLevel(s)
	default:
		return fmt.Errorf("unsupported scan type for ApiKeyLevel: %T", src)
	}
	return nil
}

type NullApiKeyLevel struct {
	ApiKeyLevel ApiKeyLevel `json:"api_key_level"`
	Valid       bool        `json:"valid"` // Valid is true if ApiKeyLevel is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullApiKeyLevel) Scan(value interface{}) error {
	if value == nil {
		ns.ApiKeyLevel, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ApiKeyLevel.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullApiKeyLevel) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ApiKeyLevel), nil
}

type UserRole string

const (
	UserRoleAdmin   UserRole = "admin"
	UserRoleAccount UserRole = "account"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole `json:"user_role"`
	Valid    bool     `json:"valid"` // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type Account struct {
	ID           uuid.UUID          `json:"id"`
	UserID       uuid.UUID          `json:"user_id"`
	Name         string             `json:"name"`
	Description  pgtype.Text        `json:"description"`
	BusinessName pgtype.Text        `json:"business_name"`
	BusinessType pgtype.Text        `json:"business_type"`
	WebsiteUrl   pgtype.Text        `json:"website_url"`
	SupportEmail pgtype.Text        `json:"support_email"`
	SupportPhone pgtype.Text        `json:"support_phone"`
	Metadata     []byte             `json:"metadata"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
	DeletedAt    pgtype.Timestamptz `json:"deleted_at"`
	Livemode     pgtype.Bool        `json:"livemode"`
}

type ApiKey struct {
	ID         uuid.UUID          `json:"id"`
	AccountID  pgtype.UUID        `json:"account_id"`
	Name       string             `json:"name"`
	KeyHash    string             `json:"key_hash"`
	Level      ApiKeyLevel        `json:"level"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	DeletedAt  pgtype.Timestamptz `json:"deleted_at"`
	ExpiresAt  pgtype.Timestamptz `json:"expires_at"`
	LastUsedAt pgtype.Timestamptz `json:"last_used_at"`
	IsActive   pgtype.Bool        `json:"is_active"`
	Metadata   []byte             `json:"metadata"`
	Livemode   pgtype.Bool        `json:"livemode"`
}

type Customer struct {
	ID                  uuid.UUID          `json:"id"`
	AccountID           uuid.UUID          `json:"account_id"`
	Email               string             `json:"email"`
	Name                pgtype.Text        `json:"name"`
	Description         pgtype.Text        `json:"description"`
	Metadata            []byte             `json:"metadata"`
	CreatedAt           pgtype.Timestamptz `json:"created_at"`
	UpdatedAt           pgtype.Timestamptz `json:"updated_at"`
	DeletedAt           pgtype.Timestamptz `json:"deleted_at"`
	Balance             pgtype.Int4        `json:"balance"`
	Currency            pgtype.Text        `json:"currency"`
	DefaultSourceID     pgtype.UUID        `json:"default_source_id"`
	InvoicePrefix       pgtype.Text        `json:"invoice_prefix"`
	NextInvoiceSequence pgtype.Int4        `json:"next_invoice_sequence"`
	TaxExempt           pgtype.Text        `json:"tax_exempt"`
	TaxIds              []byte             `json:"tax_ids"`
	Livemode            pgtype.Bool        `json:"livemode"`
}

type User struct {
	ID         uuid.UUID          `json:"id"`
	Auth0ID    string             `json:"auth0_id"`
	Email      string             `json:"email"`
	Role       UserRole           `json:"role"`
	Name       pgtype.Text        `json:"name"`
	PictureUrl pgtype.Text        `json:"picture_url"`
	Metadata   []byte             `json:"metadata"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
	DeletedAt  pgtype.Timestamptz `json:"deleted_at"`
}
