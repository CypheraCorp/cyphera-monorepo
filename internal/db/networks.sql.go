// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: networks.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const activateNetwork = `-- name: ActivateNetwork :one
UPDATE networks
SET 
    active = true,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, name, type, network_type, circle_network_type, block_explorer_url, chain_id, is_testnet, active, logo_url, display_name, chain_namespace, base_fee_multiplier, priority_fee_multiplier, deployment_gas_limit, token_transfer_gas_limit, supports_eip1559, gas_oracle_url, gas_refresh_interval_ms, gas_priority_levels, average_block_time_ms, peak_hours_multiplier, created_at, updated_at, deleted_at
`

func (q *Queries) ActivateNetwork(ctx context.Context, id uuid.UUID) (Network, error) {
	row := q.db.QueryRow(ctx, activateNetwork, id)
	var i Network
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.NetworkType,
		&i.CircleNetworkType,
		&i.BlockExplorerUrl,
		&i.ChainID,
		&i.IsTestnet,
		&i.Active,
		&i.LogoUrl,
		&i.DisplayName,
		&i.ChainNamespace,
		&i.BaseFeeMultiplier,
		&i.PriorityFeeMultiplier,
		&i.DeploymentGasLimit,
		&i.TokenTransferGasLimit,
		&i.SupportsEip1559,
		&i.GasOracleUrl,
		&i.GasRefreshIntervalMs,
		&i.GasPriorityLevels,
		&i.AverageBlockTimeMs,
		&i.PeakHoursMultiplier,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createNetwork = `-- name: CreateNetwork :one
INSERT INTO networks (
    name,
    type,
    network_type,
    circle_network_type,
    block_explorer_url,
    chain_id,
    is_testnet,
    active,
    logo_url,
    display_name,
    chain_namespace,
    base_fee_multiplier,
    priority_fee_multiplier,
    deployment_gas_limit,
    token_transfer_gas_limit,
    supports_eip1559,
    gas_oracle_url,
    gas_refresh_interval_ms,
    gas_priority_levels,
    average_block_time_ms,
    peak_hours_multiplier
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21
)
RETURNING id, name, type, network_type, circle_network_type, block_explorer_url, chain_id, is_testnet, active, logo_url, display_name, chain_namespace, base_fee_multiplier, priority_fee_multiplier, deployment_gas_limit, token_transfer_gas_limit, supports_eip1559, gas_oracle_url, gas_refresh_interval_ms, gas_priority_levels, average_block_time_ms, peak_hours_multiplier, created_at, updated_at, deleted_at
`

type CreateNetworkParams struct {
	Name                  string            `json:"name"`
	Type                  string            `json:"type"`
	NetworkType           NetworkType       `json:"network_type"`
	CircleNetworkType     CircleNetworkType `json:"circle_network_type"`
	BlockExplorerUrl      pgtype.Text       `json:"block_explorer_url"`
	ChainID               int32             `json:"chain_id"`
	IsTestnet             bool              `json:"is_testnet"`
	Active                bool              `json:"active"`
	LogoUrl               pgtype.Text       `json:"logo_url"`
	DisplayName           pgtype.Text       `json:"display_name"`
	ChainNamespace        pgtype.Text       `json:"chain_namespace"`
	BaseFeeMultiplier     pgtype.Numeric    `json:"base_fee_multiplier"`
	PriorityFeeMultiplier pgtype.Numeric    `json:"priority_fee_multiplier"`
	DeploymentGasLimit    pgtype.Text       `json:"deployment_gas_limit"`
	TokenTransferGasLimit pgtype.Text       `json:"token_transfer_gas_limit"`
	SupportsEip1559       pgtype.Bool       `json:"supports_eip1559"`
	GasOracleUrl          pgtype.Text       `json:"gas_oracle_url"`
	GasRefreshIntervalMs  pgtype.Int4       `json:"gas_refresh_interval_ms"`
	GasPriorityLevels     []byte            `json:"gas_priority_levels"`
	AverageBlockTimeMs    pgtype.Int4       `json:"average_block_time_ms"`
	PeakHoursMultiplier   pgtype.Numeric    `json:"peak_hours_multiplier"`
}

func (q *Queries) CreateNetwork(ctx context.Context, arg CreateNetworkParams) (Network, error) {
	row := q.db.QueryRow(ctx, createNetwork,
		arg.Name,
		arg.Type,
		arg.NetworkType,
		arg.CircleNetworkType,
		arg.BlockExplorerUrl,
		arg.ChainID,
		arg.IsTestnet,
		arg.Active,
		arg.LogoUrl,
		arg.DisplayName,
		arg.ChainNamespace,
		arg.BaseFeeMultiplier,
		arg.PriorityFeeMultiplier,
		arg.DeploymentGasLimit,
		arg.TokenTransferGasLimit,
		arg.SupportsEip1559,
		arg.GasOracleUrl,
		arg.GasRefreshIntervalMs,
		arg.GasPriorityLevels,
		arg.AverageBlockTimeMs,
		arg.PeakHoursMultiplier,
	)
	var i Network
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.NetworkType,
		&i.CircleNetworkType,
		&i.BlockExplorerUrl,
		&i.ChainID,
		&i.IsTestnet,
		&i.Active,
		&i.LogoUrl,
		&i.DisplayName,
		&i.ChainNamespace,
		&i.BaseFeeMultiplier,
		&i.PriorityFeeMultiplier,
		&i.DeploymentGasLimit,
		&i.TokenTransferGasLimit,
		&i.SupportsEip1559,
		&i.GasOracleUrl,
		&i.GasRefreshIntervalMs,
		&i.GasPriorityLevels,
		&i.AverageBlockTimeMs,
		&i.PeakHoursMultiplier,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deactivateNetwork = `-- name: DeactivateNetwork :one
UPDATE networks
SET 
    active = false,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, name, type, network_type, circle_network_type, block_explorer_url, chain_id, is_testnet, active, logo_url, display_name, chain_namespace, base_fee_multiplier, priority_fee_multiplier, deployment_gas_limit, token_transfer_gas_limit, supports_eip1559, gas_oracle_url, gas_refresh_interval_ms, gas_priority_levels, average_block_time_ms, peak_hours_multiplier, created_at, updated_at, deleted_at
`

func (q *Queries) DeactivateNetwork(ctx context.Context, id uuid.UUID) (Network, error) {
	row := q.db.QueryRow(ctx, deactivateNetwork, id)
	var i Network
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.NetworkType,
		&i.CircleNetworkType,
		&i.BlockExplorerUrl,
		&i.ChainID,
		&i.IsTestnet,
		&i.Active,
		&i.LogoUrl,
		&i.DisplayName,
		&i.ChainNamespace,
		&i.BaseFeeMultiplier,
		&i.PriorityFeeMultiplier,
		&i.DeploymentGasLimit,
		&i.TokenTransferGasLimit,
		&i.SupportsEip1559,
		&i.GasOracleUrl,
		&i.GasRefreshIntervalMs,
		&i.GasPriorityLevels,
		&i.AverageBlockTimeMs,
		&i.PeakHoursMultiplier,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteNetwork = `-- name: DeleteNetwork :exec
UPDATE networks
SET deleted_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) DeleteNetwork(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteNetwork, id)
	return err
}

const getNetwork = `-- name: GetNetwork :one
SELECT id, name, type, network_type, circle_network_type, block_explorer_url, chain_id, is_testnet, active, logo_url, display_name, chain_namespace, base_fee_multiplier, priority_fee_multiplier, deployment_gas_limit, token_transfer_gas_limit, supports_eip1559, gas_oracle_url, gas_refresh_interval_ms, gas_priority_levels, average_block_time_ms, peak_hours_multiplier, created_at, updated_at, deleted_at FROM networks
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetNetwork(ctx context.Context, id uuid.UUID) (Network, error) {
	row := q.db.QueryRow(ctx, getNetwork, id)
	var i Network
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.NetworkType,
		&i.CircleNetworkType,
		&i.BlockExplorerUrl,
		&i.ChainID,
		&i.IsTestnet,
		&i.Active,
		&i.LogoUrl,
		&i.DisplayName,
		&i.ChainNamespace,
		&i.BaseFeeMultiplier,
		&i.PriorityFeeMultiplier,
		&i.DeploymentGasLimit,
		&i.TokenTransferGasLimit,
		&i.SupportsEip1559,
		&i.GasOracleUrl,
		&i.GasRefreshIntervalMs,
		&i.GasPriorityLevels,
		&i.AverageBlockTimeMs,
		&i.PeakHoursMultiplier,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getNetworkByChainID = `-- name: GetNetworkByChainID :one
SELECT id, name, type, network_type, circle_network_type, block_explorer_url, chain_id, is_testnet, active, logo_url, display_name, chain_namespace, base_fee_multiplier, priority_fee_multiplier, deployment_gas_limit, token_transfer_gas_limit, supports_eip1559, gas_oracle_url, gas_refresh_interval_ms, gas_priority_levels, average_block_time_ms, peak_hours_multiplier, created_at, updated_at, deleted_at FROM networks
WHERE chain_id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetNetworkByChainID(ctx context.Context, chainID int32) (Network, error) {
	row := q.db.QueryRow(ctx, getNetworkByChainID, chainID)
	var i Network
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.NetworkType,
		&i.CircleNetworkType,
		&i.BlockExplorerUrl,
		&i.ChainID,
		&i.IsTestnet,
		&i.Active,
		&i.LogoUrl,
		&i.DisplayName,
		&i.ChainNamespace,
		&i.BaseFeeMultiplier,
		&i.PriorityFeeMultiplier,
		&i.DeploymentGasLimit,
		&i.TokenTransferGasLimit,
		&i.SupportsEip1559,
		&i.GasOracleUrl,
		&i.GasRefreshIntervalMs,
		&i.GasPriorityLevels,
		&i.AverageBlockTimeMs,
		&i.PeakHoursMultiplier,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getNetworkByCircleNetworkType = `-- name: GetNetworkByCircleNetworkType :one
SELECT id, name, type, network_type, circle_network_type, block_explorer_url, chain_id, is_testnet, active, logo_url, display_name, chain_namespace, base_fee_multiplier, priority_fee_multiplier, deployment_gas_limit, token_transfer_gas_limit, supports_eip1559, gas_oracle_url, gas_refresh_interval_ms, gas_priority_levels, average_block_time_ms, peak_hours_multiplier, created_at, updated_at, deleted_at FROM networks
WHERE circle_network_type = $1 AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetNetworkByCircleNetworkType(ctx context.Context, circleNetworkType CircleNetworkType) (Network, error) {
	row := q.db.QueryRow(ctx, getNetworkByCircleNetworkType, circleNetworkType)
	var i Network
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.NetworkType,
		&i.CircleNetworkType,
		&i.BlockExplorerUrl,
		&i.ChainID,
		&i.IsTestnet,
		&i.Active,
		&i.LogoUrl,
		&i.DisplayName,
		&i.ChainNamespace,
		&i.BaseFeeMultiplier,
		&i.PriorityFeeMultiplier,
		&i.DeploymentGasLimit,
		&i.TokenTransferGasLimit,
		&i.SupportsEip1559,
		&i.GasOracleUrl,
		&i.GasRefreshIntervalMs,
		&i.GasPriorityLevels,
		&i.AverageBlockTimeMs,
		&i.PeakHoursMultiplier,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listNetworks = `-- name: ListNetworks :many
SELECT id, name, type, network_type, circle_network_type, block_explorer_url, chain_id, is_testnet, active, logo_url, display_name, chain_namespace, base_fee_multiplier, priority_fee_multiplier, deployment_gas_limit, token_transfer_gas_limit, supports_eip1559, gas_oracle_url, gas_refresh_interval_ms, gas_priority_levels, average_block_time_ms, peak_hours_multiplier, created_at, updated_at, deleted_at FROM networks
WHERE deleted_at IS NULL
    AND CASE WHEN $1::boolean IS NOT NULL THEN is_testnet = $1::boolean ELSE TRUE END
    AND CASE WHEN $2::boolean IS NOT NULL THEN active = $2::boolean ELSE TRUE END
ORDER BY chain_id ASC
`

type ListNetworksParams struct {
	IsTestnet pgtype.Bool `json:"is_testnet"`
	IsActive  pgtype.Bool `json:"is_active"`
}

func (q *Queries) ListNetworks(ctx context.Context, arg ListNetworksParams) ([]Network, error) {
	rows, err := q.db.Query(ctx, listNetworks, arg.IsTestnet, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Network{}
	for rows.Next() {
		var i Network
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.NetworkType,
			&i.CircleNetworkType,
			&i.BlockExplorerUrl,
			&i.ChainID,
			&i.IsTestnet,
			&i.Active,
			&i.LogoUrl,
			&i.DisplayName,
			&i.ChainNamespace,
			&i.BaseFeeMultiplier,
			&i.PriorityFeeMultiplier,
			&i.DeploymentGasLimit,
			&i.TokenTransferGasLimit,
			&i.SupportsEip1559,
			&i.GasOracleUrl,
			&i.GasRefreshIntervalMs,
			&i.GasPriorityLevels,
			&i.AverageBlockTimeMs,
			&i.PeakHoursMultiplier,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNetwork = `-- name: UpdateNetwork :one
UPDATE networks
SET
    name = COALESCE($2, name),
    type = COALESCE($3, type),
    network_type = COALESCE($4, network_type),
    circle_network_type = COALESCE($5, circle_network_type),
    block_explorer_url = COALESCE($6, block_explorer_url),
    chain_id = COALESCE($7, chain_id),
    is_testnet = COALESCE($8, is_testnet),
    active = COALESCE($9, active),
    logo_url = COALESCE($10, logo_url),
    display_name = COALESCE($11, display_name),
    chain_namespace = COALESCE($12, chain_namespace),
    base_fee_multiplier = COALESCE($13, base_fee_multiplier),
    priority_fee_multiplier = COALESCE($14, priority_fee_multiplier),
    deployment_gas_limit = COALESCE($15, deployment_gas_limit),
    token_transfer_gas_limit = COALESCE($16, token_transfer_gas_limit),
    supports_eip1559 = COALESCE($17, supports_eip1559),
    gas_oracle_url = COALESCE($18, gas_oracle_url),
    gas_refresh_interval_ms = COALESCE($19, gas_refresh_interval_ms),
    gas_priority_levels = COALESCE($20, gas_priority_levels),
    average_block_time_ms = COALESCE($21, average_block_time_ms),
    peak_hours_multiplier = COALESCE($22, peak_hours_multiplier),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, name, type, network_type, circle_network_type, block_explorer_url, chain_id, is_testnet, active, logo_url, display_name, chain_namespace, base_fee_multiplier, priority_fee_multiplier, deployment_gas_limit, token_transfer_gas_limit, supports_eip1559, gas_oracle_url, gas_refresh_interval_ms, gas_priority_levels, average_block_time_ms, peak_hours_multiplier, created_at, updated_at, deleted_at
`

type UpdateNetworkParams struct {
	ID                    uuid.UUID         `json:"id"`
	Name                  string            `json:"name"`
	Type                  string            `json:"type"`
	NetworkType           NetworkType       `json:"network_type"`
	CircleNetworkType     CircleNetworkType `json:"circle_network_type"`
	BlockExplorerUrl      pgtype.Text       `json:"block_explorer_url"`
	ChainID               int32             `json:"chain_id"`
	IsTestnet             bool              `json:"is_testnet"`
	Active                bool              `json:"active"`
	LogoUrl               pgtype.Text       `json:"logo_url"`
	DisplayName           pgtype.Text       `json:"display_name"`
	ChainNamespace        pgtype.Text       `json:"chain_namespace"`
	BaseFeeMultiplier     pgtype.Numeric    `json:"base_fee_multiplier"`
	PriorityFeeMultiplier pgtype.Numeric    `json:"priority_fee_multiplier"`
	DeploymentGasLimit    pgtype.Text       `json:"deployment_gas_limit"`
	TokenTransferGasLimit pgtype.Text       `json:"token_transfer_gas_limit"`
	SupportsEip1559       pgtype.Bool       `json:"supports_eip1559"`
	GasOracleUrl          pgtype.Text       `json:"gas_oracle_url"`
	GasRefreshIntervalMs  pgtype.Int4       `json:"gas_refresh_interval_ms"`
	GasPriorityLevels     []byte            `json:"gas_priority_levels"`
	AverageBlockTimeMs    pgtype.Int4       `json:"average_block_time_ms"`
	PeakHoursMultiplier   pgtype.Numeric    `json:"peak_hours_multiplier"`
}

func (q *Queries) UpdateNetwork(ctx context.Context, arg UpdateNetworkParams) (Network, error) {
	row := q.db.QueryRow(ctx, updateNetwork,
		arg.ID,
		arg.Name,
		arg.Type,
		arg.NetworkType,
		arg.CircleNetworkType,
		arg.BlockExplorerUrl,
		arg.ChainID,
		arg.IsTestnet,
		arg.Active,
		arg.LogoUrl,
		arg.DisplayName,
		arg.ChainNamespace,
		arg.BaseFeeMultiplier,
		arg.PriorityFeeMultiplier,
		arg.DeploymentGasLimit,
		arg.TokenTransferGasLimit,
		arg.SupportsEip1559,
		arg.GasOracleUrl,
		arg.GasRefreshIntervalMs,
		arg.GasPriorityLevels,
		arg.AverageBlockTimeMs,
		arg.PeakHoursMultiplier,
	)
	var i Network
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.NetworkType,
		&i.CircleNetworkType,
		&i.BlockExplorerUrl,
		&i.ChainID,
		&i.IsTestnet,
		&i.Active,
		&i.LogoUrl,
		&i.DisplayName,
		&i.ChainNamespace,
		&i.BaseFeeMultiplier,
		&i.PriorityFeeMultiplier,
		&i.DeploymentGasLimit,
		&i.TokenTransferGasLimit,
		&i.SupportsEip1559,
		&i.GasOracleUrl,
		&i.GasRefreshIntervalMs,
		&i.GasPriorityLevels,
		&i.AverageBlockTimeMs,
		&i.PeakHoursMultiplier,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
