// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: products.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const activateProduct = `-- name: ActivateProduct :one
UPDATE products
SET 
    active = true,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, workspace_id, wallet_id, name, description, product_type, interval_type, term_length, price_in_pennies, image_url, url, merchant_paid_gas, active, metadata, created_at, updated_at, deleted_at
`

func (q *Queries) ActivateProduct(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.db.QueryRow(ctx, activateProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.WalletID,
		&i.Name,
		&i.Description,
		&i.ProductType,
		&i.IntervalType,
		&i.TermLength,
		&i.PriceInPennies,
		&i.ImageUrl,
		&i.Url,
		&i.MerchantPaidGas,
		&i.Active,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const countProducts = `-- name: CountProducts :one
SELECT COUNT(*) FROM products
WHERE workspace_id = $1 AND deleted_at IS NULL
`

func (q *Queries) CountProducts(ctx context.Context, workspaceID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countProducts, workspaceID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
    workspace_id,
    wallet_id,
    name,
    description,
    product_type,
    interval_type,
    term_length,
    price_in_pennies,
    image_url,
    url,
    merchant_paid_gas,
    active,
    metadata
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13
)
RETURNING id, workspace_id, wallet_id, name, description, product_type, interval_type, term_length, price_in_pennies, image_url, url, merchant_paid_gas, active, metadata, created_at, updated_at, deleted_at
`

type CreateProductParams struct {
	WorkspaceID     uuid.UUID        `json:"workspace_id"`
	WalletID        uuid.UUID        `json:"wallet_id"`
	Name            string           `json:"name"`
	Description     pgtype.Text      `json:"description"`
	ProductType     ProductType      `json:"product_type"`
	IntervalType    NullIntervalType `json:"interval_type"`
	TermLength      pgtype.Int4      `json:"term_length"`
	PriceInPennies  int32            `json:"price_in_pennies"`
	ImageUrl        pgtype.Text      `json:"image_url"`
	Url             pgtype.Text      `json:"url"`
	MerchantPaidGas bool             `json:"merchant_paid_gas"`
	Active          bool             `json:"active"`
	Metadata        []byte           `json:"metadata"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.WorkspaceID,
		arg.WalletID,
		arg.Name,
		arg.Description,
		arg.ProductType,
		arg.IntervalType,
		arg.TermLength,
		arg.PriceInPennies,
		arg.ImageUrl,
		arg.Url,
		arg.MerchantPaidGas,
		arg.Active,
		arg.Metadata,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.WalletID,
		&i.Name,
		&i.Description,
		&i.ProductType,
		&i.IntervalType,
		&i.TermLength,
		&i.PriceInPennies,
		&i.ImageUrl,
		&i.Url,
		&i.MerchantPaidGas,
		&i.Active,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deactivateProduct = `-- name: DeactivateProduct :one
UPDATE products
SET 
    active = false,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, workspace_id, wallet_id, name, description, product_type, interval_type, term_length, price_in_pennies, image_url, url, merchant_paid_gas, active, metadata, created_at, updated_at, deleted_at
`

func (q *Queries) DeactivateProduct(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.db.QueryRow(ctx, deactivateProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.WalletID,
		&i.Name,
		&i.Description,
		&i.ProductType,
		&i.IntervalType,
		&i.TermLength,
		&i.PriceInPennies,
		&i.ImageUrl,
		&i.Url,
		&i.MerchantPaidGas,
		&i.Active,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
UPDATE products
SET deleted_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) DeleteProduct(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteProduct, id)
	return err
}

const getActiveProductsByWalletID = `-- name: GetActiveProductsByWalletID :many
SELECT id, workspace_id, wallet_id, name, description, product_type, interval_type, term_length, price_in_pennies, image_url, url, merchant_paid_gas, active, metadata, created_at, updated_at, deleted_at FROM products
WHERE wallet_id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetActiveProductsByWalletID(ctx context.Context, walletID uuid.UUID) ([]Product, error) {
	rows, err := q.db.Query(ctx, getActiveProductsByWalletID, walletID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.WalletID,
			&i.Name,
			&i.Description,
			&i.ProductType,
			&i.IntervalType,
			&i.TermLength,
			&i.PriceInPennies,
			&i.ImageUrl,
			&i.Url,
			&i.MerchantPaidGas,
			&i.Active,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProduct = `-- name: GetProduct :one
SELECT id, workspace_id, wallet_id, name, description, product_type, interval_type, term_length, price_in_pennies, image_url, url, merchant_paid_gas, active, metadata, created_at, updated_at, deleted_at FROM products
WHERE id = $1 AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.db.QueryRow(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.WalletID,
		&i.Name,
		&i.Description,
		&i.ProductType,
		&i.IntervalType,
		&i.TermLength,
		&i.PriceInPennies,
		&i.ImageUrl,
		&i.Url,
		&i.MerchantPaidGas,
		&i.Active,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listActiveProducts = `-- name: ListActiveProducts :many
SELECT id, workspace_id, wallet_id, name, description, product_type, interval_type, term_length, price_in_pennies, image_url, url, merchant_paid_gas, active, metadata, created_at, updated_at, deleted_at FROM products
WHERE workspace_id = $1 AND active = true AND deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) ListActiveProducts(ctx context.Context, workspaceID uuid.UUID) ([]Product, error) {
	rows, err := q.db.Query(ctx, listActiveProducts, workspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.WalletID,
			&i.Name,
			&i.Description,
			&i.ProductType,
			&i.IntervalType,
			&i.TermLength,
			&i.PriceInPennies,
			&i.ImageUrl,
			&i.Url,
			&i.MerchantPaidGas,
			&i.Active,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProducts = `-- name: ListProducts :many
SELECT id, workspace_id, wallet_id, name, description, product_type, interval_type, term_length, price_in_pennies, image_url, url, merchant_paid_gas, active, metadata, created_at, updated_at, deleted_at FROM products
WHERE workspace_id = $1 AND deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) ListProducts(ctx context.Context, workspaceID uuid.UUID) ([]Product, error) {
	rows, err := q.db.Query(ctx, listProducts, workspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.WalletID,
			&i.Name,
			&i.Description,
			&i.ProductType,
			&i.IntervalType,
			&i.TermLength,
			&i.PriceInPennies,
			&i.ImageUrl,
			&i.Url,
			&i.MerchantPaidGas,
			&i.Active,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductsWithPagination = `-- name: ListProductsWithPagination :many
SELECT id, workspace_id, wallet_id, name, description, product_type, interval_type, term_length, price_in_pennies, image_url, url, merchant_paid_gas, active, metadata, created_at, updated_at, deleted_at FROM products
WHERE workspace_id = $1 AND deleted_at IS NULL
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListProductsWithPaginationParams struct {
	WorkspaceID uuid.UUID `json:"workspace_id"`
	Limit       int32     `json:"limit"`
	Offset      int32     `json:"offset"`
}

func (q *Queries) ListProductsWithPagination(ctx context.Context, arg ListProductsWithPaginationParams) ([]Product, error) {
	rows, err := q.db.Query(ctx, listProductsWithPagination, arg.WorkspaceID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.WalletID,
			&i.Name,
			&i.Description,
			&i.ProductType,
			&i.IntervalType,
			&i.TermLength,
			&i.PriceInPennies,
			&i.ImageUrl,
			&i.Url,
			&i.MerchantPaidGas,
			&i.Active,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET
    name = COALESCE($2, name),
    wallet_id = COALESCE($3, wallet_id),
    description = COALESCE($4, description),
    product_type = COALESCE($5, product_type),
    interval_type = COALESCE($6, interval_type),
    term_length = COALESCE($7, term_length),
    price_in_pennies = COALESCE($8, price_in_pennies),
    image_url = COALESCE($9, image_url),
    url = COALESCE($10, url),
    merchant_paid_gas = COALESCE($11, merchant_paid_gas),
    active = COALESCE($12, active),
    metadata = COALESCE($13, metadata),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, workspace_id, wallet_id, name, description, product_type, interval_type, term_length, price_in_pennies, image_url, url, merchant_paid_gas, active, metadata, created_at, updated_at, deleted_at
`

type UpdateProductParams struct {
	ID              uuid.UUID        `json:"id"`
	Name            string           `json:"name"`
	WalletID        uuid.UUID        `json:"wallet_id"`
	Description     pgtype.Text      `json:"description"`
	ProductType     ProductType      `json:"product_type"`
	IntervalType    NullIntervalType `json:"interval_type"`
	TermLength      pgtype.Int4      `json:"term_length"`
	PriceInPennies  int32            `json:"price_in_pennies"`
	ImageUrl        pgtype.Text      `json:"image_url"`
	Url             pgtype.Text      `json:"url"`
	MerchantPaidGas bool             `json:"merchant_paid_gas"`
	Active          bool             `json:"active"`
	Metadata        []byte           `json:"metadata"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateProduct,
		arg.ID,
		arg.Name,
		arg.WalletID,
		arg.Description,
		arg.ProductType,
		arg.IntervalType,
		arg.TermLength,
		arg.PriceInPennies,
		arg.ImageUrl,
		arg.Url,
		arg.MerchantPaidGas,
		arg.Active,
		arg.Metadata,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.WalletID,
		&i.Name,
		&i.Description,
		&i.ProductType,
		&i.IntervalType,
		&i.TermLength,
		&i.PriceInPennies,
		&i.ImageUrl,
		&i.Url,
		&i.MerchantPaidGas,
		&i.Active,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
