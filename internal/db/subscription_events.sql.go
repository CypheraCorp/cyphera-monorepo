// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: subscription_events.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countSubscriptionEventDetails = `-- name: CountSubscriptionEventDetails :one
SELECT COUNT(*) 
FROM subscription_events se
JOIN subscriptions s ON se.subscription_id = s.id
JOIN products p ON s.product_id = p.id
WHERE s.deleted_at IS NULL
    AND p.deleted_at IS NULL
    AND p.workspace_id = $1
    AND se.event_type IN ('redeemed', 'failed', 'failed_redemption')
`

func (q *Queries) CountSubscriptionEventDetails(ctx context.Context, workspaceID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countSubscriptionEventDetails, workspaceID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countSubscriptionEvents = `-- name: CountSubscriptionEvents :one
SELECT COUNT(*) FROM subscription_events
`

func (q *Queries) CountSubscriptionEvents(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countSubscriptionEvents)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countSubscriptionEventsBySubscription = `-- name: CountSubscriptionEventsBySubscription :one
SELECT COUNT(*) FROM subscription_events
WHERE subscription_id = $1
`

func (q *Queries) CountSubscriptionEventsBySubscription(ctx context.Context, subscriptionID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countSubscriptionEventsBySubscription, subscriptionID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countSubscriptionEventsByType = `-- name: CountSubscriptionEventsByType :one
SELECT COUNT(*) FROM subscription_events
WHERE event_type = $1
`

func (q *Queries) CountSubscriptionEventsByType(ctx context.Context, eventType SubscriptionEventType) (int64, error) {
	row := q.db.QueryRow(ctx, countSubscriptionEventsByType, eventType)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createFailedRedemptionEvent = `-- name: CreateFailedRedemptionEvent :one
INSERT INTO subscription_events (
    subscription_id,
    event_type,
    amount_in_cents,
    occurred_at,
    error_message,
    metadata
) VALUES (
    $1, 'failed', $2, CURRENT_TIMESTAMP, $3, $4
)
RETURNING id, subscription_id, event_type, transaction_hash, amount_in_cents, occurred_at, error_message, metadata, created_at, updated_at
`

type CreateFailedRedemptionEventParams struct {
	SubscriptionID uuid.UUID   `json:"subscription_id"`
	AmountInCents  int32       `json:"amount_in_cents"`
	ErrorMessage   pgtype.Text `json:"error_message"`
	Metadata       []byte      `json:"metadata"`
}

func (q *Queries) CreateFailedRedemptionEvent(ctx context.Context, arg CreateFailedRedemptionEventParams) (SubscriptionEvent, error) {
	row := q.db.QueryRow(ctx, createFailedRedemptionEvent,
		arg.SubscriptionID,
		arg.AmountInCents,
		arg.ErrorMessage,
		arg.Metadata,
	)
	var i SubscriptionEvent
	err := row.Scan(
		&i.ID,
		&i.SubscriptionID,
		&i.EventType,
		&i.TransactionHash,
		&i.AmountInCents,
		&i.OccurredAt,
		&i.ErrorMessage,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createRedemptionEvent = `-- name: CreateRedemptionEvent :one
INSERT INTO subscription_events (
    subscription_id,
    event_type,
    transaction_hash,
    amount_in_cents,
    occurred_at,
    metadata
) VALUES (
    $1, 'redeemed', $2, $3, CURRENT_TIMESTAMP, $4
)
RETURNING id, subscription_id, event_type, transaction_hash, amount_in_cents, occurred_at, error_message, metadata, created_at, updated_at
`

type CreateRedemptionEventParams struct {
	SubscriptionID  uuid.UUID   `json:"subscription_id"`
	TransactionHash pgtype.Text `json:"transaction_hash"`
	AmountInCents   int32       `json:"amount_in_cents"`
	Metadata        []byte      `json:"metadata"`
}

func (q *Queries) CreateRedemptionEvent(ctx context.Context, arg CreateRedemptionEventParams) (SubscriptionEvent, error) {
	row := q.db.QueryRow(ctx, createRedemptionEvent,
		arg.SubscriptionID,
		arg.TransactionHash,
		arg.AmountInCents,
		arg.Metadata,
	)
	var i SubscriptionEvent
	err := row.Scan(
		&i.ID,
		&i.SubscriptionID,
		&i.EventType,
		&i.TransactionHash,
		&i.AmountInCents,
		&i.OccurredAt,
		&i.ErrorMessage,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createSubscriptionEvent = `-- name: CreateSubscriptionEvent :one
INSERT INTO subscription_events (
    subscription_id,
    event_type,
    transaction_hash,
    amount_in_cents,
    occurred_at,
    error_message,
    metadata
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, subscription_id, event_type, transaction_hash, amount_in_cents, occurred_at, error_message, metadata, created_at, updated_at
`

type CreateSubscriptionEventParams struct {
	SubscriptionID  uuid.UUID             `json:"subscription_id"`
	EventType       SubscriptionEventType `json:"event_type"`
	TransactionHash pgtype.Text           `json:"transaction_hash"`
	AmountInCents   int32                 `json:"amount_in_cents"`
	OccurredAt      pgtype.Timestamptz    `json:"occurred_at"`
	ErrorMessage    pgtype.Text           `json:"error_message"`
	Metadata        []byte                `json:"metadata"`
}

func (q *Queries) CreateSubscriptionEvent(ctx context.Context, arg CreateSubscriptionEventParams) (SubscriptionEvent, error) {
	row := q.db.QueryRow(ctx, createSubscriptionEvent,
		arg.SubscriptionID,
		arg.EventType,
		arg.TransactionHash,
		arg.AmountInCents,
		arg.OccurredAt,
		arg.ErrorMessage,
		arg.Metadata,
	)
	var i SubscriptionEvent
	err := row.Scan(
		&i.ID,
		&i.SubscriptionID,
		&i.EventType,
		&i.TransactionHash,
		&i.AmountInCents,
		&i.OccurredAt,
		&i.ErrorMessage,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLatestSubscriptionEvent = `-- name: GetLatestSubscriptionEvent :one
SELECT id, subscription_id, event_type, transaction_hash, amount_in_cents, occurred_at, error_message, metadata, created_at, updated_at FROM subscription_events
WHERE subscription_id = $1
ORDER BY occurred_at DESC
LIMIT 1
`

func (q *Queries) GetLatestSubscriptionEvent(ctx context.Context, subscriptionID uuid.UUID) (SubscriptionEvent, error) {
	row := q.db.QueryRow(ctx, getLatestSubscriptionEvent, subscriptionID)
	var i SubscriptionEvent
	err := row.Scan(
		&i.ID,
		&i.SubscriptionID,
		&i.EventType,
		&i.TransactionHash,
		&i.AmountInCents,
		&i.OccurredAt,
		&i.ErrorMessage,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSubscriptionEvent = `-- name: GetSubscriptionEvent :one
SELECT id, subscription_id, event_type, transaction_hash, amount_in_cents, occurred_at, error_message, metadata, created_at, updated_at FROM subscription_events
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSubscriptionEvent(ctx context.Context, id uuid.UUID) (SubscriptionEvent, error) {
	row := q.db.QueryRow(ctx, getSubscriptionEvent, id)
	var i SubscriptionEvent
	err := row.Scan(
		&i.ID,
		&i.SubscriptionID,
		&i.EventType,
		&i.TransactionHash,
		&i.AmountInCents,
		&i.OccurredAt,
		&i.ErrorMessage,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSubscriptionEventByTransactionHash = `-- name: GetSubscriptionEventByTransactionHash :one
SELECT id, subscription_id, event_type, transaction_hash, amount_in_cents, occurred_at, error_message, metadata, created_at, updated_at FROM subscription_events
WHERE transaction_hash = $1 LIMIT 1
`

func (q *Queries) GetSubscriptionEventByTransactionHash(ctx context.Context, transactionHash pgtype.Text) (SubscriptionEvent, error) {
	row := q.db.QueryRow(ctx, getSubscriptionEventByTransactionHash, transactionHash)
	var i SubscriptionEvent
	err := row.Scan(
		&i.ID,
		&i.SubscriptionID,
		&i.EventType,
		&i.TransactionHash,
		&i.AmountInCents,
		&i.OccurredAt,
		&i.ErrorMessage,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSuccessfulRedemptionCount = `-- name: GetSuccessfulRedemptionCount :one
SELECT COUNT(*) 
FROM subscription_events
WHERE subscription_id = $1 AND event_type = 'redeemed'
`

func (q *Queries) GetSuccessfulRedemptionCount(ctx context.Context, subscriptionID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getSuccessfulRedemptionCount, subscriptionID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getTotalAmountBySubscription = `-- name: GetTotalAmountBySubscription :one
SELECT COALESCE(SUM(amount_in_cents), 0) as total_amount
FROM subscription_events
WHERE subscription_id = $1 AND event_type = 'redeemed'
`

func (q *Queries) GetTotalAmountBySubscription(ctx context.Context, subscriptionID uuid.UUID) (interface{}, error) {
	row := q.db.QueryRow(ctx, getTotalAmountBySubscription, subscriptionID)
	var total_amount interface{}
	err := row.Scan(&total_amount)
	return total_amount, err
}

const listFailedSubscriptionEvents = `-- name: ListFailedSubscriptionEvents :many
SELECT id, subscription_id, event_type, transaction_hash, amount_in_cents, occurred_at, error_message, metadata, created_at, updated_at FROM subscription_events
WHERE event_type = 'failed'
ORDER BY occurred_at DESC
`

func (q *Queries) ListFailedSubscriptionEvents(ctx context.Context) ([]SubscriptionEvent, error) {
	rows, err := q.db.Query(ctx, listFailedSubscriptionEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SubscriptionEvent{}
	for rows.Next() {
		var i SubscriptionEvent
		if err := rows.Scan(
			&i.ID,
			&i.SubscriptionID,
			&i.EventType,
			&i.TransactionHash,
			&i.AmountInCents,
			&i.OccurredAt,
			&i.ErrorMessage,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRecentSubscriptionEvents = `-- name: ListRecentSubscriptionEvents :many
SELECT id, subscription_id, event_type, transaction_hash, amount_in_cents, occurred_at, error_message, metadata, created_at, updated_at FROM subscription_events
WHERE occurred_at >= $1
ORDER BY occurred_at DESC
`

func (q *Queries) ListRecentSubscriptionEvents(ctx context.Context, occurredAt pgtype.Timestamptz) ([]SubscriptionEvent, error) {
	rows, err := q.db.Query(ctx, listRecentSubscriptionEvents, occurredAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SubscriptionEvent{}
	for rows.Next() {
		var i SubscriptionEvent
		if err := rows.Scan(
			&i.ID,
			&i.SubscriptionID,
			&i.EventType,
			&i.TransactionHash,
			&i.AmountInCents,
			&i.OccurredAt,
			&i.ErrorMessage,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRecentSubscriptionEventsByType = `-- name: ListRecentSubscriptionEventsByType :many
SELECT id, subscription_id, event_type, transaction_hash, amount_in_cents, occurred_at, error_message, metadata, created_at, updated_at FROM subscription_events
WHERE event_type = $1 AND occurred_at >= $2
ORDER BY occurred_at DESC
`

type ListRecentSubscriptionEventsByTypeParams struct {
	EventType  SubscriptionEventType `json:"event_type"`
	OccurredAt pgtype.Timestamptz    `json:"occurred_at"`
}

func (q *Queries) ListRecentSubscriptionEventsByType(ctx context.Context, arg ListRecentSubscriptionEventsByTypeParams) ([]SubscriptionEvent, error) {
	rows, err := q.db.Query(ctx, listRecentSubscriptionEventsByType, arg.EventType, arg.OccurredAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SubscriptionEvent{}
	for rows.Next() {
		var i SubscriptionEvent
		if err := rows.Scan(
			&i.ID,
			&i.SubscriptionID,
			&i.EventType,
			&i.TransactionHash,
			&i.AmountInCents,
			&i.OccurredAt,
			&i.ErrorMessage,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSubscriptionEventDetailsWithPagination = `-- name: ListSubscriptionEventDetailsWithPagination :many
SELECT 
    se.id,
    se.event_type,
    se.transaction_hash,
    se.amount_in_cents,
    se.occurred_at,
    se.error_message,
    -- Subscription details
    s.id as subscription_id,
    s.status as subscription_status,
    -- Customer details
    c.id as customer_id,
    c.name as customer_name,
    c.email as customer_email,
    -- Product details
    p.id as product_id,
    p.name as product_name,
    p.product_type,
    p.interval_type,
    -- Token details
    t.symbol as token_symbol,
    t.contract_address as token_address,
    -- Network details
    n.name as network_name,
    n.type as network_type,
    n.chain_id,
    -- Customer wallet details
    cw.wallet_address as customer_wallet_address
FROM subscription_events se
JOIN subscriptions s ON se.subscription_id = s.id
JOIN customers c ON s.customer_id = c.id
JOIN products p ON s.product_id = p.id
JOIN products_tokens pt ON s.product_token_id = pt.id
JOIN tokens t ON pt.token_id = t.id
JOIN networks n ON pt.network_id = n.id
LEFT JOIN customer_wallets cw ON s.customer_wallet_id = cw.id
WHERE s.deleted_at IS NULL
    AND c.deleted_at IS NULL
    AND p.deleted_at IS NULL
    AND pt.deleted_at IS NULL
    AND t.deleted_at IS NULL
    AND n.deleted_at IS NULL
    AND p.workspace_id = $3
    AND se.event_type IN ('redeemed', 'failed', 'failed_redemption')
ORDER BY se.occurred_at DESC
LIMIT $1 OFFSET $2
`

type ListSubscriptionEventDetailsWithPaginationParams struct {
	Limit       int32     `json:"limit"`
	Offset      int32     `json:"offset"`
	WorkspaceID uuid.UUID `json:"workspace_id"`
}

type ListSubscriptionEventDetailsWithPaginationRow struct {
	ID                    uuid.UUID             `json:"id"`
	EventType             SubscriptionEventType `json:"event_type"`
	TransactionHash       pgtype.Text           `json:"transaction_hash"`
	AmountInCents         int32                 `json:"amount_in_cents"`
	OccurredAt            pgtype.Timestamptz    `json:"occurred_at"`
	ErrorMessage          pgtype.Text           `json:"error_message"`
	SubscriptionID        uuid.UUID             `json:"subscription_id"`
	SubscriptionStatus    SubscriptionStatus    `json:"subscription_status"`
	CustomerID            uuid.UUID             `json:"customer_id"`
	CustomerName          pgtype.Text           `json:"customer_name"`
	CustomerEmail         pgtype.Text           `json:"customer_email"`
	ProductID             uuid.UUID             `json:"product_id"`
	ProductName           string                `json:"product_name"`
	ProductType           ProductType           `json:"product_type"`
	IntervalType          IntervalType          `json:"interval_type"`
	TokenSymbol           string                `json:"token_symbol"`
	TokenAddress          string                `json:"token_address"`
	NetworkName           string                `json:"network_name"`
	NetworkType           string                `json:"network_type"`
	ChainID               int32                 `json:"chain_id"`
	CustomerWalletAddress pgtype.Text           `json:"customer_wallet_address"`
}

func (q *Queries) ListSubscriptionEventDetailsWithPagination(ctx context.Context, arg ListSubscriptionEventDetailsWithPaginationParams) ([]ListSubscriptionEventDetailsWithPaginationRow, error) {
	rows, err := q.db.Query(ctx, listSubscriptionEventDetailsWithPagination, arg.Limit, arg.Offset, arg.WorkspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListSubscriptionEventDetailsWithPaginationRow{}
	for rows.Next() {
		var i ListSubscriptionEventDetailsWithPaginationRow
		if err := rows.Scan(
			&i.ID,
			&i.EventType,
			&i.TransactionHash,
			&i.AmountInCents,
			&i.OccurredAt,
			&i.ErrorMessage,
			&i.SubscriptionID,
			&i.SubscriptionStatus,
			&i.CustomerID,
			&i.CustomerName,
			&i.CustomerEmail,
			&i.ProductID,
			&i.ProductName,
			&i.ProductType,
			&i.IntervalType,
			&i.TokenSymbol,
			&i.TokenAddress,
			&i.NetworkName,
			&i.NetworkType,
			&i.ChainID,
			&i.CustomerWalletAddress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSubscriptionEvents = `-- name: ListSubscriptionEvents :many
SELECT id, subscription_id, event_type, transaction_hash, amount_in_cents, occurred_at, error_message, metadata, created_at, updated_at FROM subscription_events
ORDER BY occurred_at DESC
`

func (q *Queries) ListSubscriptionEvents(ctx context.Context) ([]SubscriptionEvent, error) {
	rows, err := q.db.Query(ctx, listSubscriptionEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SubscriptionEvent{}
	for rows.Next() {
		var i SubscriptionEvent
		if err := rows.Scan(
			&i.ID,
			&i.SubscriptionID,
			&i.EventType,
			&i.TransactionHash,
			&i.AmountInCents,
			&i.OccurredAt,
			&i.ErrorMessage,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSubscriptionEventsBySubscription = `-- name: ListSubscriptionEventsBySubscription :many
SELECT id, subscription_id, event_type, transaction_hash, amount_in_cents, occurred_at, error_message, metadata, created_at, updated_at FROM subscription_events
WHERE subscription_id = $1
ORDER BY occurred_at DESC
`

func (q *Queries) ListSubscriptionEventsBySubscription(ctx context.Context, subscriptionID uuid.UUID) ([]SubscriptionEvent, error) {
	rows, err := q.db.Query(ctx, listSubscriptionEventsBySubscription, subscriptionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SubscriptionEvent{}
	for rows.Next() {
		var i SubscriptionEvent
		if err := rows.Scan(
			&i.ID,
			&i.SubscriptionID,
			&i.EventType,
			&i.TransactionHash,
			&i.AmountInCents,
			&i.OccurredAt,
			&i.ErrorMessage,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSubscriptionEventsByType = `-- name: ListSubscriptionEventsByType :many
SELECT id, subscription_id, event_type, transaction_hash, amount_in_cents, occurred_at, error_message, metadata, created_at, updated_at FROM subscription_events
WHERE event_type = $1
ORDER BY occurred_at DESC
`

func (q *Queries) ListSubscriptionEventsByType(ctx context.Context, eventType SubscriptionEventType) ([]SubscriptionEvent, error) {
	rows, err := q.db.Query(ctx, listSubscriptionEventsByType, eventType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SubscriptionEvent{}
	for rows.Next() {
		var i SubscriptionEvent
		if err := rows.Scan(
			&i.ID,
			&i.SubscriptionID,
			&i.EventType,
			&i.TransactionHash,
			&i.AmountInCents,
			&i.OccurredAt,
			&i.ErrorMessage,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSubscriptionEventsWithPagination = `-- name: ListSubscriptionEventsWithPagination :many
SELECT id, subscription_id, event_type, transaction_hash, amount_in_cents, occurred_at, error_message, metadata, created_at, updated_at FROM subscription_events
ORDER BY occurred_at DESC
LIMIT $1 OFFSET $2
`

type ListSubscriptionEventsWithPaginationParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListSubscriptionEventsWithPagination(ctx context.Context, arg ListSubscriptionEventsWithPaginationParams) ([]SubscriptionEvent, error) {
	rows, err := q.db.Query(ctx, listSubscriptionEventsWithPagination, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SubscriptionEvent{}
	for rows.Next() {
		var i SubscriptionEvent
		if err := rows.Scan(
			&i.ID,
			&i.SubscriptionID,
			&i.EventType,
			&i.TransactionHash,
			&i.AmountInCents,
			&i.OccurredAt,
			&i.ErrorMessage,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSubscriptionEvent = `-- name: UpdateSubscriptionEvent :one
UPDATE subscription_events
SET
    event_type = COALESCE($2, event_type),
    transaction_hash = COALESCE($3, transaction_hash),
    amount_in_cents = COALESCE($4, amount_in_cents),
    error_message = COALESCE($5, error_message),
    metadata = COALESCE($6, metadata),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, subscription_id, event_type, transaction_hash, amount_in_cents, occurred_at, error_message, metadata, created_at, updated_at
`

type UpdateSubscriptionEventParams struct {
	ID              uuid.UUID             `json:"id"`
	EventType       SubscriptionEventType `json:"event_type"`
	TransactionHash pgtype.Text           `json:"transaction_hash"`
	AmountInCents   int32                 `json:"amount_in_cents"`
	ErrorMessage    pgtype.Text           `json:"error_message"`
	Metadata        []byte                `json:"metadata"`
}

func (q *Queries) UpdateSubscriptionEvent(ctx context.Context, arg UpdateSubscriptionEventParams) (SubscriptionEvent, error) {
	row := q.db.QueryRow(ctx, updateSubscriptionEvent,
		arg.ID,
		arg.EventType,
		arg.TransactionHash,
		arg.AmountInCents,
		arg.ErrorMessage,
		arg.Metadata,
	)
	var i SubscriptionEvent
	err := row.Scan(
		&i.ID,
		&i.SubscriptionID,
		&i.EventType,
		&i.TransactionHash,
		&i.AmountInCents,
		&i.OccurredAt,
		&i.ErrorMessage,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
