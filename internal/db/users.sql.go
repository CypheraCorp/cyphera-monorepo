// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    supabase_id,
    email,
    account_id,
    role,
    is_account_owner,
    first_name,
    last_name,
    display_name,
    picture_url,
    phone,
    timezone,
    locale,
    email_verified,
    metadata
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14
) RETURNING id, supabase_id, email, account_id, role, is_account_owner, first_name, last_name, display_name, picture_url, phone, timezone, locale, last_login_at, email_verified, two_factor_enabled, status, metadata, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	SupabaseID     string      `json:"supabase_id"`
	Email          string      `json:"email"`
	AccountID      uuid.UUID   `json:"account_id"`
	Role           UserRole    `json:"role"`
	IsAccountOwner pgtype.Bool `json:"is_account_owner"`
	FirstName      pgtype.Text `json:"first_name"`
	LastName       pgtype.Text `json:"last_name"`
	DisplayName    pgtype.Text `json:"display_name"`
	PictureUrl     pgtype.Text `json:"picture_url"`
	Phone          pgtype.Text `json:"phone"`
	Timezone       pgtype.Text `json:"timezone"`
	Locale         pgtype.Text `json:"locale"`
	EmailVerified  pgtype.Bool `json:"email_verified"`
	Metadata       []byte      `json:"metadata"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.SupabaseID,
		arg.Email,
		arg.AccountID,
		arg.Role,
		arg.IsAccountOwner,
		arg.FirstName,
		arg.LastName,
		arg.DisplayName,
		arg.PictureUrl,
		arg.Phone,
		arg.Timezone,
		arg.Locale,
		arg.EmailVerified,
		arg.Metadata,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.SupabaseID,
		&i.Email,
		&i.AccountID,
		&i.Role,
		&i.IsAccountOwner,
		&i.FirstName,
		&i.LastName,
		&i.DisplayName,
		&i.PictureUrl,
		&i.Phone,
		&i.Timezone,
		&i.Locale,
		&i.LastLoginAt,
		&i.EmailVerified,
		&i.TwoFactorEnabled,
		&i.Status,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE users
SET deleted_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getAccountOwner = `-- name: GetAccountOwner :one
SELECT id, supabase_id, email, account_id, role, is_account_owner, first_name, last_name, display_name, picture_url, phone, timezone, locale, last_login_at, email_verified, two_factor_enabled, status, metadata, created_at, updated_at, deleted_at FROM users
WHERE account_id = $1 AND is_account_owner = true AND deleted_at IS NULL
`

func (q *Queries) GetAccountOwner(ctx context.Context, accountID uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getAccountOwner, accountID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.SupabaseID,
		&i.Email,
		&i.AccountID,
		&i.Role,
		&i.IsAccountOwner,
		&i.FirstName,
		&i.LastName,
		&i.DisplayName,
		&i.PictureUrl,
		&i.Phone,
		&i.Timezone,
		&i.Locale,
		&i.LastLoginAt,
		&i.EmailVerified,
		&i.TwoFactorEnabled,
		&i.Status,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserAccount = `-- name: GetUserAccount :one
SELECT 
    u.id, u.supabase_id, u.email, u.account_id, u.role, u.is_account_owner, u.first_name, u.last_name, u.display_name, u.picture_url, u.phone, u.timezone, u.locale, u.last_login_at, u.email_verified, u.two_factor_enabled, u.status, u.metadata, u.created_at, u.updated_at, u.deleted_at,
    a.name as account_name
FROM users u
JOIN accounts a ON u.account_id = a.id
WHERE u.id = $1 
AND u.deleted_at IS NULL 
AND a.deleted_at IS NULL
`

type GetUserAccountRow struct {
	ID               uuid.UUID          `json:"id"`
	SupabaseID       string             `json:"supabase_id"`
	Email            string             `json:"email"`
	AccountID        uuid.UUID          `json:"account_id"`
	Role             UserRole           `json:"role"`
	IsAccountOwner   pgtype.Bool        `json:"is_account_owner"`
	FirstName        pgtype.Text        `json:"first_name"`
	LastName         pgtype.Text        `json:"last_name"`
	DisplayName      pgtype.Text        `json:"display_name"`
	PictureUrl       pgtype.Text        `json:"picture_url"`
	Phone            pgtype.Text        `json:"phone"`
	Timezone         pgtype.Text        `json:"timezone"`
	Locale           pgtype.Text        `json:"locale"`
	LastLoginAt      pgtype.Timestamptz `json:"last_login_at"`
	EmailVerified    pgtype.Bool        `json:"email_verified"`
	TwoFactorEnabled pgtype.Bool        `json:"two_factor_enabled"`
	Status           NullUserStatus     `json:"status"`
	Metadata         []byte             `json:"metadata"`
	CreatedAt        pgtype.Timestamptz `json:"created_at"`
	UpdatedAt        pgtype.Timestamptz `json:"updated_at"`
	DeletedAt        pgtype.Timestamptz `json:"deleted_at"`
	AccountName      string             `json:"account_name"`
}

func (q *Queries) GetUserAccount(ctx context.Context, id uuid.UUID) (GetUserAccountRow, error) {
	row := q.db.QueryRow(ctx, getUserAccount, id)
	var i GetUserAccountRow
	err := row.Scan(
		&i.ID,
		&i.SupabaseID,
		&i.Email,
		&i.AccountID,
		&i.Role,
		&i.IsAccountOwner,
		&i.FirstName,
		&i.LastName,
		&i.DisplayName,
		&i.PictureUrl,
		&i.Phone,
		&i.Timezone,
		&i.Locale,
		&i.LastLoginAt,
		&i.EmailVerified,
		&i.TwoFactorEnabled,
		&i.Status,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.AccountName,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, supabase_id, email, account_id, role, is_account_owner, first_name, last_name, display_name, picture_url, phone, timezone, locale, last_login_at, email_verified, two_factor_enabled, status, metadata, created_at, updated_at, deleted_at FROM users
WHERE email = $1 AND deleted_at IS NULL
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.SupabaseID,
		&i.Email,
		&i.AccountID,
		&i.Role,
		&i.IsAccountOwner,
		&i.FirstName,
		&i.LastName,
		&i.DisplayName,
		&i.PictureUrl,
		&i.Phone,
		&i.Timezone,
		&i.Locale,
		&i.LastLoginAt,
		&i.EmailVerified,
		&i.TwoFactorEnabled,
		&i.Status,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, supabase_id, email, account_id, role, is_account_owner, first_name, last_name, display_name, picture_url, phone, timezone, locale, last_login_at, email_verified, two_factor_enabled, status, metadata, created_at, updated_at, deleted_at FROM users
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.SupabaseID,
		&i.Email,
		&i.AccountID,
		&i.Role,
		&i.IsAccountOwner,
		&i.FirstName,
		&i.LastName,
		&i.DisplayName,
		&i.PictureUrl,
		&i.Phone,
		&i.Timezone,
		&i.Locale,
		&i.LastLoginAt,
		&i.EmailVerified,
		&i.TwoFactorEnabled,
		&i.Status,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserBySupabaseID = `-- name: GetUserBySupabaseID :one
SELECT id, supabase_id, email, account_id, role, is_account_owner, first_name, last_name, display_name, picture_url, phone, timezone, locale, last_login_at, email_verified, two_factor_enabled, status, metadata, created_at, updated_at, deleted_at FROM users
WHERE supabase_id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetUserBySupabaseID(ctx context.Context, supabaseID string) (User, error) {
	row := q.db.QueryRow(ctx, getUserBySupabaseID, supabaseID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.SupabaseID,
		&i.Email,
		&i.AccountID,
		&i.Role,
		&i.IsAccountOwner,
		&i.FirstName,
		&i.LastName,
		&i.DisplayName,
		&i.PictureUrl,
		&i.Phone,
		&i.Timezone,
		&i.Locale,
		&i.LastLoginAt,
		&i.EmailVerified,
		&i.TwoFactorEnabled,
		&i.Status,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, supabase_id, email, account_id, role, is_account_owner, first_name, last_name, display_name, picture_url, phone, timezone, locale, last_login_at, email_verified, two_factor_enabled, status, metadata, created_at, updated_at, deleted_at FROM users
ORDER BY created_at
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.SupabaseID,
			&i.Email,
			&i.AccountID,
			&i.Role,
			&i.IsAccountOwner,
			&i.FirstName,
			&i.LastName,
			&i.DisplayName,
			&i.PictureUrl,
			&i.Phone,
			&i.Timezone,
			&i.Locale,
			&i.LastLoginAt,
			&i.EmailVerified,
			&i.TwoFactorEnabled,
			&i.Status,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersByAccount = `-- name: ListUsersByAccount :many
SELECT id, supabase_id, email, account_id, role, is_account_owner, first_name, last_name, display_name, picture_url, phone, timezone, locale, last_login_at, email_verified, two_factor_enabled, status, metadata, created_at, updated_at, deleted_at FROM users
WHERE account_id = $1 AND deleted_at IS NULL
ORDER BY is_account_owner DESC, created_at DESC
`

func (q *Queries) ListUsersByAccount(ctx context.Context, accountID uuid.UUID) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsersByAccount, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.SupabaseID,
			&i.Email,
			&i.AccountID,
			&i.Role,
			&i.IsAccountOwner,
			&i.FirstName,
			&i.LastName,
			&i.DisplayName,
			&i.PictureUrl,
			&i.Phone,
			&i.Timezone,
			&i.Locale,
			&i.LastLoginAt,
			&i.EmailVerified,
			&i.TwoFactorEnabled,
			&i.Status,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    email = COALESCE($1, email),
    first_name = COALESCE($2, first_name),
    last_name = COALESCE($3, last_name),
    display_name = COALESCE($4, display_name),
    picture_url = COALESCE($5, picture_url),
    phone = COALESCE($6, phone),
    timezone = COALESCE($7, timezone),
    locale = COALESCE($8, locale),
    email_verified = COALESCE($9, email_verified),
    two_factor_enabled = COALESCE($10, two_factor_enabled),
    status = COALESCE($11, status),
    metadata = COALESCE($12, metadata),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, supabase_id, email, account_id, role, is_account_owner, first_name, last_name, display_name, picture_url, phone, timezone, locale, last_login_at, email_verified, two_factor_enabled, status, metadata, created_at, updated_at, deleted_at
`

type UpdateUserParams struct {
	Email            string         `json:"email"`
	FirstName        pgtype.Text    `json:"first_name"`
	LastName         pgtype.Text    `json:"last_name"`
	DisplayName      pgtype.Text    `json:"display_name"`
	PictureUrl       pgtype.Text    `json:"picture_url"`
	Phone            pgtype.Text    `json:"phone"`
	Timezone         pgtype.Text    `json:"timezone"`
	Locale           pgtype.Text    `json:"locale"`
	EmailVerified    pgtype.Bool    `json:"email_verified"`
	TwoFactorEnabled pgtype.Bool    `json:"two_factor_enabled"`
	Status           NullUserStatus `json:"status"`
	Metadata         []byte         `json:"metadata"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.DisplayName,
		arg.PictureUrl,
		arg.Phone,
		arg.Timezone,
		arg.Locale,
		arg.EmailVerified,
		arg.TwoFactorEnabled,
		arg.Status,
		arg.Metadata,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.SupabaseID,
		&i.Email,
		&i.AccountID,
		&i.Role,
		&i.IsAccountOwner,
		&i.FirstName,
		&i.LastName,
		&i.DisplayName,
		&i.PictureUrl,
		&i.Phone,
		&i.Timezone,
		&i.Locale,
		&i.LastLoginAt,
		&i.EmailVerified,
		&i.TwoFactorEnabled,
		&i.Status,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateUserRole = `-- name: UpdateUserRole :one
UPDATE users
SET
    role = $2,
    is_account_owner = $3,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, supabase_id, email, account_id, role, is_account_owner, first_name, last_name, display_name, picture_url, phone, timezone, locale, last_login_at, email_verified, two_factor_enabled, status, metadata, created_at, updated_at, deleted_at
`

type UpdateUserRoleParams struct {
	ID             uuid.UUID   `json:"id"`
	Role           UserRole    `json:"role"`
	IsAccountOwner pgtype.Bool `json:"is_account_owner"`
}

func (q *Queries) UpdateUserRole(ctx context.Context, arg UpdateUserRoleParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserRole, arg.ID, arg.Role, arg.IsAccountOwner)
	var i User
	err := row.Scan(
		&i.ID,
		&i.SupabaseID,
		&i.Email,
		&i.AccountID,
		&i.Role,
		&i.IsAccountOwner,
		&i.FirstName,
		&i.LastName,
		&i.DisplayName,
		&i.PictureUrl,
		&i.Phone,
		&i.Timezone,
		&i.Locale,
		&i.LastLoginAt,
		&i.EmailVerified,
		&i.TwoFactorEnabled,
		&i.Status,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
