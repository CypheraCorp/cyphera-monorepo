// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    auth0_id,
    email,
    role,
    name,
    picture_url,
    metadata
) VALUES (
    $1, $2, $3, $4, $5, $6
)
RETURNING id, auth0_id, email, role, name, picture_url, metadata, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	Auth0ID    string      `json:"auth0_id"`
	Email      string      `json:"email"`
	Role       UserRole    `json:"role"`
	Name       pgtype.Text `json:"name"`
	PictureUrl pgtype.Text `json:"picture_url"`
	Metadata   []byte      `json:"metadata"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Auth0ID,
		arg.Email,
		arg.Role,
		arg.Name,
		arg.PictureUrl,
		arg.Metadata,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Auth0ID,
		&i.Email,
		&i.Role,
		&i.Name,
		&i.PictureUrl,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE users
SET deleted_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, auth0_id, email, role, name, picture_url, metadata, created_at, updated_at, deleted_at FROM users
ORDER BY created_at DESC
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Auth0ID,
			&i.Email,
			&i.Role,
			&i.Name,
			&i.PictureUrl,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, auth0_id, email, role, name, picture_url, metadata, created_at, updated_at, deleted_at FROM users
WHERE id = $1 AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Auth0ID,
		&i.Email,
		&i.Role,
		&i.Name,
		&i.PictureUrl,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByAuth0ID = `-- name: GetUserByAuth0ID :one
SELECT id, auth0_id, email, role, name, picture_url, metadata, created_at, updated_at, deleted_at FROM users
WHERE auth0_id = $1 AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) GetUserByAuth0ID(ctx context.Context, auth0ID string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByAuth0ID, auth0ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Auth0ID,
		&i.Email,
		&i.Role,
		&i.Name,
		&i.PictureUrl,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, auth0_id, email, role, name, picture_url, metadata, created_at, updated_at, deleted_at FROM users
WHERE email = $1 AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Auth0ID,
		&i.Email,
		&i.Role,
		&i.Name,
		&i.PictureUrl,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const hardDeleteUser = `-- name: HardDeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) HardDeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, hardDeleteUser, id)
	return err
}

const listUsers = `-- name: ListUsers :many
SELECT id, auth0_id, email, role, name, picture_url, metadata, created_at, updated_at, deleted_at FROM users
WHERE deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Auth0ID,
			&i.Email,
			&i.Role,
			&i.Name,
			&i.PictureUrl,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    email = COALESCE($2, email),
    role = COALESCE($3, role),
    name = COALESCE($4, name),
    picture_url = COALESCE($5, picture_url),
    metadata = COALESCE($6, metadata),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, auth0_id, email, role, name, picture_url, metadata, created_at, updated_at, deleted_at
`

type UpdateUserParams struct {
	ID         uuid.UUID   `json:"id"`
	Email      string      `json:"email"`
	Role       UserRole    `json:"role"`
	Name       pgtype.Text `json:"name"`
	PictureUrl pgtype.Text `json:"picture_url"`
	Metadata   []byte      `json:"metadata"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Email,
		arg.Role,
		arg.Name,
		arg.PictureUrl,
		arg.Metadata,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Auth0ID,
		&i.Email,
		&i.Role,
		&i.Name,
		&i.PictureUrl,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateUserFull = `-- name: UpdateUserFull :one
UPDATE users
SET
    email = $2,
    role = $3,
    name = $4,
    picture_url = $5,
    metadata = $6,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, auth0_id, email, role, name, picture_url, metadata, created_at, updated_at, deleted_at
`

type UpdateUserFullParams struct {
	ID         uuid.UUID   `json:"id"`
	Email      string      `json:"email"`
	Role       UserRole    `json:"role"`
	Name       pgtype.Text `json:"name"`
	PictureUrl pgtype.Text `json:"picture_url"`
	Metadata   []byte      `json:"metadata"`
}

func (q *Queries) UpdateUserFull(ctx context.Context, arg UpdateUserFullParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserFull,
		arg.ID,
		arg.Email,
		arg.Role,
		arg.Name,
		arg.PictureUrl,
		arg.Metadata,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Auth0ID,
		&i.Email,
		&i.Role,
		&i.Name,
		&i.PictureUrl,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
