// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: workspace.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createWorkspace = `-- name: CreateWorkspace :one
INSERT INTO workspaces (
    account_id,
    name,
    description,
    business_name,
    business_type,
    website_url,
    support_email,
    support_phone,
    metadata,
    livemode
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
)
RETURNING id, account_id, name, description, business_name, business_type, website_url, support_email, support_phone, metadata, livemode, created_at, updated_at, deleted_at
`

type CreateWorkspaceParams struct {
	AccountID    uuid.UUID   `json:"account_id"`
	Name         string      `json:"name"`
	Description  pgtype.Text `json:"description"`
	BusinessName pgtype.Text `json:"business_name"`
	BusinessType pgtype.Text `json:"business_type"`
	WebsiteUrl   pgtype.Text `json:"website_url"`
	SupportEmail pgtype.Text `json:"support_email"`
	SupportPhone pgtype.Text `json:"support_phone"`
	Metadata     []byte      `json:"metadata"`
	Livemode     pgtype.Bool `json:"livemode"`
}

func (q *Queries) CreateWorkspace(ctx context.Context, arg CreateWorkspaceParams) (Workspace, error) {
	row := q.db.QueryRow(ctx, createWorkspace,
		arg.AccountID,
		arg.Name,
		arg.Description,
		arg.BusinessName,
		arg.BusinessType,
		arg.WebsiteUrl,
		arg.SupportEmail,
		arg.SupportPhone,
		arg.Metadata,
		arg.Livemode,
	)
	var i Workspace
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Name,
		&i.Description,
		&i.BusinessName,
		&i.BusinessType,
		&i.WebsiteUrl,
		&i.SupportEmail,
		&i.SupportPhone,
		&i.Metadata,
		&i.Livemode,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteWorkspace = `-- name: DeleteWorkspace :exec
UPDATE workspaces
SET deleted_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) DeleteWorkspace(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteWorkspace, id)
	return err
}

const getAccountByWorkspaceID = `-- name: GetAccountByWorkspaceID :one
SELECT a.id, a.name, a.account_type, a.owner_id, a.business_name, a.business_type, a.website_url, a.support_email, a.support_phone, a.metadata, a.finished_onboarding, a.created_at, a.updated_at, a.deleted_at FROM accounts a
JOIN workspaces w ON w.account_id = a.id
WHERE w.id = $1 
AND w.deleted_at IS NULL 
AND a.deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetAccountByWorkspaceID(ctx context.Context, id uuid.UUID) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountByWorkspaceID, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AccountType,
		&i.OwnerID,
		&i.BusinessName,
		&i.BusinessType,
		&i.WebsiteUrl,
		&i.SupportEmail,
		&i.SupportPhone,
		&i.Metadata,
		&i.FinishedOnboarding,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getAllWorkspaces = `-- name: GetAllWorkspaces :many
SELECT id, account_id, name, description, business_name, business_type, website_url, support_email, support_phone, metadata, livemode, created_at, updated_at, deleted_at FROM workspaces
ORDER BY created_at DESC
`

func (q *Queries) GetAllWorkspaces(ctx context.Context) ([]Workspace, error) {
	rows, err := q.db.Query(ctx, getAllWorkspaces)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Workspace{}
	for rows.Next() {
		var i Workspace
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Name,
			&i.Description,
			&i.BusinessName,
			&i.BusinessType,
			&i.WebsiteUrl,
			&i.SupportEmail,
			&i.SupportPhone,
			&i.Metadata,
			&i.Livemode,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkspace = `-- name: GetWorkspace :one
SELECT id, account_id, name, description, business_name, business_type, website_url, support_email, support_phone, metadata, livemode, created_at, updated_at, deleted_at FROM workspaces
WHERE id = $1 AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) GetWorkspace(ctx context.Context, id uuid.UUID) (Workspace, error) {
	row := q.db.QueryRow(ctx, getWorkspace, id)
	var i Workspace
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Name,
		&i.Description,
		&i.BusinessName,
		&i.BusinessType,
		&i.WebsiteUrl,
		&i.SupportEmail,
		&i.SupportPhone,
		&i.Metadata,
		&i.Livemode,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const hardDeleteWorkspace = `-- name: HardDeleteWorkspace :exec
DELETE FROM workspaces
WHERE id = $1
`

func (q *Queries) HardDeleteWorkspace(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, hardDeleteWorkspace, id)
	return err
}

const listWorkspaces = `-- name: ListWorkspaces :many
SELECT id, account_id, name, description, business_name, business_type, website_url, support_email, support_phone, metadata, livemode, created_at, updated_at, deleted_at FROM workspaces
WHERE deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) ListWorkspaces(ctx context.Context) ([]Workspace, error) {
	rows, err := q.db.Query(ctx, listWorkspaces)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Workspace{}
	for rows.Next() {
		var i Workspace
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Name,
			&i.Description,
			&i.BusinessName,
			&i.BusinessType,
			&i.WebsiteUrl,
			&i.SupportEmail,
			&i.SupportPhone,
			&i.Metadata,
			&i.Livemode,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWorkspacesByAccountID = `-- name: ListWorkspacesByAccountID :many
SELECT id, account_id, name, description, business_name, business_type, website_url, support_email, support_phone, metadata, livemode, created_at, updated_at, deleted_at FROM workspaces
WHERE account_id = $1 
AND deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) ListWorkspacesByAccountID(ctx context.Context, accountID uuid.UUID) ([]Workspace, error) {
	rows, err := q.db.Query(ctx, listWorkspacesByAccountID, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Workspace{}
	for rows.Next() {
		var i Workspace
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Name,
			&i.Description,
			&i.BusinessName,
			&i.BusinessType,
			&i.WebsiteUrl,
			&i.SupportEmail,
			&i.SupportPhone,
			&i.Metadata,
			&i.Livemode,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWorkspace = `-- name: UpdateWorkspace :one
UPDATE workspaces
SET
    name = COALESCE($2, name),
    description = COALESCE($3, description),
    business_name = COALESCE($4, business_name),
    business_type = COALESCE($5, business_type),
    website_url = COALESCE($6, website_url),
    support_email = COALESCE($7, support_email),
    support_phone = COALESCE($8, support_phone),
    metadata = COALESCE($9, metadata),
    livemode = COALESCE($10, livemode),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, account_id, name, description, business_name, business_type, website_url, support_email, support_phone, metadata, livemode, created_at, updated_at, deleted_at
`

type UpdateWorkspaceParams struct {
	ID           uuid.UUID   `json:"id"`
	Name         string      `json:"name"`
	Description  pgtype.Text `json:"description"`
	BusinessName pgtype.Text `json:"business_name"`
	BusinessType pgtype.Text `json:"business_type"`
	WebsiteUrl   pgtype.Text `json:"website_url"`
	SupportEmail pgtype.Text `json:"support_email"`
	SupportPhone pgtype.Text `json:"support_phone"`
	Metadata     []byte      `json:"metadata"`
	Livemode     pgtype.Bool `json:"livemode"`
}

func (q *Queries) UpdateWorkspace(ctx context.Context, arg UpdateWorkspaceParams) (Workspace, error) {
	row := q.db.QueryRow(ctx, updateWorkspace,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.BusinessName,
		arg.BusinessType,
		arg.WebsiteUrl,
		arg.SupportEmail,
		arg.SupportPhone,
		arg.Metadata,
		arg.Livemode,
	)
	var i Workspace
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Name,
		&i.Description,
		&i.BusinessName,
		&i.BusinessType,
		&i.WebsiteUrl,
		&i.SupportEmail,
		&i.SupportPhone,
		&i.Metadata,
		&i.Livemode,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
