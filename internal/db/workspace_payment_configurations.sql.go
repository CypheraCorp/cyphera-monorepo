// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: workspace_payment_configurations.sql

package db

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const checkWorkspaceHasPaymentProvider = `-- name: CheckWorkspaceHasPaymentProvider :one

SELECT EXISTS(
    SELECT 1 FROM workspace_payment_configurations 
    WHERE workspace_id = $1 AND provider_name = $2 AND is_active = true AND deleted_at IS NULL
)
`

type CheckWorkspaceHasPaymentProviderParams struct {
	WorkspaceID  uuid.UUID `json:"workspace_id"`
	ProviderName string    `json:"provider_name"`
}

// Validation and utility queries
func (q *Queries) CheckWorkspaceHasPaymentProvider(ctx context.Context, arg CheckWorkspaceHasPaymentProviderParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkWorkspaceHasPaymentProvider, arg.WorkspaceID, arg.ProviderName)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const countWorkspacePaymentConfigurations = `-- name: CountWorkspacePaymentConfigurations :one
SELECT COUNT(*) FROM workspace_payment_configurations 
WHERE workspace_id = $1 AND deleted_at IS NULL
`

func (q *Queries) CountWorkspacePaymentConfigurations(ctx context.Context, workspaceID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countWorkspacePaymentConfigurations, workspaceID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createWorkspacePaymentConfiguration = `-- name: CreateWorkspacePaymentConfiguration :one

INSERT INTO workspace_payment_configurations (
    workspace_id,
    provider_name,
    is_active,
    is_test_mode,
    configuration,
    webhook_endpoint_url,
    webhook_secret_key,
    connected_account_id,
    metadata
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, workspace_id, provider_name, is_active, is_test_mode, configuration, webhook_endpoint_url, webhook_secret_key, connected_account_id, last_sync_at, last_webhook_at, metadata, created_at, updated_at, deleted_at
`

type CreateWorkspacePaymentConfigurationParams struct {
	WorkspaceID        uuid.UUID       `json:"workspace_id"`
	ProviderName       string          `json:"provider_name"`
	IsActive           bool            `json:"is_active"`
	IsTestMode         bool            `json:"is_test_mode"`
	Configuration      json.RawMessage `json:"configuration"`
	WebhookEndpointUrl pgtype.Text     `json:"webhook_endpoint_url"`
	WebhookSecretKey   pgtype.Text     `json:"webhook_secret_key"`
	ConnectedAccountID pgtype.Text     `json:"connected_account_id"`
	Metadata           []byte          `json:"metadata"`
}

// Workspace Payment Configuration Queries
func (q *Queries) CreateWorkspacePaymentConfiguration(ctx context.Context, arg CreateWorkspacePaymentConfigurationParams) (WorkspacePaymentConfiguration, error) {
	row := q.db.QueryRow(ctx, createWorkspacePaymentConfiguration,
		arg.WorkspaceID,
		arg.ProviderName,
		arg.IsActive,
		arg.IsTestMode,
		arg.Configuration,
		arg.WebhookEndpointUrl,
		arg.WebhookSecretKey,
		arg.ConnectedAccountID,
		arg.Metadata,
	)
	var i WorkspacePaymentConfiguration
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.ProviderName,
		&i.IsActive,
		&i.IsTestMode,
		&i.Configuration,
		&i.WebhookEndpointUrl,
		&i.WebhookSecretKey,
		&i.ConnectedAccountID,
		&i.LastSyncAt,
		&i.LastWebhookAt,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deactivateWorkspacePaymentConfiguration = `-- name: DeactivateWorkspacePaymentConfiguration :one
UPDATE workspace_payment_configurations 
SET 
    is_active = false,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND workspace_id = $2 AND deleted_at IS NULL
RETURNING id, workspace_id, provider_name, is_active, is_test_mode, configuration, webhook_endpoint_url, webhook_secret_key, connected_account_id, last_sync_at, last_webhook_at, metadata, created_at, updated_at, deleted_at
`

type DeactivateWorkspacePaymentConfigurationParams struct {
	ID          uuid.UUID `json:"id"`
	WorkspaceID uuid.UUID `json:"workspace_id"`
}

func (q *Queries) DeactivateWorkspacePaymentConfiguration(ctx context.Context, arg DeactivateWorkspacePaymentConfigurationParams) (WorkspacePaymentConfiguration, error) {
	row := q.db.QueryRow(ctx, deactivateWorkspacePaymentConfiguration, arg.ID, arg.WorkspaceID)
	var i WorkspacePaymentConfiguration
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.ProviderName,
		&i.IsActive,
		&i.IsTestMode,
		&i.Configuration,
		&i.WebhookEndpointUrl,
		&i.WebhookSecretKey,
		&i.ConnectedAccountID,
		&i.LastSyncAt,
		&i.LastWebhookAt,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteWorkspacePaymentConfiguration = `-- name: DeleteWorkspacePaymentConfiguration :one
UPDATE workspace_payment_configurations 
SET 
    deleted_at = CURRENT_TIMESTAMP,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND workspace_id = $2 AND deleted_at IS NULL
RETURNING id, workspace_id, provider_name, is_active, is_test_mode, configuration, webhook_endpoint_url, webhook_secret_key, connected_account_id, last_sync_at, last_webhook_at, metadata, created_at, updated_at, deleted_at
`

type DeleteWorkspacePaymentConfigurationParams struct {
	ID          uuid.UUID `json:"id"`
	WorkspaceID uuid.UUID `json:"workspace_id"`
}

func (q *Queries) DeleteWorkspacePaymentConfiguration(ctx context.Context, arg DeleteWorkspacePaymentConfigurationParams) (WorkspacePaymentConfiguration, error) {
	row := q.db.QueryRow(ctx, deleteWorkspacePaymentConfiguration, arg.ID, arg.WorkspaceID)
	var i WorkspacePaymentConfiguration
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.ProviderName,
		&i.IsActive,
		&i.IsTestMode,
		&i.Configuration,
		&i.WebhookEndpointUrl,
		&i.WebhookSecretKey,
		&i.ConnectedAccountID,
		&i.LastSyncAt,
		&i.LastWebhookAt,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getWorkspaceActiveProviders = `-- name: GetWorkspaceActiveProviders :many
SELECT DISTINCT provider_name FROM workspace_payment_configurations 
WHERE workspace_id = $1 AND is_active = true AND deleted_at IS NULL
`

func (q *Queries) GetWorkspaceActiveProviders(ctx context.Context, workspaceID uuid.UUID) ([]string, error) {
	rows, err := q.db.Query(ctx, getWorkspaceActiveProviders, workspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var provider_name string
		if err := rows.Scan(&provider_name); err != nil {
			return nil, err
		}
		items = append(items, provider_name)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkspacePaymentConfiguration = `-- name: GetWorkspacePaymentConfiguration :one
SELECT id, workspace_id, provider_name, is_active, is_test_mode, configuration, webhook_endpoint_url, webhook_secret_key, connected_account_id, last_sync_at, last_webhook_at, metadata, created_at, updated_at, deleted_at FROM workspace_payment_configurations 
WHERE workspace_id = $1 AND provider_name = $2 AND is_active = true AND deleted_at IS NULL
`

type GetWorkspacePaymentConfigurationParams struct {
	WorkspaceID  uuid.UUID `json:"workspace_id"`
	ProviderName string    `json:"provider_name"`
}

func (q *Queries) GetWorkspacePaymentConfiguration(ctx context.Context, arg GetWorkspacePaymentConfigurationParams) (WorkspacePaymentConfiguration, error) {
	row := q.db.QueryRow(ctx, getWorkspacePaymentConfiguration, arg.WorkspaceID, arg.ProviderName)
	var i WorkspacePaymentConfiguration
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.ProviderName,
		&i.IsActive,
		&i.IsTestMode,
		&i.Configuration,
		&i.WebhookEndpointUrl,
		&i.WebhookSecretKey,
		&i.ConnectedAccountID,
		&i.LastSyncAt,
		&i.LastWebhookAt,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getWorkspacePaymentConfigurationByConnectedAccount = `-- name: GetWorkspacePaymentConfigurationByConnectedAccount :one
SELECT id, workspace_id, provider_name, is_active, is_test_mode, configuration, webhook_endpoint_url, webhook_secret_key, connected_account_id, last_sync_at, last_webhook_at, metadata, created_at, updated_at, deleted_at FROM workspace_payment_configurations 
WHERE connected_account_id = $1 AND provider_name = $2 AND is_active = true AND deleted_at IS NULL
`

type GetWorkspacePaymentConfigurationByConnectedAccountParams struct {
	ConnectedAccountID pgtype.Text `json:"connected_account_id"`
	ProviderName       string      `json:"provider_name"`
}

func (q *Queries) GetWorkspacePaymentConfigurationByConnectedAccount(ctx context.Context, arg GetWorkspacePaymentConfigurationByConnectedAccountParams) (WorkspacePaymentConfiguration, error) {
	row := q.db.QueryRow(ctx, getWorkspacePaymentConfigurationByConnectedAccount, arg.ConnectedAccountID, arg.ProviderName)
	var i WorkspacePaymentConfiguration
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.ProviderName,
		&i.IsActive,
		&i.IsTestMode,
		&i.Configuration,
		&i.WebhookEndpointUrl,
		&i.WebhookSecretKey,
		&i.ConnectedAccountID,
		&i.LastSyncAt,
		&i.LastWebhookAt,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getWorkspacePaymentConfigurationByID = `-- name: GetWorkspacePaymentConfigurationByID :one
SELECT id, workspace_id, provider_name, is_active, is_test_mode, configuration, webhook_endpoint_url, webhook_secret_key, connected_account_id, last_sync_at, last_webhook_at, metadata, created_at, updated_at, deleted_at FROM workspace_payment_configurations 
WHERE id = $1 AND workspace_id = $2 AND deleted_at IS NULL
`

type GetWorkspacePaymentConfigurationByIDParams struct {
	ID          uuid.UUID `json:"id"`
	WorkspaceID uuid.UUID `json:"workspace_id"`
}

func (q *Queries) GetWorkspacePaymentConfigurationByID(ctx context.Context, arg GetWorkspacePaymentConfigurationByIDParams) (WorkspacePaymentConfiguration, error) {
	row := q.db.QueryRow(ctx, getWorkspacePaymentConfigurationByID, arg.ID, arg.WorkspaceID)
	var i WorkspacePaymentConfiguration
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.ProviderName,
		&i.IsActive,
		&i.IsTestMode,
		&i.Configuration,
		&i.WebhookEndpointUrl,
		&i.WebhookSecretKey,
		&i.ConnectedAccountID,
		&i.LastSyncAt,
		&i.LastWebhookAt,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getWorkspacePaymentConfigurationByWebhookURL = `-- name: GetWorkspacePaymentConfigurationByWebhookURL :one
SELECT id, workspace_id, provider_name, is_active, is_test_mode, configuration, webhook_endpoint_url, webhook_secret_key, connected_account_id, last_sync_at, last_webhook_at, metadata, created_at, updated_at, deleted_at FROM workspace_payment_configurations 
WHERE webhook_endpoint_url = $1 AND is_active = true AND deleted_at IS NULL
`

func (q *Queries) GetWorkspacePaymentConfigurationByWebhookURL(ctx context.Context, webhookEndpointUrl pgtype.Text) (WorkspacePaymentConfiguration, error) {
	row := q.db.QueryRow(ctx, getWorkspacePaymentConfigurationByWebhookURL, webhookEndpointUrl)
	var i WorkspacePaymentConfiguration
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.ProviderName,
		&i.IsActive,
		&i.IsTestMode,
		&i.Configuration,
		&i.WebhookEndpointUrl,
		&i.WebhookSecretKey,
		&i.ConnectedAccountID,
		&i.LastSyncAt,
		&i.LastWebhookAt,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listActiveWorkspacePaymentConfigurations = `-- name: ListActiveWorkspacePaymentConfigurations :many
SELECT id, workspace_id, provider_name, is_active, is_test_mode, configuration, webhook_endpoint_url, webhook_secret_key, connected_account_id, last_sync_at, last_webhook_at, metadata, created_at, updated_at, deleted_at FROM workspace_payment_configurations 
WHERE workspace_id = $1 AND is_active = true AND deleted_at IS NULL
ORDER BY provider_name
`

func (q *Queries) ListActiveWorkspacePaymentConfigurations(ctx context.Context, workspaceID uuid.UUID) ([]WorkspacePaymentConfiguration, error) {
	rows, err := q.db.Query(ctx, listActiveWorkspacePaymentConfigurations, workspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WorkspacePaymentConfiguration{}
	for rows.Next() {
		var i WorkspacePaymentConfiguration
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.ProviderName,
			&i.IsActive,
			&i.IsTestMode,
			&i.Configuration,
			&i.WebhookEndpointUrl,
			&i.WebhookSecretKey,
			&i.ConnectedAccountID,
			&i.LastSyncAt,
			&i.LastWebhookAt,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWorkspacePaymentConfigurations = `-- name: ListWorkspacePaymentConfigurations :many
SELECT id, workspace_id, provider_name, is_active, is_test_mode, configuration, webhook_endpoint_url, webhook_secret_key, connected_account_id, last_sync_at, last_webhook_at, metadata, created_at, updated_at, deleted_at FROM workspace_payment_configurations 
WHERE workspace_id = $1 AND deleted_at IS NULL
ORDER BY provider_name, created_at DESC
LIMIT $2 OFFSET $3
`

type ListWorkspacePaymentConfigurationsParams struct {
	WorkspaceID uuid.UUID `json:"workspace_id"`
	Limit       int32     `json:"limit"`
	Offset      int32     `json:"offset"`
}

func (q *Queries) ListWorkspacePaymentConfigurations(ctx context.Context, arg ListWorkspacePaymentConfigurationsParams) ([]WorkspacePaymentConfiguration, error) {
	rows, err := q.db.Query(ctx, listWorkspacePaymentConfigurations, arg.WorkspaceID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WorkspacePaymentConfiguration{}
	for rows.Next() {
		var i WorkspacePaymentConfiguration
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.ProviderName,
			&i.IsActive,
			&i.IsTestMode,
			&i.Configuration,
			&i.WebhookEndpointUrl,
			&i.WebhookSecretKey,
			&i.ConnectedAccountID,
			&i.LastSyncAt,
			&i.LastWebhookAt,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWorkspacePaymentConfigurationsByProvider = `-- name: ListWorkspacePaymentConfigurationsByProvider :many
SELECT id, workspace_id, provider_name, is_active, is_test_mode, configuration, webhook_endpoint_url, webhook_secret_key, connected_account_id, last_sync_at, last_webhook_at, metadata, created_at, updated_at, deleted_at FROM workspace_payment_configurations 
WHERE provider_name = $1 AND is_active = true AND deleted_at IS NULL
ORDER BY workspace_id
`

func (q *Queries) ListWorkspacePaymentConfigurationsByProvider(ctx context.Context, providerName string) ([]WorkspacePaymentConfiguration, error) {
	rows, err := q.db.Query(ctx, listWorkspacePaymentConfigurationsByProvider, providerName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WorkspacePaymentConfiguration{}
	for rows.Next() {
		var i WorkspacePaymentConfiguration
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.ProviderName,
			&i.IsActive,
			&i.IsTestMode,
			&i.Configuration,
			&i.WebhookEndpointUrl,
			&i.WebhookSecretKey,
			&i.ConnectedAccountID,
			&i.LastSyncAt,
			&i.LastWebhookAt,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWorkspacePaymentConfiguration = `-- name: UpdateWorkspacePaymentConfiguration :one
UPDATE workspace_payment_configurations 
SET 
    is_active = $3,
    is_test_mode = $4,
    configuration = $5,
    webhook_endpoint_url = $6,
    webhook_secret_key = $7,
    connected_account_id = $8,
    metadata = $9,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND workspace_id = $2 AND deleted_at IS NULL
RETURNING id, workspace_id, provider_name, is_active, is_test_mode, configuration, webhook_endpoint_url, webhook_secret_key, connected_account_id, last_sync_at, last_webhook_at, metadata, created_at, updated_at, deleted_at
`

type UpdateWorkspacePaymentConfigurationParams struct {
	ID                 uuid.UUID       `json:"id"`
	WorkspaceID        uuid.UUID       `json:"workspace_id"`
	IsActive           bool            `json:"is_active"`
	IsTestMode         bool            `json:"is_test_mode"`
	Configuration      json.RawMessage `json:"configuration"`
	WebhookEndpointUrl pgtype.Text     `json:"webhook_endpoint_url"`
	WebhookSecretKey   pgtype.Text     `json:"webhook_secret_key"`
	ConnectedAccountID pgtype.Text     `json:"connected_account_id"`
	Metadata           []byte          `json:"metadata"`
}

func (q *Queries) UpdateWorkspacePaymentConfiguration(ctx context.Context, arg UpdateWorkspacePaymentConfigurationParams) (WorkspacePaymentConfiguration, error) {
	row := q.db.QueryRow(ctx, updateWorkspacePaymentConfiguration,
		arg.ID,
		arg.WorkspaceID,
		arg.IsActive,
		arg.IsTestMode,
		arg.Configuration,
		arg.WebhookEndpointUrl,
		arg.WebhookSecretKey,
		arg.ConnectedAccountID,
		arg.Metadata,
	)
	var i WorkspacePaymentConfiguration
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.ProviderName,
		&i.IsActive,
		&i.IsTestMode,
		&i.Configuration,
		&i.WebhookEndpointUrl,
		&i.WebhookSecretKey,
		&i.ConnectedAccountID,
		&i.LastSyncAt,
		&i.LastWebhookAt,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateWorkspacePaymentConfigurationConfig = `-- name: UpdateWorkspacePaymentConfigurationConfig :one
UPDATE workspace_payment_configurations 
SET 
    configuration = $3,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND workspace_id = $2 AND deleted_at IS NULL
RETURNING id, workspace_id, provider_name, is_active, is_test_mode, configuration, webhook_endpoint_url, webhook_secret_key, connected_account_id, last_sync_at, last_webhook_at, metadata, created_at, updated_at, deleted_at
`

type UpdateWorkspacePaymentConfigurationConfigParams struct {
	ID            uuid.UUID       `json:"id"`
	WorkspaceID   uuid.UUID       `json:"workspace_id"`
	Configuration json.RawMessage `json:"configuration"`
}

func (q *Queries) UpdateWorkspacePaymentConfigurationConfig(ctx context.Context, arg UpdateWorkspacePaymentConfigurationConfigParams) (WorkspacePaymentConfiguration, error) {
	row := q.db.QueryRow(ctx, updateWorkspacePaymentConfigurationConfig, arg.ID, arg.WorkspaceID, arg.Configuration)
	var i WorkspacePaymentConfiguration
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.ProviderName,
		&i.IsActive,
		&i.IsTestMode,
		&i.Configuration,
		&i.WebhookEndpointUrl,
		&i.WebhookSecretKey,
		&i.ConnectedAccountID,
		&i.LastSyncAt,
		&i.LastWebhookAt,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateWorkspacePaymentConfigurationLastSync = `-- name: UpdateWorkspacePaymentConfigurationLastSync :one
UPDATE workspace_payment_configurations 
SET 
    last_sync_at = CURRENT_TIMESTAMP,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND workspace_id = $2 AND deleted_at IS NULL
RETURNING id, workspace_id, provider_name, is_active, is_test_mode, configuration, webhook_endpoint_url, webhook_secret_key, connected_account_id, last_sync_at, last_webhook_at, metadata, created_at, updated_at, deleted_at
`

type UpdateWorkspacePaymentConfigurationLastSyncParams struct {
	ID          uuid.UUID `json:"id"`
	WorkspaceID uuid.UUID `json:"workspace_id"`
}

func (q *Queries) UpdateWorkspacePaymentConfigurationLastSync(ctx context.Context, arg UpdateWorkspacePaymentConfigurationLastSyncParams) (WorkspacePaymentConfiguration, error) {
	row := q.db.QueryRow(ctx, updateWorkspacePaymentConfigurationLastSync, arg.ID, arg.WorkspaceID)
	var i WorkspacePaymentConfiguration
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.ProviderName,
		&i.IsActive,
		&i.IsTestMode,
		&i.Configuration,
		&i.WebhookEndpointUrl,
		&i.WebhookSecretKey,
		&i.ConnectedAccountID,
		&i.LastSyncAt,
		&i.LastWebhookAt,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateWorkspacePaymentConfigurationLastWebhook = `-- name: UpdateWorkspacePaymentConfigurationLastWebhook :one
UPDATE workspace_payment_configurations 
SET 
    last_webhook_at = CURRENT_TIMESTAMP,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND workspace_id = $2 AND deleted_at IS NULL
RETURNING id, workspace_id, provider_name, is_active, is_test_mode, configuration, webhook_endpoint_url, webhook_secret_key, connected_account_id, last_sync_at, last_webhook_at, metadata, created_at, updated_at, deleted_at
`

type UpdateWorkspacePaymentConfigurationLastWebhookParams struct {
	ID          uuid.UUID `json:"id"`
	WorkspaceID uuid.UUID `json:"workspace_id"`
}

func (q *Queries) UpdateWorkspacePaymentConfigurationLastWebhook(ctx context.Context, arg UpdateWorkspacePaymentConfigurationLastWebhookParams) (WorkspacePaymentConfiguration, error) {
	row := q.db.QueryRow(ctx, updateWorkspacePaymentConfigurationLastWebhook, arg.ID, arg.WorkspaceID)
	var i WorkspacePaymentConfiguration
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.ProviderName,
		&i.IsActive,
		&i.IsTestMode,
		&i.Configuration,
		&i.WebhookEndpointUrl,
		&i.WebhookSecretKey,
		&i.ConnectedAccountID,
		&i.LastSyncAt,
		&i.LastWebhookAt,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
