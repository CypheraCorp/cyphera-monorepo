// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: api_keys.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createAPIKey = `-- name: CreateAPIKey :one
INSERT INTO api_keys (
    workspace_id,
    name,
    key_hash,
    access_level,
    expires_at,
    metadata
) VALUES (
    $1, $2, $3, $4, $5, $6
)
RETURNING id, workspace_id, name, key_hash, access_level, expires_at, last_used_at, metadata, created_at, updated_at, deleted_at
`

type CreateAPIKeyParams struct {
	WorkspaceID uuid.UUID          `json:"workspace_id"`
	Name        string             `json:"name"`
	KeyHash     string             `json:"key_hash"`
	AccessLevel ApiKeyLevel        `json:"access_level"`
	ExpiresAt   pgtype.Timestamptz `json:"expires_at"`
	Metadata    []byte             `json:"metadata"`
}

func (q *Queries) CreateAPIKey(ctx context.Context, arg CreateAPIKeyParams) (ApiKey, error) {
	row := q.db.QueryRow(ctx, createAPIKey,
		arg.WorkspaceID,
		arg.Name,
		arg.KeyHash,
		arg.AccessLevel,
		arg.ExpiresAt,
		arg.Metadata,
	)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.Name,
		&i.KeyHash,
		&i.AccessLevel,
		&i.ExpiresAt,
		&i.LastUsedAt,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteAPIKey = `-- name: DeleteAPIKey :exec
UPDATE api_keys
SET deleted_at = CURRENT_TIMESTAMP
WHERE id = $1 AND workspace_id = $2 AND deleted_at IS NULL
`

type DeleteAPIKeyParams struct {
	ID          uuid.UUID `json:"id"`
	WorkspaceID uuid.UUID `json:"workspace_id"`
}

func (q *Queries) DeleteAPIKey(ctx context.Context, arg DeleteAPIKeyParams) error {
	_, err := q.db.Exec(ctx, deleteAPIKey, arg.ID, arg.WorkspaceID)
	return err
}

const getAPIKey = `-- name: GetAPIKey :one
SELECT id, workspace_id, name, key_hash, access_level, expires_at, last_used_at, metadata, created_at, updated_at, deleted_at FROM api_keys
WHERE id = $1 AND workspace_id = $2 AND deleted_at IS NULL LIMIT 1
`

type GetAPIKeyParams struct {
	ID          uuid.UUID `json:"id"`
	WorkspaceID uuid.UUID `json:"workspace_id"`
}

func (q *Queries) GetAPIKey(ctx context.Context, arg GetAPIKeyParams) (ApiKey, error) {
	row := q.db.QueryRow(ctx, getAPIKey, arg.ID, arg.WorkspaceID)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.Name,
		&i.KeyHash,
		&i.AccessLevel,
		&i.ExpiresAt,
		&i.LastUsedAt,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getAPIKeyByKey = `-- name: GetAPIKeyByKey :one
SELECT id, workspace_id, name, key_hash, access_level, expires_at, last_used_at, metadata, created_at, updated_at, deleted_at FROM api_keys
WHERE key_hash = $1 AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) GetAPIKeyByKey(ctx context.Context, keyHash string) (ApiKey, error) {
	row := q.db.QueryRow(ctx, getAPIKeyByKey, keyHash)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.Name,
		&i.KeyHash,
		&i.AccessLevel,
		&i.ExpiresAt,
		&i.LastUsedAt,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getActiveAPIKeysCount = `-- name: GetActiveAPIKeysCount :one
SELECT COUNT(*) FROM api_keys
WHERE workspace_id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetActiveAPIKeysCount(ctx context.Context, workspaceID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getActiveAPIKeysCount, workspaceID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAllAPIKeys = `-- name: GetAllAPIKeys :many
SELECT id, workspace_id, name, key_hash, access_level, expires_at, last_used_at, metadata, created_at, updated_at, deleted_at FROM api_keys
ORDER BY created_at DESC
`

func (q *Queries) GetAllAPIKeys(ctx context.Context) ([]ApiKey, error) {
	rows, err := q.db.Query(ctx, getAllAPIKeys)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ApiKey{}
	for rows.Next() {
		var i ApiKey
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.Name,
			&i.KeyHash,
			&i.AccessLevel,
			&i.ExpiresAt,
			&i.LastUsedAt,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExpiredAPIKeys = `-- name: GetExpiredAPIKeys :many
SELECT id, workspace_id, name, key_hash, access_level, expires_at, last_used_at, metadata, created_at, updated_at, deleted_at FROM api_keys
WHERE expires_at < CURRENT_TIMESTAMP AND deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) GetExpiredAPIKeys(ctx context.Context) ([]ApiKey, error) {
	rows, err := q.db.Query(ctx, getExpiredAPIKeys)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ApiKey{}
	for rows.Next() {
		var i ApiKey
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.Name,
			&i.KeyHash,
			&i.AccessLevel,
			&i.ExpiresAt,
			&i.LastUsedAt,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAPIKeys = `-- name: ListAPIKeys :many
SELECT id, workspace_id, name, key_hash, access_level, expires_at, last_used_at, metadata, created_at, updated_at, deleted_at FROM api_keys
WHERE workspace_id = $1 AND deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) ListAPIKeys(ctx context.Context, workspaceID uuid.UUID) ([]ApiKey, error) {
	rows, err := q.db.Query(ctx, listAPIKeys, workspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ApiKey{}
	for rows.Next() {
		var i ApiKey
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.Name,
			&i.KeyHash,
			&i.AccessLevel,
			&i.ExpiresAt,
			&i.LastUsedAt,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAPIKey = `-- name: UpdateAPIKey :one
UPDATE api_keys
SET
    name = COALESCE($3, name),
    access_level = COALESCE($4, access_level),
    expires_at = COALESCE($5, expires_at),
    metadata = COALESCE($6, metadata),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND workspace_id = $2 AND deleted_at IS NULL
RETURNING id, workspace_id, name, key_hash, access_level, expires_at, last_used_at, metadata, created_at, updated_at, deleted_at
`

type UpdateAPIKeyParams struct {
	ID          uuid.UUID          `json:"id"`
	WorkspaceID uuid.UUID          `json:"workspace_id"`
	Name        string             `json:"name"`
	AccessLevel ApiKeyLevel        `json:"access_level"`
	ExpiresAt   pgtype.Timestamptz `json:"expires_at"`
	Metadata    []byte             `json:"metadata"`
}

func (q *Queries) UpdateAPIKey(ctx context.Context, arg UpdateAPIKeyParams) (ApiKey, error) {
	row := q.db.QueryRow(ctx, updateAPIKey,
		arg.ID,
		arg.WorkspaceID,
		arg.Name,
		arg.AccessLevel,
		arg.ExpiresAt,
		arg.Metadata,
	)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.Name,
		&i.KeyHash,
		&i.AccessLevel,
		&i.ExpiresAt,
		&i.LastUsedAt,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
