// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: api_keys_auth.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const getAllActiveAPIKeys = `-- name: GetAllActiveAPIKeys :many
SELECT id, workspace_id, name, key_hash, key_prefix, access_level, expires_at, last_used_at, metadata, created_at, updated_at, deleted_at FROM api_keys
WHERE deleted_at IS NULL 
  AND (expires_at IS NULL OR expires_at > CURRENT_TIMESTAMP)
ORDER BY created_at DESC
`

// Used for authentication - retrieves all active API keys for bcrypt comparison
func (q *Queries) GetAllActiveAPIKeys(ctx context.Context) ([]ApiKey, error) {
	rows, err := q.db.Query(ctx, getAllActiveAPIKeys)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ApiKey{}
	for rows.Next() {
		var i ApiKey
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.Name,
			&i.KeyHash,
			&i.KeyPrefix,
			&i.AccessLevel,
			&i.ExpiresAt,
			&i.LastUsedAt,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAPIKeyLastUsed = `-- name: UpdateAPIKeyLastUsed :exec
UPDATE api_keys
SET last_used_at = CURRENT_TIMESTAMP
WHERE id = $1
`

// Updates the last_used_at timestamp after successful authentication
func (q *Queries) UpdateAPIKeyLastUsed(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, updateAPIKeyLastUsed, id)
	return err
}
