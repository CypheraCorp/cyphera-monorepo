// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: copyfrom.go

package db

import (
	"context"
)

// iteratorForBatchCreateSubscriptionLineItems implements pgx.CopyFromSource.
type iteratorForBatchCreateSubscriptionLineItems struct {
	rows                 []BatchCreateSubscriptionLineItemsParams
	skippedFirstNextCall bool
}

func (r *iteratorForBatchCreateSubscriptionLineItems) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForBatchCreateSubscriptionLineItems) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].SubscriptionID,
		r.rows[0].ProductID,
		r.rows[0].LineItemType,
		r.rows[0].Quantity,
		r.rows[0].UnitAmountInPennies,
		r.rows[0].Currency,
		r.rows[0].PriceType,
		r.rows[0].IntervalType,
		r.rows[0].TotalAmountInPennies,
		r.rows[0].IsActive,
		r.rows[0].Metadata,
	}, nil
}

func (r iteratorForBatchCreateSubscriptionLineItems) Err() error {
	return nil
}

func (q *Queries) BatchCreateSubscriptionLineItems(ctx context.Context, arg []BatchCreateSubscriptionLineItemsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"subscription_line_items"}, []string{"subscription_id", "product_id", "line_item_type", "quantity", "unit_amount_in_pennies", "currency", "price_type", "interval_type", "total_amount_in_pennies", "is_active", "metadata"}, &iteratorForBatchCreateSubscriptionLineItems{rows: arg})
}

// iteratorForBulkCreateInvoiceLineItemsFromSubscription implements pgx.CopyFromSource.
type iteratorForBulkCreateInvoiceLineItemsFromSubscription struct {
	rows                 []BulkCreateInvoiceLineItemsFromSubscriptionParams
	skippedFirstNextCall bool
}

func (r *iteratorForBulkCreateInvoiceLineItemsFromSubscription) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForBulkCreateInvoiceLineItemsFromSubscription) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].InvoiceID,
		r.rows[0].SubscriptionID,
		r.rows[0].ProductID,
		r.rows[0].Description,
		r.rows[0].Quantity,
		r.rows[0].UnitAmountInCents,
		r.rows[0].AmountInCents,
		r.rows[0].FiatCurrency,
		r.rows[0].LineItemType,
		r.rows[0].PeriodStart,
		r.rows[0].PeriodEnd,
	}, nil
}

func (r iteratorForBulkCreateInvoiceLineItemsFromSubscription) Err() error {
	return nil
}

func (q *Queries) BulkCreateInvoiceLineItemsFromSubscription(ctx context.Context, arg []BulkCreateInvoiceLineItemsFromSubscriptionParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"invoice_line_items"}, []string{"invoice_id", "subscription_id", "product_id", "description", "quantity", "unit_amount_in_cents", "amount_in_cents", "fiat_currency", "line_item_type", "period_start", "period_end"}, &iteratorForBulkCreateInvoiceLineItemsFromSubscription{rows: arg})
}

// iteratorForCreateInvoiceLineItemBatch implements pgx.CopyFromSource.
type iteratorForCreateInvoiceLineItemBatch struct {
	rows                 []CreateInvoiceLineItemBatchParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateInvoiceLineItemBatch) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateInvoiceLineItemBatch) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].InvoiceID,
		r.rows[0].Description,
		r.rows[0].Quantity,
		r.rows[0].UnitAmountInCents,
		r.rows[0].AmountInCents,
		r.rows[0].FiatCurrency,
		r.rows[0].ProductID,
		r.rows[0].LineItemType,
	}, nil
}

func (r iteratorForCreateInvoiceLineItemBatch) Err() error {
	return nil
}

func (q *Queries) CreateInvoiceLineItemBatch(ctx context.Context, arg []CreateInvoiceLineItemBatchParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"invoice_line_items"}, []string{"invoice_id", "description", "quantity", "unit_amount_in_cents", "amount_in_cents", "fiat_currency", "product_id", "line_item_type"}, &iteratorForCreateInvoiceLineItemBatch{rows: arg})
}

// iteratorForCreatePaymentBatch implements pgx.CopyFromSource.
type iteratorForCreatePaymentBatch struct {
	rows                 []CreatePaymentBatchParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreatePaymentBatch) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreatePaymentBatch) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].WorkspaceID,
		r.rows[0].CustomerID,
		r.rows[0].AmountInCents,
		r.rows[0].Currency,
		r.rows[0].Status,
		r.rows[0].PaymentMethod,
		r.rows[0].Metadata,
	}, nil
}

func (r iteratorForCreatePaymentBatch) Err() error {
	return nil
}

func (q *Queries) CreatePaymentBatch(ctx context.Context, arg []CreatePaymentBatchParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"payments"}, []string{"workspace_id", "customer_id", "amount_in_cents", "currency", "status", "payment_method", "metadata"}, &iteratorForCreatePaymentBatch{rows: arg})
}
