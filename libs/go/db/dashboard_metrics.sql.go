// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: dashboard_metrics.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createDashboardMetric = `-- name: CreateDashboardMetric :one
INSERT INTO dashboard_metrics (
    workspace_id,
    metric_date,
    metric_type,
    metric_hour,
    fiat_currency,
    mrr_cents,
    arr_cents,
    total_revenue_cents,
    new_revenue_cents,
    expansion_revenue_cents,
    contraction_revenue_cents,
    total_customers,
    new_customers,
    churned_customers,
    reactivated_customers,
    active_subscriptions,
    new_subscriptions,
    cancelled_subscriptions,
    paused_subscriptions,
    trial_subscriptions,
    churn_rate,
    growth_rate,
    ltv_avg_cents,
    successful_payments,
    failed_payments,
    pending_payments,
    total_payment_volume_cents,
    avg_payment_size_cents,
    total_gas_fees_cents,
    sponsored_gas_fees_cents,
    customer_gas_fees_cents,
    avg_gas_fee_cents,
    gas_sponsorship_rate,
    unique_wallet_addresses,
    new_wallet_addresses,
    network_metrics,
    token_metrics,
    avg_payment_confirmation_time_seconds,
    payment_success_rate
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39
)
ON CONFLICT (workspace_id, metric_date, metric_type, metric_hour, fiat_currency)
DO UPDATE SET
    mrr_cents = EXCLUDED.mrr_cents,
    arr_cents = EXCLUDED.arr_cents,
    total_revenue_cents = EXCLUDED.total_revenue_cents,
    new_revenue_cents = EXCLUDED.new_revenue_cents,
    expansion_revenue_cents = EXCLUDED.expansion_revenue_cents,
    contraction_revenue_cents = EXCLUDED.contraction_revenue_cents,
    total_customers = EXCLUDED.total_customers,
    new_customers = EXCLUDED.new_customers,
    churned_customers = EXCLUDED.churned_customers,
    reactivated_customers = EXCLUDED.reactivated_customers,
    active_subscriptions = EXCLUDED.active_subscriptions,
    new_subscriptions = EXCLUDED.new_subscriptions,
    cancelled_subscriptions = EXCLUDED.cancelled_subscriptions,
    paused_subscriptions = EXCLUDED.paused_subscriptions,
    trial_subscriptions = EXCLUDED.trial_subscriptions,
    churn_rate = EXCLUDED.churn_rate,
    growth_rate = EXCLUDED.growth_rate,
    ltv_avg_cents = EXCLUDED.ltv_avg_cents,
    successful_payments = EXCLUDED.successful_payments,
    failed_payments = EXCLUDED.failed_payments,
    pending_payments = EXCLUDED.pending_payments,
    total_payment_volume_cents = EXCLUDED.total_payment_volume_cents,
    avg_payment_size_cents = EXCLUDED.avg_payment_size_cents,
    total_gas_fees_cents = EXCLUDED.total_gas_fees_cents,
    sponsored_gas_fees_cents = EXCLUDED.sponsored_gas_fees_cents,
    customer_gas_fees_cents = EXCLUDED.customer_gas_fees_cents,
    avg_gas_fee_cents = EXCLUDED.avg_gas_fee_cents,
    gas_sponsorship_rate = EXCLUDED.gas_sponsorship_rate,
    unique_wallet_addresses = EXCLUDED.unique_wallet_addresses,
    new_wallet_addresses = EXCLUDED.new_wallet_addresses,
    network_metrics = EXCLUDED.network_metrics,
    token_metrics = EXCLUDED.token_metrics,
    avg_payment_confirmation_time_seconds = EXCLUDED.avg_payment_confirmation_time_seconds,
    payment_success_rate = EXCLUDED.payment_success_rate,
    updated_at = CURRENT_TIMESTAMP
RETURNING id, workspace_id, metric_date, metric_type, metric_hour, fiat_currency, mrr_cents, arr_cents, total_revenue_cents, new_revenue_cents, expansion_revenue_cents, contraction_revenue_cents, total_customers, new_customers, churned_customers, reactivated_customers, active_subscriptions, new_subscriptions, cancelled_subscriptions, paused_subscriptions, trial_subscriptions, churn_rate, growth_rate, ltv_avg_cents, successful_payments, failed_payments, pending_payments, total_payment_volume_cents, avg_payment_size_cents, total_gas_fees_cents, sponsored_gas_fees_cents, customer_gas_fees_cents, avg_gas_fee_cents, gas_sponsorship_rate, unique_wallet_addresses, new_wallet_addresses, network_metrics, token_metrics, avg_payment_confirmation_time_seconds, payment_success_rate, created_at, updated_at
`

type CreateDashboardMetricParams struct {
	WorkspaceID                       uuid.UUID      `json:"workspace_id"`
	MetricDate                        pgtype.Date    `json:"metric_date"`
	MetricType                        string         `json:"metric_type"`
	MetricHour                        pgtype.Int4    `json:"metric_hour"`
	FiatCurrency                      string         `json:"fiat_currency"`
	MrrCents                          pgtype.Int8    `json:"mrr_cents"`
	ArrCents                          pgtype.Int8    `json:"arr_cents"`
	TotalRevenueCents                 pgtype.Int8    `json:"total_revenue_cents"`
	NewRevenueCents                   pgtype.Int8    `json:"new_revenue_cents"`
	ExpansionRevenueCents             pgtype.Int8    `json:"expansion_revenue_cents"`
	ContractionRevenueCents           pgtype.Int8    `json:"contraction_revenue_cents"`
	TotalCustomers                    pgtype.Int4    `json:"total_customers"`
	NewCustomers                      pgtype.Int4    `json:"new_customers"`
	ChurnedCustomers                  pgtype.Int4    `json:"churned_customers"`
	ReactivatedCustomers              pgtype.Int4    `json:"reactivated_customers"`
	ActiveSubscriptions               pgtype.Int4    `json:"active_subscriptions"`
	NewSubscriptions                  pgtype.Int4    `json:"new_subscriptions"`
	CancelledSubscriptions            pgtype.Int4    `json:"cancelled_subscriptions"`
	PausedSubscriptions               pgtype.Int4    `json:"paused_subscriptions"`
	TrialSubscriptions                pgtype.Int4    `json:"trial_subscriptions"`
	ChurnRate                         pgtype.Numeric `json:"churn_rate"`
	GrowthRate                        pgtype.Numeric `json:"growth_rate"`
	LtvAvgCents                       pgtype.Int8    `json:"ltv_avg_cents"`
	SuccessfulPayments                pgtype.Int4    `json:"successful_payments"`
	FailedPayments                    pgtype.Int4    `json:"failed_payments"`
	PendingPayments                   pgtype.Int4    `json:"pending_payments"`
	TotalPaymentVolumeCents           pgtype.Int8    `json:"total_payment_volume_cents"`
	AvgPaymentSizeCents               pgtype.Int8    `json:"avg_payment_size_cents"`
	TotalGasFeesCents                 pgtype.Int8    `json:"total_gas_fees_cents"`
	SponsoredGasFeesCents             pgtype.Int8    `json:"sponsored_gas_fees_cents"`
	CustomerGasFeesCents              pgtype.Int8    `json:"customer_gas_fees_cents"`
	AvgGasFeeCents                    pgtype.Int8    `json:"avg_gas_fee_cents"`
	GasSponsorshipRate                pgtype.Numeric `json:"gas_sponsorship_rate"`
	UniqueWalletAddresses             pgtype.Int4    `json:"unique_wallet_addresses"`
	NewWalletAddresses                pgtype.Int4    `json:"new_wallet_addresses"`
	NetworkMetrics                    []byte         `json:"network_metrics"`
	TokenMetrics                      []byte         `json:"token_metrics"`
	AvgPaymentConfirmationTimeSeconds pgtype.Int4    `json:"avg_payment_confirmation_time_seconds"`
	PaymentSuccessRate                pgtype.Numeric `json:"payment_success_rate"`
}

func (q *Queries) CreateDashboardMetric(ctx context.Context, arg CreateDashboardMetricParams) (DashboardMetric, error) {
	row := q.db.QueryRow(ctx, createDashboardMetric,
		arg.WorkspaceID,
		arg.MetricDate,
		arg.MetricType,
		arg.MetricHour,
		arg.FiatCurrency,
		arg.MrrCents,
		arg.ArrCents,
		arg.TotalRevenueCents,
		arg.NewRevenueCents,
		arg.ExpansionRevenueCents,
		arg.ContractionRevenueCents,
		arg.TotalCustomers,
		arg.NewCustomers,
		arg.ChurnedCustomers,
		arg.ReactivatedCustomers,
		arg.ActiveSubscriptions,
		arg.NewSubscriptions,
		arg.CancelledSubscriptions,
		arg.PausedSubscriptions,
		arg.TrialSubscriptions,
		arg.ChurnRate,
		arg.GrowthRate,
		arg.LtvAvgCents,
		arg.SuccessfulPayments,
		arg.FailedPayments,
		arg.PendingPayments,
		arg.TotalPaymentVolumeCents,
		arg.AvgPaymentSizeCents,
		arg.TotalGasFeesCents,
		arg.SponsoredGasFeesCents,
		arg.CustomerGasFeesCents,
		arg.AvgGasFeeCents,
		arg.GasSponsorshipRate,
		arg.UniqueWalletAddresses,
		arg.NewWalletAddresses,
		arg.NetworkMetrics,
		arg.TokenMetrics,
		arg.AvgPaymentConfirmationTimeSeconds,
		arg.PaymentSuccessRate,
	)
	var i DashboardMetric
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.MetricDate,
		&i.MetricType,
		&i.MetricHour,
		&i.FiatCurrency,
		&i.MrrCents,
		&i.ArrCents,
		&i.TotalRevenueCents,
		&i.NewRevenueCents,
		&i.ExpansionRevenueCents,
		&i.ContractionRevenueCents,
		&i.TotalCustomers,
		&i.NewCustomers,
		&i.ChurnedCustomers,
		&i.ReactivatedCustomers,
		&i.ActiveSubscriptions,
		&i.NewSubscriptions,
		&i.CancelledSubscriptions,
		&i.PausedSubscriptions,
		&i.TrialSubscriptions,
		&i.ChurnRate,
		&i.GrowthRate,
		&i.LtvAvgCents,
		&i.SuccessfulPayments,
		&i.FailedPayments,
		&i.PendingPayments,
		&i.TotalPaymentVolumeCents,
		&i.AvgPaymentSizeCents,
		&i.TotalGasFeesCents,
		&i.SponsoredGasFeesCents,
		&i.CustomerGasFeesCents,
		&i.AvgGasFeeCents,
		&i.GasSponsorshipRate,
		&i.UniqueWalletAddresses,
		&i.NewWalletAddresses,
		&i.NetworkMetrics,
		&i.TokenMetrics,
		&i.AvgPaymentConfirmationTimeSeconds,
		&i.PaymentSuccessRate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOldMetrics = `-- name: DeleteOldMetrics :exec
DELETE FROM dashboard_metrics
WHERE metric_date < $1
    AND metric_type = $2
`

type DeleteOldMetricsParams struct {
	MetricDate pgtype.Date `json:"metric_date"`
	MetricType string      `json:"metric_type"`
}

func (q *Queries) DeleteOldMetrics(ctx context.Context, arg DeleteOldMetricsParams) error {
	_, err := q.db.Exec(ctx, deleteOldMetrics, arg.MetricDate, arg.MetricType)
	return err
}

const getCurrentMRR = `-- name: GetCurrentMRR :one
SELECT 
    mrr_cents,
    arr_cents,
    active_subscriptions,
    total_customers
FROM dashboard_metrics
WHERE workspace_id = $1
    AND metric_type = 'monthly'
    AND metric_date = DATE_TRUNC('month', CURRENT_DATE)
    AND fiat_currency = $2
`

type GetCurrentMRRParams struct {
	WorkspaceID  uuid.UUID `json:"workspace_id"`
	FiatCurrency string    `json:"fiat_currency"`
}

type GetCurrentMRRRow struct {
	MrrCents            pgtype.Int8 `json:"mrr_cents"`
	ArrCents            pgtype.Int8 `json:"arr_cents"`
	ActiveSubscriptions pgtype.Int4 `json:"active_subscriptions"`
	TotalCustomers      pgtype.Int4 `json:"total_customers"`
}

func (q *Queries) GetCurrentMRR(ctx context.Context, arg GetCurrentMRRParams) (GetCurrentMRRRow, error) {
	row := q.db.QueryRow(ctx, getCurrentMRR, arg.WorkspaceID, arg.FiatCurrency)
	var i GetCurrentMRRRow
	err := row.Scan(
		&i.MrrCents,
		&i.ArrCents,
		&i.ActiveSubscriptions,
		&i.TotalCustomers,
	)
	return i, err
}

const getCustomerMetricsTrend = `-- name: GetCustomerMetricsTrend :many
SELECT 
    metric_date,
    total_customers,
    new_customers,
    churned_customers,
    churn_rate,
    growth_rate
FROM dashboard_metrics
WHERE workspace_id = $1
    AND metric_date >= $2
    AND metric_date <= $3
    AND metric_type = $4
    AND fiat_currency = $5
ORDER BY metric_date ASC
`

type GetCustomerMetricsTrendParams struct {
	WorkspaceID  uuid.UUID   `json:"workspace_id"`
	MetricDate   pgtype.Date `json:"metric_date"`
	MetricDate_2 pgtype.Date `json:"metric_date_2"`
	MetricType   string      `json:"metric_type"`
	FiatCurrency string      `json:"fiat_currency"`
}

type GetCustomerMetricsTrendRow struct {
	MetricDate       pgtype.Date    `json:"metric_date"`
	TotalCustomers   pgtype.Int4    `json:"total_customers"`
	NewCustomers     pgtype.Int4    `json:"new_customers"`
	ChurnedCustomers pgtype.Int4    `json:"churned_customers"`
	ChurnRate        pgtype.Numeric `json:"churn_rate"`
	GrowthRate       pgtype.Numeric `json:"growth_rate"`
}

func (q *Queries) GetCustomerMetricsTrend(ctx context.Context, arg GetCustomerMetricsTrendParams) ([]GetCustomerMetricsTrendRow, error) {
	rows, err := q.db.Query(ctx, getCustomerMetricsTrend,
		arg.WorkspaceID,
		arg.MetricDate,
		arg.MetricDate_2,
		arg.MetricType,
		arg.FiatCurrency,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCustomerMetricsTrendRow{}
	for rows.Next() {
		var i GetCustomerMetricsTrendRow
		if err := rows.Scan(
			&i.MetricDate,
			&i.TotalCustomers,
			&i.NewCustomers,
			&i.ChurnedCustomers,
			&i.ChurnRate,
			&i.GrowthRate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDailyMetrics = `-- name: GetDailyMetrics :many
SELECT id, workspace_id, metric_date, metric_type, metric_hour, fiat_currency, mrr_cents, arr_cents, total_revenue_cents, new_revenue_cents, expansion_revenue_cents, contraction_revenue_cents, total_customers, new_customers, churned_customers, reactivated_customers, active_subscriptions, new_subscriptions, cancelled_subscriptions, paused_subscriptions, trial_subscriptions, churn_rate, growth_rate, ltv_avg_cents, successful_payments, failed_payments, pending_payments, total_payment_volume_cents, avg_payment_size_cents, total_gas_fees_cents, sponsored_gas_fees_cents, customer_gas_fees_cents, avg_gas_fee_cents, gas_sponsorship_rate, unique_wallet_addresses, new_wallet_addresses, network_metrics, token_metrics, avg_payment_confirmation_time_seconds, payment_success_rate, created_at, updated_at FROM dashboard_metrics
WHERE workspace_id = $1
    AND metric_date >= $2
    AND metric_date <= $3
    AND metric_type = 'daily'
    AND fiat_currency = $4
ORDER BY metric_date DESC
`

type GetDailyMetricsParams struct {
	WorkspaceID  uuid.UUID   `json:"workspace_id"`
	MetricDate   pgtype.Date `json:"metric_date"`
	MetricDate_2 pgtype.Date `json:"metric_date_2"`
	FiatCurrency string      `json:"fiat_currency"`
}

func (q *Queries) GetDailyMetrics(ctx context.Context, arg GetDailyMetricsParams) ([]DashboardMetric, error) {
	rows, err := q.db.Query(ctx, getDailyMetrics,
		arg.WorkspaceID,
		arg.MetricDate,
		arg.MetricDate_2,
		arg.FiatCurrency,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DashboardMetric{}
	for rows.Next() {
		var i DashboardMetric
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.MetricDate,
			&i.MetricType,
			&i.MetricHour,
			&i.FiatCurrency,
			&i.MrrCents,
			&i.ArrCents,
			&i.TotalRevenueCents,
			&i.NewRevenueCents,
			&i.ExpansionRevenueCents,
			&i.ContractionRevenueCents,
			&i.TotalCustomers,
			&i.NewCustomers,
			&i.ChurnedCustomers,
			&i.ReactivatedCustomers,
			&i.ActiveSubscriptions,
			&i.NewSubscriptions,
			&i.CancelledSubscriptions,
			&i.PausedSubscriptions,
			&i.TrialSubscriptions,
			&i.ChurnRate,
			&i.GrowthRate,
			&i.LtvAvgCents,
			&i.SuccessfulPayments,
			&i.FailedPayments,
			&i.PendingPayments,
			&i.TotalPaymentVolumeCents,
			&i.AvgPaymentSizeCents,
			&i.TotalGasFeesCents,
			&i.SponsoredGasFeesCents,
			&i.CustomerGasFeesCents,
			&i.AvgGasFeeCents,
			&i.GasSponsorshipRate,
			&i.UniqueWalletAddresses,
			&i.NewWalletAddresses,
			&i.NetworkMetrics,
			&i.TokenMetrics,
			&i.AvgPaymentConfirmationTimeSeconds,
			&i.PaymentSuccessRate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDashboardMetric = `-- name: GetDashboardMetric :one
SELECT id, workspace_id, metric_date, metric_type, metric_hour, fiat_currency, mrr_cents, arr_cents, total_revenue_cents, new_revenue_cents, expansion_revenue_cents, contraction_revenue_cents, total_customers, new_customers, churned_customers, reactivated_customers, active_subscriptions, new_subscriptions, cancelled_subscriptions, paused_subscriptions, trial_subscriptions, churn_rate, growth_rate, ltv_avg_cents, successful_payments, failed_payments, pending_payments, total_payment_volume_cents, avg_payment_size_cents, total_gas_fees_cents, sponsored_gas_fees_cents, customer_gas_fees_cents, avg_gas_fee_cents, gas_sponsorship_rate, unique_wallet_addresses, new_wallet_addresses, network_metrics, token_metrics, avg_payment_confirmation_time_seconds, payment_success_rate, created_at, updated_at FROM dashboard_metrics
WHERE workspace_id = $1
    AND metric_date = $2
    AND metric_type = $3
    AND metric_hour = $4
    AND fiat_currency = $5
`

type GetDashboardMetricParams struct {
	WorkspaceID  uuid.UUID   `json:"workspace_id"`
	MetricDate   pgtype.Date `json:"metric_date"`
	MetricType   string      `json:"metric_type"`
	MetricHour   pgtype.Int4 `json:"metric_hour"`
	FiatCurrency string      `json:"fiat_currency"`
}

func (q *Queries) GetDashboardMetric(ctx context.Context, arg GetDashboardMetricParams) (DashboardMetric, error) {
	row := q.db.QueryRow(ctx, getDashboardMetric,
		arg.WorkspaceID,
		arg.MetricDate,
		arg.MetricType,
		arg.MetricHour,
		arg.FiatCurrency,
	)
	var i DashboardMetric
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.MetricDate,
		&i.MetricType,
		&i.MetricHour,
		&i.FiatCurrency,
		&i.MrrCents,
		&i.ArrCents,
		&i.TotalRevenueCents,
		&i.NewRevenueCents,
		&i.ExpansionRevenueCents,
		&i.ContractionRevenueCents,
		&i.TotalCustomers,
		&i.NewCustomers,
		&i.ChurnedCustomers,
		&i.ReactivatedCustomers,
		&i.ActiveSubscriptions,
		&i.NewSubscriptions,
		&i.CancelledSubscriptions,
		&i.PausedSubscriptions,
		&i.TrialSubscriptions,
		&i.ChurnRate,
		&i.GrowthRate,
		&i.LtvAvgCents,
		&i.SuccessfulPayments,
		&i.FailedPayments,
		&i.PendingPayments,
		&i.TotalPaymentVolumeCents,
		&i.AvgPaymentSizeCents,
		&i.TotalGasFeesCents,
		&i.SponsoredGasFeesCents,
		&i.CustomerGasFeesCents,
		&i.AvgGasFeeCents,
		&i.GasSponsorshipRate,
		&i.UniqueWalletAddresses,
		&i.NewWalletAddresses,
		&i.NetworkMetrics,
		&i.TokenMetrics,
		&i.AvgPaymentConfirmationTimeSeconds,
		&i.PaymentSuccessRate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDashboardMetricsByDateRange = `-- name: GetDashboardMetricsByDateRange :many
SELECT id, workspace_id, metric_date, metric_type, metric_hour, fiat_currency, mrr_cents, arr_cents, total_revenue_cents, new_revenue_cents, expansion_revenue_cents, contraction_revenue_cents, total_customers, new_customers, churned_customers, reactivated_customers, active_subscriptions, new_subscriptions, cancelled_subscriptions, paused_subscriptions, trial_subscriptions, churn_rate, growth_rate, ltv_avg_cents, successful_payments, failed_payments, pending_payments, total_payment_volume_cents, avg_payment_size_cents, total_gas_fees_cents, sponsored_gas_fees_cents, customer_gas_fees_cents, avg_gas_fee_cents, gas_sponsorship_rate, unique_wallet_addresses, new_wallet_addresses, network_metrics, token_metrics, avg_payment_confirmation_time_seconds, payment_success_rate, created_at, updated_at FROM dashboard_metrics
WHERE workspace_id = $1
    AND metric_date >= $2
    AND metric_date <= $3
    AND metric_type = $4
    AND fiat_currency = $5
ORDER BY metric_date DESC, metric_hour DESC NULLS LAST
`

type GetDashboardMetricsByDateRangeParams struct {
	WorkspaceID  uuid.UUID   `json:"workspace_id"`
	MetricDate   pgtype.Date `json:"metric_date"`
	MetricDate_2 pgtype.Date `json:"metric_date_2"`
	MetricType   string      `json:"metric_type"`
	FiatCurrency string      `json:"fiat_currency"`
}

func (q *Queries) GetDashboardMetricsByDateRange(ctx context.Context, arg GetDashboardMetricsByDateRangeParams) ([]DashboardMetric, error) {
	rows, err := q.db.Query(ctx, getDashboardMetricsByDateRange,
		arg.WorkspaceID,
		arg.MetricDate,
		arg.MetricDate_2,
		arg.MetricType,
		arg.FiatCurrency,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DashboardMetric{}
	for rows.Next() {
		var i DashboardMetric
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.MetricDate,
			&i.MetricType,
			&i.MetricHour,
			&i.FiatCurrency,
			&i.MrrCents,
			&i.ArrCents,
			&i.TotalRevenueCents,
			&i.NewRevenueCents,
			&i.ExpansionRevenueCents,
			&i.ContractionRevenueCents,
			&i.TotalCustomers,
			&i.NewCustomers,
			&i.ChurnedCustomers,
			&i.ReactivatedCustomers,
			&i.ActiveSubscriptions,
			&i.NewSubscriptions,
			&i.CancelledSubscriptions,
			&i.PausedSubscriptions,
			&i.TrialSubscriptions,
			&i.ChurnRate,
			&i.GrowthRate,
			&i.LtvAvgCents,
			&i.SuccessfulPayments,
			&i.FailedPayments,
			&i.PendingPayments,
			&i.TotalPaymentVolumeCents,
			&i.AvgPaymentSizeCents,
			&i.TotalGasFeesCents,
			&i.SponsoredGasFeesCents,
			&i.CustomerGasFeesCents,
			&i.AvgGasFeeCents,
			&i.GasSponsorshipRate,
			&i.UniqueWalletAddresses,
			&i.NewWalletAddresses,
			&i.NetworkMetrics,
			&i.TokenMetrics,
			&i.AvgPaymentConfirmationTimeSeconds,
			&i.PaymentSuccessRate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHourlyMetrics = `-- name: GetHourlyMetrics :many
SELECT id, workspace_id, metric_date, metric_type, metric_hour, fiat_currency, mrr_cents, arr_cents, total_revenue_cents, new_revenue_cents, expansion_revenue_cents, contraction_revenue_cents, total_customers, new_customers, churned_customers, reactivated_customers, active_subscriptions, new_subscriptions, cancelled_subscriptions, paused_subscriptions, trial_subscriptions, churn_rate, growth_rate, ltv_avg_cents, successful_payments, failed_payments, pending_payments, total_payment_volume_cents, avg_payment_size_cents, total_gas_fees_cents, sponsored_gas_fees_cents, customer_gas_fees_cents, avg_gas_fee_cents, gas_sponsorship_rate, unique_wallet_addresses, new_wallet_addresses, network_metrics, token_metrics, avg_payment_confirmation_time_seconds, payment_success_rate, created_at, updated_at FROM dashboard_metrics
WHERE workspace_id = $1
    AND metric_date = $2
    AND metric_type = 'hourly'
    AND fiat_currency = $3
ORDER BY metric_hour ASC
`

type GetHourlyMetricsParams struct {
	WorkspaceID  uuid.UUID   `json:"workspace_id"`
	MetricDate   pgtype.Date `json:"metric_date"`
	FiatCurrency string      `json:"fiat_currency"`
}

func (q *Queries) GetHourlyMetrics(ctx context.Context, arg GetHourlyMetricsParams) ([]DashboardMetric, error) {
	rows, err := q.db.Query(ctx, getHourlyMetrics, arg.WorkspaceID, arg.MetricDate, arg.FiatCurrency)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DashboardMetric{}
	for rows.Next() {
		var i DashboardMetric
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.MetricDate,
			&i.MetricType,
			&i.MetricHour,
			&i.FiatCurrency,
			&i.MrrCents,
			&i.ArrCents,
			&i.TotalRevenueCents,
			&i.NewRevenueCents,
			&i.ExpansionRevenueCents,
			&i.ContractionRevenueCents,
			&i.TotalCustomers,
			&i.NewCustomers,
			&i.ChurnedCustomers,
			&i.ReactivatedCustomers,
			&i.ActiveSubscriptions,
			&i.NewSubscriptions,
			&i.CancelledSubscriptions,
			&i.PausedSubscriptions,
			&i.TrialSubscriptions,
			&i.ChurnRate,
			&i.GrowthRate,
			&i.LtvAvgCents,
			&i.SuccessfulPayments,
			&i.FailedPayments,
			&i.PendingPayments,
			&i.TotalPaymentVolumeCents,
			&i.AvgPaymentSizeCents,
			&i.TotalGasFeesCents,
			&i.SponsoredGasFeesCents,
			&i.CustomerGasFeesCents,
			&i.AvgGasFeeCents,
			&i.GasSponsorshipRate,
			&i.UniqueWalletAddresses,
			&i.NewWalletAddresses,
			&i.NetworkMetrics,
			&i.TokenMetrics,
			&i.AvgPaymentConfirmationTimeSeconds,
			&i.PaymentSuccessRate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLatestDashboardMetrics = `-- name: GetLatestDashboardMetrics :one
SELECT id, workspace_id, metric_date, metric_type, metric_hour, fiat_currency, mrr_cents, arr_cents, total_revenue_cents, new_revenue_cents, expansion_revenue_cents, contraction_revenue_cents, total_customers, new_customers, churned_customers, reactivated_customers, active_subscriptions, new_subscriptions, cancelled_subscriptions, paused_subscriptions, trial_subscriptions, churn_rate, growth_rate, ltv_avg_cents, successful_payments, failed_payments, pending_payments, total_payment_volume_cents, avg_payment_size_cents, total_gas_fees_cents, sponsored_gas_fees_cents, customer_gas_fees_cents, avg_gas_fee_cents, gas_sponsorship_rate, unique_wallet_addresses, new_wallet_addresses, network_metrics, token_metrics, avg_payment_confirmation_time_seconds, payment_success_rate, created_at, updated_at FROM dashboard_metrics
WHERE workspace_id = $1
    AND metric_type = $2
    AND fiat_currency = $3
ORDER BY metric_date DESC, metric_hour DESC NULLS LAST
LIMIT 1
`

type GetLatestDashboardMetricsParams struct {
	WorkspaceID  uuid.UUID `json:"workspace_id"`
	MetricType   string    `json:"metric_type"`
	FiatCurrency string    `json:"fiat_currency"`
}

func (q *Queries) GetLatestDashboardMetrics(ctx context.Context, arg GetLatestDashboardMetricsParams) (DashboardMetric, error) {
	row := q.db.QueryRow(ctx, getLatestDashboardMetrics, arg.WorkspaceID, arg.MetricType, arg.FiatCurrency)
	var i DashboardMetric
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.MetricDate,
		&i.MetricType,
		&i.MetricHour,
		&i.FiatCurrency,
		&i.MrrCents,
		&i.ArrCents,
		&i.TotalRevenueCents,
		&i.NewRevenueCents,
		&i.ExpansionRevenueCents,
		&i.ContractionRevenueCents,
		&i.TotalCustomers,
		&i.NewCustomers,
		&i.ChurnedCustomers,
		&i.ReactivatedCustomers,
		&i.ActiveSubscriptions,
		&i.NewSubscriptions,
		&i.CancelledSubscriptions,
		&i.PausedSubscriptions,
		&i.TrialSubscriptions,
		&i.ChurnRate,
		&i.GrowthRate,
		&i.LtvAvgCents,
		&i.SuccessfulPayments,
		&i.FailedPayments,
		&i.PendingPayments,
		&i.TotalPaymentVolumeCents,
		&i.AvgPaymentSizeCents,
		&i.TotalGasFeesCents,
		&i.SponsoredGasFeesCents,
		&i.CustomerGasFeesCents,
		&i.AvgGasFeeCents,
		&i.GasSponsorshipRate,
		&i.UniqueWalletAddresses,
		&i.NewWalletAddresses,
		&i.NetworkMetrics,
		&i.TokenMetrics,
		&i.AvgPaymentConfirmationTimeSeconds,
		&i.PaymentSuccessRate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMonthlyMetrics = `-- name: GetMonthlyMetrics :many
SELECT id, workspace_id, metric_date, metric_type, metric_hour, fiat_currency, mrr_cents, arr_cents, total_revenue_cents, new_revenue_cents, expansion_revenue_cents, contraction_revenue_cents, total_customers, new_customers, churned_customers, reactivated_customers, active_subscriptions, new_subscriptions, cancelled_subscriptions, paused_subscriptions, trial_subscriptions, churn_rate, growth_rate, ltv_avg_cents, successful_payments, failed_payments, pending_payments, total_payment_volume_cents, avg_payment_size_cents, total_gas_fees_cents, sponsored_gas_fees_cents, customer_gas_fees_cents, avg_gas_fee_cents, gas_sponsorship_rate, unique_wallet_addresses, new_wallet_addresses, network_metrics, token_metrics, avg_payment_confirmation_time_seconds, payment_success_rate, created_at, updated_at FROM dashboard_metrics
WHERE workspace_id = $1
    AND metric_date >= DATE_TRUNC('month', $2::date)
    AND metric_date <= DATE_TRUNC('month', $3::date)
    AND metric_type = 'monthly'
    AND fiat_currency = $4
ORDER BY metric_date DESC
`

type GetMonthlyMetricsParams struct {
	WorkspaceID  uuid.UUID   `json:"workspace_id"`
	Column2      pgtype.Date `json:"column_2"`
	Column3      pgtype.Date `json:"column_3"`
	FiatCurrency string      `json:"fiat_currency"`
}

func (q *Queries) GetMonthlyMetrics(ctx context.Context, arg GetMonthlyMetricsParams) ([]DashboardMetric, error) {
	rows, err := q.db.Query(ctx, getMonthlyMetrics,
		arg.WorkspaceID,
		arg.Column2,
		arg.Column3,
		arg.FiatCurrency,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DashboardMetric{}
	for rows.Next() {
		var i DashboardMetric
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.MetricDate,
			&i.MetricType,
			&i.MetricHour,
			&i.FiatCurrency,
			&i.MrrCents,
			&i.ArrCents,
			&i.TotalRevenueCents,
			&i.NewRevenueCents,
			&i.ExpansionRevenueCents,
			&i.ContractionRevenueCents,
			&i.TotalCustomers,
			&i.NewCustomers,
			&i.ChurnedCustomers,
			&i.ReactivatedCustomers,
			&i.ActiveSubscriptions,
			&i.NewSubscriptions,
			&i.CancelledSubscriptions,
			&i.PausedSubscriptions,
			&i.TrialSubscriptions,
			&i.ChurnRate,
			&i.GrowthRate,
			&i.LtvAvgCents,
			&i.SuccessfulPayments,
			&i.FailedPayments,
			&i.PendingPayments,
			&i.TotalPaymentVolumeCents,
			&i.AvgPaymentSizeCents,
			&i.TotalGasFeesCents,
			&i.SponsoredGasFeesCents,
			&i.CustomerGasFeesCents,
			&i.AvgGasFeeCents,
			&i.GasSponsorshipRate,
			&i.UniqueWalletAddresses,
			&i.NewWalletAddresses,
			&i.NetworkMetrics,
			&i.TokenMetrics,
			&i.AvgPaymentConfirmationTimeSeconds,
			&i.PaymentSuccessRate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNetworkMetrics = `-- name: GetNetworkMetrics :one
SELECT 
    metric_date,
    network_metrics,
    token_metrics
FROM dashboard_metrics
WHERE workspace_id = $1
    AND metric_date = $2
    AND metric_type = $3
    AND fiat_currency = $4
`

type GetNetworkMetricsParams struct {
	WorkspaceID  uuid.UUID   `json:"workspace_id"`
	MetricDate   pgtype.Date `json:"metric_date"`
	MetricType   string      `json:"metric_type"`
	FiatCurrency string      `json:"fiat_currency"`
}

type GetNetworkMetricsRow struct {
	MetricDate     pgtype.Date `json:"metric_date"`
	NetworkMetrics []byte      `json:"network_metrics"`
	TokenMetrics   []byte      `json:"token_metrics"`
}

func (q *Queries) GetNetworkMetrics(ctx context.Context, arg GetNetworkMetricsParams) (GetNetworkMetricsRow, error) {
	row := q.db.QueryRow(ctx, getNetworkMetrics,
		arg.WorkspaceID,
		arg.MetricDate,
		arg.MetricType,
		arg.FiatCurrency,
	)
	var i GetNetworkMetricsRow
	err := row.Scan(&i.MetricDate, &i.NetworkMetrics, &i.TokenMetrics)
	return i, err
}

const getPaymentMetricsSummary = `-- name: GetPaymentMetricsSummary :one
SELECT 
    SUM(successful_payments) as total_successful_payments,
    SUM(failed_payments) as total_failed_payments,
    SUM(total_payment_volume_cents) as total_volume_cents,
    AVG(payment_success_rate) as avg_success_rate,
    SUM(total_gas_fees_cents) as total_gas_fees,
    SUM(sponsored_gas_fees_cents) as total_sponsored_gas
FROM dashboard_metrics
WHERE workspace_id = $1
    AND metric_date >= $2
    AND metric_date <= $3
    AND metric_type = $4
    AND fiat_currency = $5
`

type GetPaymentMetricsSummaryParams struct {
	WorkspaceID  uuid.UUID   `json:"workspace_id"`
	MetricDate   pgtype.Date `json:"metric_date"`
	MetricDate_2 pgtype.Date `json:"metric_date_2"`
	MetricType   string      `json:"metric_type"`
	FiatCurrency string      `json:"fiat_currency"`
}

type GetPaymentMetricsSummaryRow struct {
	TotalSuccessfulPayments int64   `json:"total_successful_payments"`
	TotalFailedPayments     int64   `json:"total_failed_payments"`
	TotalVolumeCents        int64   `json:"total_volume_cents"`
	AvgSuccessRate          float64 `json:"avg_success_rate"`
	TotalGasFees            int64   `json:"total_gas_fees"`
	TotalSponsoredGas       int64   `json:"total_sponsored_gas"`
}

func (q *Queries) GetPaymentMetricsSummary(ctx context.Context, arg GetPaymentMetricsSummaryParams) (GetPaymentMetricsSummaryRow, error) {
	row := q.db.QueryRow(ctx, getPaymentMetricsSummary,
		arg.WorkspaceID,
		arg.MetricDate,
		arg.MetricDate_2,
		arg.MetricType,
		arg.FiatCurrency,
	)
	var i GetPaymentMetricsSummaryRow
	err := row.Scan(
		&i.TotalSuccessfulPayments,
		&i.TotalFailedPayments,
		&i.TotalVolumeCents,
		&i.AvgSuccessRate,
		&i.TotalGasFees,
		&i.TotalSponsoredGas,
	)
	return i, err
}

const getRevenueGrowth = `-- name: GetRevenueGrowth :one
SELECT 
    dm1.metric_date as current_period,
    dm1.total_revenue_cents as current_revenue,
    dm2.total_revenue_cents as previous_revenue,
    CASE 
        WHEN dm2.total_revenue_cents > 0 
        THEN ((dm1.total_revenue_cents - dm2.total_revenue_cents)::FLOAT / dm2.total_revenue_cents) * 100
        ELSE 0
    END as growth_percentage
FROM dashboard_metrics dm1
LEFT JOIN dashboard_metrics dm2 ON 
    dm2.workspace_id = dm1.workspace_id 
    AND dm2.metric_type = dm1.metric_type
    AND dm2.fiat_currency = dm1.fiat_currency
    AND dm2.metric_date = CASE 
        WHEN dm1.metric_type = 'daily' THEN dm1.metric_date - INTERVAL '1 day'
        WHEN dm1.metric_type = 'monthly' THEN dm1.metric_date - INTERVAL '1 month'
        ELSE dm1.metric_date - INTERVAL '1 year'
    END
WHERE dm1.workspace_id = $1
    AND dm1.metric_date = $2
    AND dm1.metric_type = $3
    AND dm1.fiat_currency = $4
`

type GetRevenueGrowthParams struct {
	WorkspaceID  uuid.UUID   `json:"workspace_id"`
	MetricDate   pgtype.Date `json:"metric_date"`
	MetricType   string      `json:"metric_type"`
	FiatCurrency string      `json:"fiat_currency"`
}

type GetRevenueGrowthRow struct {
	CurrentPeriod    pgtype.Date `json:"current_period"`
	CurrentRevenue   pgtype.Int8 `json:"current_revenue"`
	PreviousRevenue  pgtype.Int8 `json:"previous_revenue"`
	GrowthPercentage int32       `json:"growth_percentage"`
}

func (q *Queries) GetRevenueGrowth(ctx context.Context, arg GetRevenueGrowthParams) (GetRevenueGrowthRow, error) {
	row := q.db.QueryRow(ctx, getRevenueGrowth,
		arg.WorkspaceID,
		arg.MetricDate,
		arg.MetricType,
		arg.FiatCurrency,
	)
	var i GetRevenueGrowthRow
	err := row.Scan(
		&i.CurrentPeriod,
		&i.CurrentRevenue,
		&i.PreviousRevenue,
		&i.GrowthPercentage,
	)
	return i, err
}

const updateMetricNetworkData = `-- name: UpdateMetricNetworkData :one
UPDATE dashboard_metrics
SET 
    network_metrics = $5,
    token_metrics = $6,
    updated_at = CURRENT_TIMESTAMP
WHERE workspace_id = $1
    AND metric_date = $2
    AND metric_type = $3
    AND fiat_currency = $4
RETURNING id, workspace_id, metric_date, metric_type, metric_hour, fiat_currency, mrr_cents, arr_cents, total_revenue_cents, new_revenue_cents, expansion_revenue_cents, contraction_revenue_cents, total_customers, new_customers, churned_customers, reactivated_customers, active_subscriptions, new_subscriptions, cancelled_subscriptions, paused_subscriptions, trial_subscriptions, churn_rate, growth_rate, ltv_avg_cents, successful_payments, failed_payments, pending_payments, total_payment_volume_cents, avg_payment_size_cents, total_gas_fees_cents, sponsored_gas_fees_cents, customer_gas_fees_cents, avg_gas_fee_cents, gas_sponsorship_rate, unique_wallet_addresses, new_wallet_addresses, network_metrics, token_metrics, avg_payment_confirmation_time_seconds, payment_success_rate, created_at, updated_at
`

type UpdateMetricNetworkDataParams struct {
	WorkspaceID    uuid.UUID   `json:"workspace_id"`
	MetricDate     pgtype.Date `json:"metric_date"`
	MetricType     string      `json:"metric_type"`
	FiatCurrency   string      `json:"fiat_currency"`
	NetworkMetrics []byte      `json:"network_metrics"`
	TokenMetrics   []byte      `json:"token_metrics"`
}

func (q *Queries) UpdateMetricNetworkData(ctx context.Context, arg UpdateMetricNetworkDataParams) (DashboardMetric, error) {
	row := q.db.QueryRow(ctx, updateMetricNetworkData,
		arg.WorkspaceID,
		arg.MetricDate,
		arg.MetricType,
		arg.FiatCurrency,
		arg.NetworkMetrics,
		arg.TokenMetrics,
	)
	var i DashboardMetric
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.MetricDate,
		&i.MetricType,
		&i.MetricHour,
		&i.FiatCurrency,
		&i.MrrCents,
		&i.ArrCents,
		&i.TotalRevenueCents,
		&i.NewRevenueCents,
		&i.ExpansionRevenueCents,
		&i.ContractionRevenueCents,
		&i.TotalCustomers,
		&i.NewCustomers,
		&i.ChurnedCustomers,
		&i.ReactivatedCustomers,
		&i.ActiveSubscriptions,
		&i.NewSubscriptions,
		&i.CancelledSubscriptions,
		&i.PausedSubscriptions,
		&i.TrialSubscriptions,
		&i.ChurnRate,
		&i.GrowthRate,
		&i.LtvAvgCents,
		&i.SuccessfulPayments,
		&i.FailedPayments,
		&i.PendingPayments,
		&i.TotalPaymentVolumeCents,
		&i.AvgPaymentSizeCents,
		&i.TotalGasFeesCents,
		&i.SponsoredGasFeesCents,
		&i.CustomerGasFeesCents,
		&i.AvgGasFeeCents,
		&i.GasSponsorshipRate,
		&i.UniqueWalletAddresses,
		&i.NewWalletAddresses,
		&i.NetworkMetrics,
		&i.TokenMetrics,
		&i.AvgPaymentConfirmationTimeSeconds,
		&i.PaymentSuccessRate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
