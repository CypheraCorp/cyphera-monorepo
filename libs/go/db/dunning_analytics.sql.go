// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: dunning_analytics.sql

package db

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createOrUpdateDunningAnalytics = `-- name: CreateOrUpdateDunningAnalytics :one
INSERT INTO dunning_analytics (
    workspace_id,
    period_start,
    period_end,
    period_type,
    total_campaigns_started,
    total_campaigns_recovered,
    total_campaigns_lost,
    recovery_rate,
    total_at_risk_cents,
    total_recovered_cents,
    total_lost_cents,
    total_payment_retries,
    successful_payment_retries,
    total_emails_sent,
    email_open_rate,
    email_click_rate,
    recovery_by_attempt,
    avg_hours_to_recovery
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18
)
ON CONFLICT (workspace_id, period_start, period_end, period_type)
DO UPDATE SET
    total_campaigns_started = dunning_analytics.total_campaigns_started + EXCLUDED.total_campaigns_started,
    total_campaigns_recovered = dunning_analytics.total_campaigns_recovered + EXCLUDED.total_campaigns_recovered,
    total_campaigns_lost = dunning_analytics.total_campaigns_lost + EXCLUDED.total_campaigns_lost,
    recovery_rate = CASE 
        WHEN (dunning_analytics.total_campaigns_recovered + EXCLUDED.total_campaigns_recovered + 
              dunning_analytics.total_campaigns_lost + EXCLUDED.total_campaigns_lost) > 0
        THEN (dunning_analytics.total_campaigns_recovered + EXCLUDED.total_campaigns_recovered)::DECIMAL / 
             (dunning_analytics.total_campaigns_recovered + EXCLUDED.total_campaigns_recovered + 
              dunning_analytics.total_campaigns_lost + EXCLUDED.total_campaigns_lost)
        ELSE 0
    END,
    total_at_risk_cents = dunning_analytics.total_at_risk_cents + EXCLUDED.total_at_risk_cents,
    total_recovered_cents = dunning_analytics.total_recovered_cents + EXCLUDED.total_recovered_cents,
    total_lost_cents = dunning_analytics.total_lost_cents + EXCLUDED.total_lost_cents,
    total_payment_retries = dunning_analytics.total_payment_retries + EXCLUDED.total_payment_retries,
    successful_payment_retries = dunning_analytics.successful_payment_retries + EXCLUDED.successful_payment_retries,
    total_emails_sent = dunning_analytics.total_emails_sent + EXCLUDED.total_emails_sent,
    email_open_rate = EXCLUDED.email_open_rate, -- Use latest rate
    email_click_rate = EXCLUDED.email_click_rate, -- Use latest rate
    recovery_by_attempt = EXCLUDED.recovery_by_attempt,
    avg_hours_to_recovery = EXCLUDED.avg_hours_to_recovery,
    updated_at = CURRENT_TIMESTAMP
RETURNING id, workspace_id, period_start, period_end, period_type, total_campaigns_started, total_campaigns_recovered, total_campaigns_lost, recovery_rate, total_at_risk_cents, total_recovered_cents, total_lost_cents, total_payment_retries, successful_payment_retries, total_emails_sent, email_open_rate, email_click_rate, recovery_by_attempt, avg_hours_to_recovery, created_at, updated_at
`

type CreateOrUpdateDunningAnalyticsParams struct {
	WorkspaceID              uuid.UUID      `json:"workspace_id"`
	PeriodStart              pgtype.Date    `json:"period_start"`
	PeriodEnd                pgtype.Date    `json:"period_end"`
	PeriodType               string         `json:"period_type"`
	TotalCampaignsStarted    pgtype.Int4    `json:"total_campaigns_started"`
	TotalCampaignsRecovered  pgtype.Int4    `json:"total_campaigns_recovered"`
	TotalCampaignsLost       pgtype.Int4    `json:"total_campaigns_lost"`
	RecoveryRate             pgtype.Numeric `json:"recovery_rate"`
	TotalAtRiskCents         pgtype.Int8    `json:"total_at_risk_cents"`
	TotalRecoveredCents      pgtype.Int8    `json:"total_recovered_cents"`
	TotalLostCents           pgtype.Int8    `json:"total_lost_cents"`
	TotalPaymentRetries      pgtype.Int4    `json:"total_payment_retries"`
	SuccessfulPaymentRetries pgtype.Int4    `json:"successful_payment_retries"`
	TotalEmailsSent          pgtype.Int4    `json:"total_emails_sent"`
	EmailOpenRate            pgtype.Numeric `json:"email_open_rate"`
	EmailClickRate           pgtype.Numeric `json:"email_click_rate"`
	RecoveryByAttempt        []byte         `json:"recovery_by_attempt"`
	AvgHoursToRecovery       pgtype.Numeric `json:"avg_hours_to_recovery"`
}

func (q *Queries) CreateOrUpdateDunningAnalytics(ctx context.Context, arg CreateOrUpdateDunningAnalyticsParams) (DunningAnalytic, error) {
	row := q.db.QueryRow(ctx, createOrUpdateDunningAnalytics,
		arg.WorkspaceID,
		arg.PeriodStart,
		arg.PeriodEnd,
		arg.PeriodType,
		arg.TotalCampaignsStarted,
		arg.TotalCampaignsRecovered,
		arg.TotalCampaignsLost,
		arg.RecoveryRate,
		arg.TotalAtRiskCents,
		arg.TotalRecoveredCents,
		arg.TotalLostCents,
		arg.TotalPaymentRetries,
		arg.SuccessfulPaymentRetries,
		arg.TotalEmailsSent,
		arg.EmailOpenRate,
		arg.EmailClickRate,
		arg.RecoveryByAttempt,
		arg.AvgHoursToRecovery,
	)
	var i DunningAnalytic
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.PeriodStart,
		&i.PeriodEnd,
		&i.PeriodType,
		&i.TotalCampaignsStarted,
		&i.TotalCampaignsRecovered,
		&i.TotalCampaignsLost,
		&i.RecoveryRate,
		&i.TotalAtRiskCents,
		&i.TotalRecoveredCents,
		&i.TotalLostCents,
		&i.TotalPaymentRetries,
		&i.SuccessfulPaymentRetries,
		&i.TotalEmailsSent,
		&i.EmailOpenRate,
		&i.EmailClickRate,
		&i.RecoveryByAttempt,
		&i.AvgHoursToRecovery,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDunningAnalytics = `-- name: GetDunningAnalytics :one
SELECT id, workspace_id, period_start, period_end, period_type, total_campaigns_started, total_campaigns_recovered, total_campaigns_lost, recovery_rate, total_at_risk_cents, total_recovered_cents, total_lost_cents, total_payment_retries, successful_payment_retries, total_emails_sent, email_open_rate, email_click_rate, recovery_by_attempt, avg_hours_to_recovery, created_at, updated_at FROM dunning_analytics
WHERE workspace_id = $1
    AND period_start = $2
    AND period_end = $3
    AND period_type = $4
`

type GetDunningAnalyticsParams struct {
	WorkspaceID uuid.UUID   `json:"workspace_id"`
	PeriodStart pgtype.Date `json:"period_start"`
	PeriodEnd   pgtype.Date `json:"period_end"`
	PeriodType  string      `json:"period_type"`
}

func (q *Queries) GetDunningAnalytics(ctx context.Context, arg GetDunningAnalyticsParams) (DunningAnalytic, error) {
	row := q.db.QueryRow(ctx, getDunningAnalytics,
		arg.WorkspaceID,
		arg.PeriodStart,
		arg.PeriodEnd,
		arg.PeriodType,
	)
	var i DunningAnalytic
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.PeriodStart,
		&i.PeriodEnd,
		&i.PeriodType,
		&i.TotalCampaignsStarted,
		&i.TotalCampaignsRecovered,
		&i.TotalCampaignsLost,
		&i.RecoveryRate,
		&i.TotalAtRiskCents,
		&i.TotalRecoveredCents,
		&i.TotalLostCents,
		&i.TotalPaymentRetries,
		&i.SuccessfulPaymentRetries,
		&i.TotalEmailsSent,
		&i.EmailOpenRate,
		&i.EmailClickRate,
		&i.RecoveryByAttempt,
		&i.AvgHoursToRecovery,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDunningAnalyticsSummary = `-- name: GetDunningAnalyticsSummary :one
SELECT 
    SUM(total_campaigns_started) as total_campaigns,
    SUM(total_campaigns_recovered) as total_recovered,
    SUM(total_campaigns_lost) as total_lost,
    CASE 
        WHEN SUM(total_campaigns_recovered + total_campaigns_lost) > 0
        THEN SUM(total_campaigns_recovered)::DECIMAL / SUM(total_campaigns_recovered + total_campaigns_lost)
        ELSE 0
    END as overall_recovery_rate,
    SUM(total_at_risk_cents) as total_at_risk_cents,
    SUM(total_recovered_cents) as total_recovered_cents,
    SUM(total_lost_cents) as total_lost_cents,
    AVG(avg_hours_to_recovery) as avg_hours_to_recovery
FROM dunning_analytics
WHERE workspace_id = $1
    AND period_start >= $2
    AND period_end <= $3
`

type GetDunningAnalyticsSummaryParams struct {
	WorkspaceID uuid.UUID   `json:"workspace_id"`
	PeriodStart pgtype.Date `json:"period_start"`
	PeriodEnd   pgtype.Date `json:"period_end"`
}

type GetDunningAnalyticsSummaryRow struct {
	TotalCampaigns      int64   `json:"total_campaigns"`
	TotalRecovered      int64   `json:"total_recovered"`
	TotalLost           int64   `json:"total_lost"`
	OverallRecoveryRate int32   `json:"overall_recovery_rate"`
	TotalAtRiskCents    int64   `json:"total_at_risk_cents"`
	TotalRecoveredCents int64   `json:"total_recovered_cents"`
	TotalLostCents      int64   `json:"total_lost_cents"`
	AvgHoursToRecovery  float64 `json:"avg_hours_to_recovery"`
}

func (q *Queries) GetDunningAnalyticsSummary(ctx context.Context, arg GetDunningAnalyticsSummaryParams) (GetDunningAnalyticsSummaryRow, error) {
	row := q.db.QueryRow(ctx, getDunningAnalyticsSummary, arg.WorkspaceID, arg.PeriodStart, arg.PeriodEnd)
	var i GetDunningAnalyticsSummaryRow
	err := row.Scan(
		&i.TotalCampaigns,
		&i.TotalRecovered,
		&i.TotalLost,
		&i.OverallRecoveryRate,
		&i.TotalAtRiskCents,
		&i.TotalRecoveredCents,
		&i.TotalLostCents,
		&i.AvgHoursToRecovery,
	)
	return i, err
}

const getDunningPerformanceByAttempt = `-- name: GetDunningPerformanceByAttempt :one
SELECT 
    jsonb_build_object(
        '1', COALESCE(SUM((recovery_by_attempt->>'1')::int), 0),
        '2', COALESCE(SUM((recovery_by_attempt->>'2')::int), 0),
        '3', COALESCE(SUM((recovery_by_attempt->>'3')::int), 0),
        '4', COALESCE(SUM((recovery_by_attempt->>'4')::int), 0)
    ) as recovery_by_attempt
FROM dunning_analytics
WHERE workspace_id = $1
    AND period_start >= $2
    AND period_end <= $3
`

type GetDunningPerformanceByAttemptParams struct {
	WorkspaceID uuid.UUID   `json:"workspace_id"`
	PeriodStart pgtype.Date `json:"period_start"`
	PeriodEnd   pgtype.Date `json:"period_end"`
}

func (q *Queries) GetDunningPerformanceByAttempt(ctx context.Context, arg GetDunningPerformanceByAttemptParams) (json.RawMessage, error) {
	row := q.db.QueryRow(ctx, getDunningPerformanceByAttempt, arg.WorkspaceID, arg.PeriodStart, arg.PeriodEnd)
	var recovery_by_attempt json.RawMessage
	err := row.Scan(&recovery_by_attempt)
	return recovery_by_attempt, err
}

const listDunningAnalyticsByPeriod = `-- name: ListDunningAnalyticsByPeriod :many
SELECT id, workspace_id, period_start, period_end, period_type, total_campaigns_started, total_campaigns_recovered, total_campaigns_lost, recovery_rate, total_at_risk_cents, total_recovered_cents, total_lost_cents, total_payment_retries, successful_payment_retries, total_emails_sent, email_open_rate, email_click_rate, recovery_by_attempt, avg_hours_to_recovery, created_at, updated_at FROM dunning_analytics
WHERE workspace_id = $1
    AND period_type = $2
    AND period_start >= $3
    AND period_end <= $4
ORDER BY period_start DESC
`

type ListDunningAnalyticsByPeriodParams struct {
	WorkspaceID uuid.UUID   `json:"workspace_id"`
	PeriodType  string      `json:"period_type"`
	PeriodStart pgtype.Date `json:"period_start"`
	PeriodEnd   pgtype.Date `json:"period_end"`
}

func (q *Queries) ListDunningAnalyticsByPeriod(ctx context.Context, arg ListDunningAnalyticsByPeriodParams) ([]DunningAnalytic, error) {
	rows, err := q.db.Query(ctx, listDunningAnalyticsByPeriod,
		arg.WorkspaceID,
		arg.PeriodType,
		arg.PeriodStart,
		arg.PeriodEnd,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DunningAnalytic{}
	for rows.Next() {
		var i DunningAnalytic
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.PeriodStart,
			&i.PeriodEnd,
			&i.PeriodType,
			&i.TotalCampaignsStarted,
			&i.TotalCampaignsRecovered,
			&i.TotalCampaignsLost,
			&i.RecoveryRate,
			&i.TotalAtRiskCents,
			&i.TotalRecoveredCents,
			&i.TotalLostCents,
			&i.TotalPaymentRetries,
			&i.SuccessfulPaymentRetries,
			&i.TotalEmailsSent,
			&i.EmailOpenRate,
			&i.EmailClickRate,
			&i.RecoveryByAttempt,
			&i.AvgHoursToRecovery,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
