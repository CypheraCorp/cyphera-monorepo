// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: dunning_attempts.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countSuccessfulAttempts = `-- name: CountSuccessfulAttempts :one
SELECT COUNT(*) as successful_attempts
FROM dunning_attempts
WHERE campaign_id = $1
    AND status = 'success'
`

func (q *Queries) CountSuccessfulAttempts(ctx context.Context, campaignID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countSuccessfulAttempts, campaignID)
	var successful_attempts int64
	err := row.Scan(&successful_attempts)
	return successful_attempts, err
}

const createDunningAttempt = `-- name: CreateDunningAttempt :one
INSERT INTO dunning_attempts (
    campaign_id,
    attempt_number,
    attempt_type,
    status,
    payment_id,
    communication_type,
    email_template_id,
    metadata
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, campaign_id, attempt_number, attempt_type, status, started_at, completed_at, payment_id, payment_status, payment_error, communication_type, communication_sent, communication_error, email_template_id, customer_response, customer_response_at, metadata, created_at
`

type CreateDunningAttemptParams struct {
	CampaignID        uuid.UUID   `json:"campaign_id"`
	AttemptNumber     int32       `json:"attempt_number"`
	AttemptType       string      `json:"attempt_type"`
	Status            string      `json:"status"`
	PaymentID         pgtype.UUID `json:"payment_id"`
	CommunicationType pgtype.Text `json:"communication_type"`
	EmailTemplateID   pgtype.UUID `json:"email_template_id"`
	Metadata          []byte      `json:"metadata"`
}

func (q *Queries) CreateDunningAttempt(ctx context.Context, arg CreateDunningAttemptParams) (DunningAttempt, error) {
	row := q.db.QueryRow(ctx, createDunningAttempt,
		arg.CampaignID,
		arg.AttemptNumber,
		arg.AttemptType,
		arg.Status,
		arg.PaymentID,
		arg.CommunicationType,
		arg.EmailTemplateID,
		arg.Metadata,
	)
	var i DunningAttempt
	err := row.Scan(
		&i.ID,
		&i.CampaignID,
		&i.AttemptNumber,
		&i.AttemptType,
		&i.Status,
		&i.StartedAt,
		&i.CompletedAt,
		&i.PaymentID,
		&i.PaymentStatus,
		&i.PaymentError,
		&i.CommunicationType,
		&i.CommunicationSent,
		&i.CommunicationError,
		&i.EmailTemplateID,
		&i.CustomerResponse,
		&i.CustomerResponseAt,
		&i.Metadata,
		&i.CreatedAt,
	)
	return i, err
}

const getAttemptsByType = `-- name: GetAttemptsByType :many
SELECT 
    attempt_type,
    COUNT(*) as total_attempts,
    COUNT(*) FILTER (WHERE status = 'success') as successful_attempts,
    COUNT(*) FILTER (WHERE status = 'failed') as failed_attempts
FROM dunning_attempts
WHERE campaign_id = $1
GROUP BY attempt_type
`

type GetAttemptsByTypeRow struct {
	AttemptType        string `json:"attempt_type"`
	TotalAttempts      int64  `json:"total_attempts"`
	SuccessfulAttempts int64  `json:"successful_attempts"`
	FailedAttempts     int64  `json:"failed_attempts"`
}

func (q *Queries) GetAttemptsByType(ctx context.Context, campaignID uuid.UUID) ([]GetAttemptsByTypeRow, error) {
	rows, err := q.db.Query(ctx, getAttemptsByType, campaignID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAttemptsByTypeRow{}
	for rows.Next() {
		var i GetAttemptsByTypeRow
		if err := rows.Scan(
			&i.AttemptType,
			&i.TotalAttempts,
			&i.SuccessfulAttempts,
			&i.FailedAttempts,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDunningAttempt = `-- name: GetDunningAttempt :one
SELECT id, campaign_id, attempt_number, attempt_type, status, started_at, completed_at, payment_id, payment_status, payment_error, communication_type, communication_sent, communication_error, email_template_id, customer_response, customer_response_at, metadata, created_at FROM dunning_attempts
WHERE id = $1
`

func (q *Queries) GetDunningAttempt(ctx context.Context, id uuid.UUID) (DunningAttempt, error) {
	row := q.db.QueryRow(ctx, getDunningAttempt, id)
	var i DunningAttempt
	err := row.Scan(
		&i.ID,
		&i.CampaignID,
		&i.AttemptNumber,
		&i.AttemptType,
		&i.Status,
		&i.StartedAt,
		&i.CompletedAt,
		&i.PaymentID,
		&i.PaymentStatus,
		&i.PaymentError,
		&i.CommunicationType,
		&i.CommunicationSent,
		&i.CommunicationError,
		&i.EmailTemplateID,
		&i.CustomerResponse,
		&i.CustomerResponseAt,
		&i.Metadata,
		&i.CreatedAt,
	)
	return i, err
}

const getLatestAttemptForCampaign = `-- name: GetLatestAttemptForCampaign :one
SELECT id, campaign_id, attempt_number, attempt_type, status, started_at, completed_at, payment_id, payment_status, payment_error, communication_type, communication_sent, communication_error, email_template_id, customer_response, customer_response_at, metadata, created_at FROM dunning_attempts
WHERE campaign_id = $1
ORDER BY attempt_number DESC
LIMIT 1
`

func (q *Queries) GetLatestAttemptForCampaign(ctx context.Context, campaignID uuid.UUID) (DunningAttempt, error) {
	row := q.db.QueryRow(ctx, getLatestAttemptForCampaign, campaignID)
	var i DunningAttempt
	err := row.Scan(
		&i.ID,
		&i.CampaignID,
		&i.AttemptNumber,
		&i.AttemptType,
		&i.Status,
		&i.StartedAt,
		&i.CompletedAt,
		&i.PaymentID,
		&i.PaymentStatus,
		&i.PaymentError,
		&i.CommunicationType,
		&i.CommunicationSent,
		&i.CommunicationError,
		&i.EmailTemplateID,
		&i.CustomerResponse,
		&i.CustomerResponseAt,
		&i.Metadata,
		&i.CreatedAt,
	)
	return i, err
}

const listDunningAttempts = `-- name: ListDunningAttempts :many
SELECT id, campaign_id, attempt_number, attempt_type, status, started_at, completed_at, payment_id, payment_status, payment_error, communication_type, communication_sent, communication_error, email_template_id, customer_response, customer_response_at, metadata, created_at FROM dunning_attempts
WHERE campaign_id = $1
ORDER BY attempt_number DESC
`

func (q *Queries) ListDunningAttempts(ctx context.Context, campaignID uuid.UUID) ([]DunningAttempt, error) {
	rows, err := q.db.Query(ctx, listDunningAttempts, campaignID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DunningAttempt{}
	for rows.Next() {
		var i DunningAttempt
		if err := rows.Scan(
			&i.ID,
			&i.CampaignID,
			&i.AttemptNumber,
			&i.AttemptType,
			&i.Status,
			&i.StartedAt,
			&i.CompletedAt,
			&i.PaymentID,
			&i.PaymentStatus,
			&i.PaymentError,
			&i.CommunicationType,
			&i.CommunicationSent,
			&i.CommunicationError,
			&i.EmailTemplateID,
			&i.CustomerResponse,
			&i.CustomerResponseAt,
			&i.Metadata,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDunningAttempt = `-- name: UpdateDunningAttempt :one
UPDATE dunning_attempts
SET 
    status = COALESCE($2, status),
    completed_at = $3,
    payment_status = COALESCE($4, payment_status),
    payment_error = COALESCE($5, payment_error),
    communication_sent = COALESCE($6, communication_sent),
    communication_error = COALESCE($7, communication_error),
    customer_response = COALESCE($8, customer_response),
    customer_response_at = $9,
    metadata = COALESCE($10, metadata)
WHERE id = $1
RETURNING id, campaign_id, attempt_number, attempt_type, status, started_at, completed_at, payment_id, payment_status, payment_error, communication_type, communication_sent, communication_error, email_template_id, customer_response, customer_response_at, metadata, created_at
`

type UpdateDunningAttemptParams struct {
	ID                 uuid.UUID          `json:"id"`
	Status             string             `json:"status"`
	CompletedAt        pgtype.Timestamptz `json:"completed_at"`
	PaymentStatus      pgtype.Text        `json:"payment_status"`
	PaymentError       pgtype.Text        `json:"payment_error"`
	CommunicationSent  pgtype.Bool        `json:"communication_sent"`
	CommunicationError pgtype.Text        `json:"communication_error"`
	CustomerResponse   pgtype.Text        `json:"customer_response"`
	CustomerResponseAt pgtype.Timestamptz `json:"customer_response_at"`
	Metadata           []byte             `json:"metadata"`
}

func (q *Queries) UpdateDunningAttempt(ctx context.Context, arg UpdateDunningAttemptParams) (DunningAttempt, error) {
	row := q.db.QueryRow(ctx, updateDunningAttempt,
		arg.ID,
		arg.Status,
		arg.CompletedAt,
		arg.PaymentStatus,
		arg.PaymentError,
		arg.CommunicationSent,
		arg.CommunicationError,
		arg.CustomerResponse,
		arg.CustomerResponseAt,
		arg.Metadata,
	)
	var i DunningAttempt
	err := row.Scan(
		&i.ID,
		&i.CampaignID,
		&i.AttemptNumber,
		&i.AttemptType,
		&i.Status,
		&i.StartedAt,
		&i.CompletedAt,
		&i.PaymentID,
		&i.PaymentStatus,
		&i.PaymentError,
		&i.CommunicationType,
		&i.CommunicationSent,
		&i.CommunicationError,
		&i.EmailTemplateID,
		&i.CustomerResponse,
		&i.CustomerResponseAt,
		&i.Metadata,
		&i.CreatedAt,
	)
	return i, err
}
