// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: dunning_configurations.sql

package db

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createDunningConfiguration = `-- name: CreateDunningConfiguration :one
INSERT INTO dunning_configurations (
    workspace_id,
    name,
    description,
    is_active,
    is_default,
    max_retry_attempts,
    retry_interval_days,
    attempt_actions,
    final_action,
    final_action_config,
    send_pre_dunning_reminder,
    pre_dunning_days,
    allow_customer_retry,
    grace_period_hours
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14
)
RETURNING id, workspace_id, name, description, is_active, is_default, max_retry_attempts, retry_interval_days, attempt_actions, final_action, final_action_config, send_pre_dunning_reminder, pre_dunning_days, allow_customer_retry, grace_period_hours, created_at, updated_at, deleted_at
`

type CreateDunningConfigurationParams struct {
	WorkspaceID            uuid.UUID       `json:"workspace_id"`
	Name                   string          `json:"name"`
	Description            pgtype.Text     `json:"description"`
	IsActive               pgtype.Bool     `json:"is_active"`
	IsDefault              pgtype.Bool     `json:"is_default"`
	MaxRetryAttempts       int32           `json:"max_retry_attempts"`
	RetryIntervalDays      []int32         `json:"retry_interval_days"`
	AttemptActions         json.RawMessage `json:"attempt_actions"`
	FinalAction            string          `json:"final_action"`
	FinalActionConfig      []byte          `json:"final_action_config"`
	SendPreDunningReminder pgtype.Bool     `json:"send_pre_dunning_reminder"`
	PreDunningDays         pgtype.Int4     `json:"pre_dunning_days"`
	AllowCustomerRetry     pgtype.Bool     `json:"allow_customer_retry"`
	GracePeriodHours       pgtype.Int4     `json:"grace_period_hours"`
}

func (q *Queries) CreateDunningConfiguration(ctx context.Context, arg CreateDunningConfigurationParams) (DunningConfiguration, error) {
	row := q.db.QueryRow(ctx, createDunningConfiguration,
		arg.WorkspaceID,
		arg.Name,
		arg.Description,
		arg.IsActive,
		arg.IsDefault,
		arg.MaxRetryAttempts,
		arg.RetryIntervalDays,
		arg.AttemptActions,
		arg.FinalAction,
		arg.FinalActionConfig,
		arg.SendPreDunningReminder,
		arg.PreDunningDays,
		arg.AllowCustomerRetry,
		arg.GracePeriodHours,
	)
	var i DunningConfiguration
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.Name,
		&i.Description,
		&i.IsActive,
		&i.IsDefault,
		&i.MaxRetryAttempts,
		&i.RetryIntervalDays,
		&i.AttemptActions,
		&i.FinalAction,
		&i.FinalActionConfig,
		&i.SendPreDunningReminder,
		&i.PreDunningDays,
		&i.AllowCustomerRetry,
		&i.GracePeriodHours,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteDunningConfiguration = `-- name: DeleteDunningConfiguration :one
UPDATE dunning_configurations
SET deleted_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, workspace_id, name, description, is_active, is_default, max_retry_attempts, retry_interval_days, attempt_actions, final_action, final_action_config, send_pre_dunning_reminder, pre_dunning_days, allow_customer_retry, grace_period_hours, created_at, updated_at, deleted_at
`

func (q *Queries) DeleteDunningConfiguration(ctx context.Context, id uuid.UUID) (DunningConfiguration, error) {
	row := q.db.QueryRow(ctx, deleteDunningConfiguration, id)
	var i DunningConfiguration
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.Name,
		&i.Description,
		&i.IsActive,
		&i.IsDefault,
		&i.MaxRetryAttempts,
		&i.RetryIntervalDays,
		&i.AttemptActions,
		&i.FinalAction,
		&i.FinalActionConfig,
		&i.SendPreDunningReminder,
		&i.PreDunningDays,
		&i.AllowCustomerRetry,
		&i.GracePeriodHours,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getDefaultDunningConfiguration = `-- name: GetDefaultDunningConfiguration :one
SELECT id, workspace_id, name, description, is_active, is_default, max_retry_attempts, retry_interval_days, attempt_actions, final_action, final_action_config, send_pre_dunning_reminder, pre_dunning_days, allow_customer_retry, grace_period_hours, created_at, updated_at, deleted_at FROM dunning_configurations
WHERE workspace_id = $1 
    AND is_default = true 
    AND deleted_at IS NULL
`

func (q *Queries) GetDefaultDunningConfiguration(ctx context.Context, workspaceID uuid.UUID) (DunningConfiguration, error) {
	row := q.db.QueryRow(ctx, getDefaultDunningConfiguration, workspaceID)
	var i DunningConfiguration
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.Name,
		&i.Description,
		&i.IsActive,
		&i.IsDefault,
		&i.MaxRetryAttempts,
		&i.RetryIntervalDays,
		&i.AttemptActions,
		&i.FinalAction,
		&i.FinalActionConfig,
		&i.SendPreDunningReminder,
		&i.PreDunningDays,
		&i.AllowCustomerRetry,
		&i.GracePeriodHours,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getDunningConfiguration = `-- name: GetDunningConfiguration :one
SELECT id, workspace_id, name, description, is_active, is_default, max_retry_attempts, retry_interval_days, attempt_actions, final_action, final_action_config, send_pre_dunning_reminder, pre_dunning_days, allow_customer_retry, grace_period_hours, created_at, updated_at, deleted_at FROM dunning_configurations
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetDunningConfiguration(ctx context.Context, id uuid.UUID) (DunningConfiguration, error) {
	row := q.db.QueryRow(ctx, getDunningConfiguration, id)
	var i DunningConfiguration
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.Name,
		&i.Description,
		&i.IsActive,
		&i.IsDefault,
		&i.MaxRetryAttempts,
		&i.RetryIntervalDays,
		&i.AttemptActions,
		&i.FinalAction,
		&i.FinalActionConfig,
		&i.SendPreDunningReminder,
		&i.PreDunningDays,
		&i.AllowCustomerRetry,
		&i.GracePeriodHours,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listDunningConfigurations = `-- name: ListDunningConfigurations :many
SELECT id, workspace_id, name, description, is_active, is_default, max_retry_attempts, retry_interval_days, attempt_actions, final_action, final_action_config, send_pre_dunning_reminder, pre_dunning_days, allow_customer_retry, grace_period_hours, created_at, updated_at, deleted_at FROM dunning_configurations
WHERE workspace_id = $1 AND deleted_at IS NULL
ORDER BY is_default DESC, name
`

func (q *Queries) ListDunningConfigurations(ctx context.Context, workspaceID uuid.UUID) ([]DunningConfiguration, error) {
	rows, err := q.db.Query(ctx, listDunningConfigurations, workspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DunningConfiguration{}
	for rows.Next() {
		var i DunningConfiguration
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.Name,
			&i.Description,
			&i.IsActive,
			&i.IsDefault,
			&i.MaxRetryAttempts,
			&i.RetryIntervalDays,
			&i.AttemptActions,
			&i.FinalAction,
			&i.FinalActionConfig,
			&i.SendPreDunningReminder,
			&i.PreDunningDays,
			&i.AllowCustomerRetry,
			&i.GracePeriodHours,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setDefaultDunningConfiguration = `-- name: SetDefaultDunningConfiguration :exec
UPDATE dunning_configurations
SET is_default = false
WHERE workspace_id = $1 AND id != $2 AND deleted_at IS NULL
`

type SetDefaultDunningConfigurationParams struct {
	WorkspaceID uuid.UUID `json:"workspace_id"`
	ID          uuid.UUID `json:"id"`
}

func (q *Queries) SetDefaultDunningConfiguration(ctx context.Context, arg SetDefaultDunningConfigurationParams) error {
	_, err := q.db.Exec(ctx, setDefaultDunningConfiguration, arg.WorkspaceID, arg.ID)
	return err
}

const updateDunningConfiguration = `-- name: UpdateDunningConfiguration :one
UPDATE dunning_configurations
SET 
    name = COALESCE($2, name),
    description = COALESCE($3, description),
    is_active = COALESCE($4, is_active),
    max_retry_attempts = COALESCE($5, max_retry_attempts),
    retry_interval_days = COALESCE($6, retry_interval_days),
    attempt_actions = COALESCE($7, attempt_actions),
    final_action = COALESCE($8, final_action),
    final_action_config = COALESCE($9, final_action_config),
    send_pre_dunning_reminder = COALESCE($10, send_pre_dunning_reminder),
    pre_dunning_days = COALESCE($11, pre_dunning_days),
    allow_customer_retry = COALESCE($12, allow_customer_retry),
    grace_period_hours = COALESCE($13, grace_period_hours),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, workspace_id, name, description, is_active, is_default, max_retry_attempts, retry_interval_days, attempt_actions, final_action, final_action_config, send_pre_dunning_reminder, pre_dunning_days, allow_customer_retry, grace_period_hours, created_at, updated_at, deleted_at
`

type UpdateDunningConfigurationParams struct {
	ID                     uuid.UUID       `json:"id"`
	Name                   string          `json:"name"`
	Description            pgtype.Text     `json:"description"`
	IsActive               pgtype.Bool     `json:"is_active"`
	MaxRetryAttempts       int32           `json:"max_retry_attempts"`
	RetryIntervalDays      []int32         `json:"retry_interval_days"`
	AttemptActions         json.RawMessage `json:"attempt_actions"`
	FinalAction            string          `json:"final_action"`
	FinalActionConfig      []byte          `json:"final_action_config"`
	SendPreDunningReminder pgtype.Bool     `json:"send_pre_dunning_reminder"`
	PreDunningDays         pgtype.Int4     `json:"pre_dunning_days"`
	AllowCustomerRetry     pgtype.Bool     `json:"allow_customer_retry"`
	GracePeriodHours       pgtype.Int4     `json:"grace_period_hours"`
}

func (q *Queries) UpdateDunningConfiguration(ctx context.Context, arg UpdateDunningConfigurationParams) (DunningConfiguration, error) {
	row := q.db.QueryRow(ctx, updateDunningConfiguration,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.IsActive,
		arg.MaxRetryAttempts,
		arg.RetryIntervalDays,
		arg.AttemptActions,
		arg.FinalAction,
		arg.FinalActionConfig,
		arg.SendPreDunningReminder,
		arg.PreDunningDays,
		arg.AllowCustomerRetry,
		arg.GracePeriodHours,
	)
	var i DunningConfiguration
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.Name,
		&i.Description,
		&i.IsActive,
		&i.IsDefault,
		&i.MaxRetryAttempts,
		&i.RetryIntervalDays,
		&i.AttemptActions,
		&i.FinalAction,
		&i.FinalActionConfig,
		&i.SendPreDunningReminder,
		&i.PreDunningDays,
		&i.AllowCustomerRetry,
		&i.GracePeriodHours,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
