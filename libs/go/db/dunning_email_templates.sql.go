// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: dunning_email_templates.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createDunningEmailTemplate = `-- name: CreateDunningEmailTemplate :one
INSERT INTO dunning_email_templates (
    workspace_id,
    name,
    template_type,
    subject,
    body_html,
    body_text,
    available_variables,
    is_active
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, workspace_id, name, template_type, subject, body_html, body_text, available_variables, is_active, created_at, updated_at, deleted_at
`

type CreateDunningEmailTemplateParams struct {
	WorkspaceID        uuid.UUID   `json:"workspace_id"`
	Name               string      `json:"name"`
	TemplateType       string      `json:"template_type"`
	Subject            string      `json:"subject"`
	BodyHtml           string      `json:"body_html"`
	BodyText           pgtype.Text `json:"body_text"`
	AvailableVariables []byte      `json:"available_variables"`
	IsActive           pgtype.Bool `json:"is_active"`
}

func (q *Queries) CreateDunningEmailTemplate(ctx context.Context, arg CreateDunningEmailTemplateParams) (DunningEmailTemplate, error) {
	row := q.db.QueryRow(ctx, createDunningEmailTemplate,
		arg.WorkspaceID,
		arg.Name,
		arg.TemplateType,
		arg.Subject,
		arg.BodyHtml,
		arg.BodyText,
		arg.AvailableVariables,
		arg.IsActive,
	)
	var i DunningEmailTemplate
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.Name,
		&i.TemplateType,
		&i.Subject,
		&i.BodyHtml,
		&i.BodyText,
		&i.AvailableVariables,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deactivateTemplatesByType = `-- name: DeactivateTemplatesByType :exec
UPDATE dunning_email_templates
SET is_active = false
WHERE workspace_id = $1 
    AND template_type = $2 
    AND id != $3
    AND deleted_at IS NULL
`

type DeactivateTemplatesByTypeParams struct {
	WorkspaceID  uuid.UUID `json:"workspace_id"`
	TemplateType string    `json:"template_type"`
	ID           uuid.UUID `json:"id"`
}

func (q *Queries) DeactivateTemplatesByType(ctx context.Context, arg DeactivateTemplatesByTypeParams) error {
	_, err := q.db.Exec(ctx, deactivateTemplatesByType, arg.WorkspaceID, arg.TemplateType, arg.ID)
	return err
}

const deleteDunningEmailTemplate = `-- name: DeleteDunningEmailTemplate :one
UPDATE dunning_email_templates
SET deleted_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, workspace_id, name, template_type, subject, body_html, body_text, available_variables, is_active, created_at, updated_at, deleted_at
`

func (q *Queries) DeleteDunningEmailTemplate(ctx context.Context, id uuid.UUID) (DunningEmailTemplate, error) {
	row := q.db.QueryRow(ctx, deleteDunningEmailTemplate, id)
	var i DunningEmailTemplate
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.Name,
		&i.TemplateType,
		&i.Subject,
		&i.BodyHtml,
		&i.BodyText,
		&i.AvailableVariables,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getDunningEmailTemplate = `-- name: GetDunningEmailTemplate :one
SELECT id, workspace_id, name, template_type, subject, body_html, body_text, available_variables, is_active, created_at, updated_at, deleted_at FROM dunning_email_templates
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetDunningEmailTemplate(ctx context.Context, id uuid.UUID) (DunningEmailTemplate, error) {
	row := q.db.QueryRow(ctx, getDunningEmailTemplate, id)
	var i DunningEmailTemplate
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.Name,
		&i.TemplateType,
		&i.Subject,
		&i.BodyHtml,
		&i.BodyText,
		&i.AvailableVariables,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getDunningEmailTemplateByType = `-- name: GetDunningEmailTemplateByType :one
SELECT id, workspace_id, name, template_type, subject, body_html, body_text, available_variables, is_active, created_at, updated_at, deleted_at FROM dunning_email_templates
WHERE workspace_id = $1
    AND template_type = $2
    AND is_active = true
    AND deleted_at IS NULL
ORDER BY created_at DESC
LIMIT 1
`

type GetDunningEmailTemplateByTypeParams struct {
	WorkspaceID  uuid.UUID `json:"workspace_id"`
	TemplateType string    `json:"template_type"`
}

func (q *Queries) GetDunningEmailTemplateByType(ctx context.Context, arg GetDunningEmailTemplateByTypeParams) (DunningEmailTemplate, error) {
	row := q.db.QueryRow(ctx, getDunningEmailTemplateByType, arg.WorkspaceID, arg.TemplateType)
	var i DunningEmailTemplate
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.Name,
		&i.TemplateType,
		&i.Subject,
		&i.BodyHtml,
		&i.BodyText,
		&i.AvailableVariables,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listActiveDunningEmailTemplates = `-- name: ListActiveDunningEmailTemplates :many
SELECT id, workspace_id, name, template_type, subject, body_html, body_text, available_variables, is_active, created_at, updated_at, deleted_at FROM dunning_email_templates
WHERE workspace_id = $1
    AND is_active = true
    AND deleted_at IS NULL
ORDER BY template_type, name
`

func (q *Queries) ListActiveDunningEmailTemplates(ctx context.Context, workspaceID uuid.UUID) ([]DunningEmailTemplate, error) {
	rows, err := q.db.Query(ctx, listActiveDunningEmailTemplates, workspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DunningEmailTemplate{}
	for rows.Next() {
		var i DunningEmailTemplate
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.Name,
			&i.TemplateType,
			&i.Subject,
			&i.BodyHtml,
			&i.BodyText,
			&i.AvailableVariables,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDunningEmailTemplates = `-- name: ListDunningEmailTemplates :many
SELECT id, workspace_id, name, template_type, subject, body_html, body_text, available_variables, is_active, created_at, updated_at, deleted_at FROM dunning_email_templates
WHERE workspace_id = $1
    AND deleted_at IS NULL
ORDER BY template_type, name
`

func (q *Queries) ListDunningEmailTemplates(ctx context.Context, workspaceID uuid.UUID) ([]DunningEmailTemplate, error) {
	rows, err := q.db.Query(ctx, listDunningEmailTemplates, workspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DunningEmailTemplate{}
	for rows.Next() {
		var i DunningEmailTemplate
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.Name,
			&i.TemplateType,
			&i.Subject,
			&i.BodyHtml,
			&i.BodyText,
			&i.AvailableVariables,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDunningEmailTemplate = `-- name: UpdateDunningEmailTemplate :one
UPDATE dunning_email_templates
SET 
    name = COALESCE($2, name),
    subject = COALESCE($3, subject),
    body_html = COALESCE($4, body_html),
    body_text = COALESCE($5, body_text),
    available_variables = COALESCE($6, available_variables),
    is_active = COALESCE($7, is_active),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, workspace_id, name, template_type, subject, body_html, body_text, available_variables, is_active, created_at, updated_at, deleted_at
`

type UpdateDunningEmailTemplateParams struct {
	ID                 uuid.UUID   `json:"id"`
	Name               string      `json:"name"`
	Subject            string      `json:"subject"`
	BodyHtml           string      `json:"body_html"`
	BodyText           pgtype.Text `json:"body_text"`
	AvailableVariables []byte      `json:"available_variables"`
	IsActive           pgtype.Bool `json:"is_active"`
}

func (q *Queries) UpdateDunningEmailTemplate(ctx context.Context, arg UpdateDunningEmailTemplateParams) (DunningEmailTemplate, error) {
	row := q.db.QueryRow(ctx, updateDunningEmailTemplate,
		arg.ID,
		arg.Name,
		arg.Subject,
		arg.BodyHtml,
		arg.BodyText,
		arg.AvailableVariables,
		arg.IsActive,
	)
	var i DunningEmailTemplate
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.Name,
		&i.TemplateType,
		&i.Subject,
		&i.BodyHtml,
		&i.BodyText,
		&i.AvailableVariables,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
