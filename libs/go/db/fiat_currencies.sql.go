// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: fiat_currencies.sql

package db

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const activateFiatCurrency = `-- name: ActivateFiatCurrency :exec
UPDATE fiat_currencies
SET is_active = true, updated_at = CURRENT_TIMESTAMP
WHERE code = $1
`

func (q *Queries) ActivateFiatCurrency(ctx context.Context, code string) error {
	_, err := q.db.Exec(ctx, activateFiatCurrency, code)
	return err
}

const addWorkspaceSupportedCurrency = `-- name: AddWorkspaceSupportedCurrency :exec
UPDATE workspaces
SET 
    supported_currencies = supported_currencies || $2::jsonb,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
AND NOT supported_currencies @> $2::jsonb
`

type AddWorkspaceSupportedCurrencyParams struct {
	ID      uuid.UUID       `json:"id"`
	Column2 json.RawMessage `json:"column_2"`
}

func (q *Queries) AddWorkspaceSupportedCurrency(ctx context.Context, arg AddWorkspaceSupportedCurrencyParams) error {
	_, err := q.db.Exec(ctx, addWorkspaceSupportedCurrency, arg.ID, arg.Column2)
	return err
}

const deactivateFiatCurrency = `-- name: DeactivateFiatCurrency :exec
UPDATE fiat_currencies
SET is_active = false, updated_at = CURRENT_TIMESTAMP
WHERE code = $1
`

func (q *Queries) DeactivateFiatCurrency(ctx context.Context, code string) error {
	_, err := q.db.Exec(ctx, deactivateFiatCurrency, code)
	return err
}

const getFiatCurrency = `-- name: GetFiatCurrency :one
SELECT id, code, name, symbol, decimal_places, is_active, symbol_position, thousand_separator, decimal_separator, countries, created_at, updated_at FROM fiat_currencies
WHERE code = $1 AND is_active = true
LIMIT 1
`

func (q *Queries) GetFiatCurrency(ctx context.Context, code string) (FiatCurrency, error) {
	row := q.db.QueryRow(ctx, getFiatCurrency, code)
	var i FiatCurrency
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.Symbol,
		&i.DecimalPlaces,
		&i.IsActive,
		&i.SymbolPosition,
		&i.ThousandSeparator,
		&i.DecimalSeparator,
		&i.Countries,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFiatCurrencyByCode = `-- name: GetFiatCurrencyByCode :one
SELECT id, code, name, symbol, decimal_places, is_active, symbol_position, thousand_separator, decimal_separator, countries, created_at, updated_at FROM fiat_currencies
WHERE code = $1
LIMIT 1
`

func (q *Queries) GetFiatCurrencyByCode(ctx context.Context, code string) (FiatCurrency, error) {
	row := q.db.QueryRow(ctx, getFiatCurrencyByCode, code)
	var i FiatCurrency
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.Symbol,
		&i.DecimalPlaces,
		&i.IsActive,
		&i.SymbolPosition,
		&i.ThousandSeparator,
		&i.DecimalSeparator,
		&i.Countries,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWorkspaceDefaultCurrency = `-- name: GetWorkspaceDefaultCurrency :one
SELECT fc.id, fc.code, fc.name, fc.symbol, fc.decimal_places, fc.is_active, fc.symbol_position, fc.thousand_separator, fc.decimal_separator, fc.countries, fc.created_at, fc.updated_at FROM fiat_currencies fc
INNER JOIN workspaces w ON w.default_currency = fc.code
WHERE w.id = $1
LIMIT 1
`

func (q *Queries) GetWorkspaceDefaultCurrency(ctx context.Context, id uuid.UUID) (FiatCurrency, error) {
	row := q.db.QueryRow(ctx, getWorkspaceDefaultCurrency, id)
	var i FiatCurrency
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.Symbol,
		&i.DecimalPlaces,
		&i.IsActive,
		&i.SymbolPosition,
		&i.ThousandSeparator,
		&i.DecimalSeparator,
		&i.Countries,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listActiveFiatCurrencies = `-- name: ListActiveFiatCurrencies :many
SELECT id, code, name, symbol, decimal_places, is_active, symbol_position, thousand_separator, decimal_separator, countries, created_at, updated_at FROM fiat_currencies
WHERE is_active = true
ORDER BY code
`

func (q *Queries) ListActiveFiatCurrencies(ctx context.Context) ([]FiatCurrency, error) {
	rows, err := q.db.Query(ctx, listActiveFiatCurrencies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FiatCurrency{}
	for rows.Next() {
		var i FiatCurrency
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Name,
			&i.Symbol,
			&i.DecimalPlaces,
			&i.IsActive,
			&i.SymbolPosition,
			&i.ThousandSeparator,
			&i.DecimalSeparator,
			&i.Countries,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllFiatCurrencies = `-- name: ListAllFiatCurrencies :many
SELECT id, code, name, symbol, decimal_places, is_active, symbol_position, thousand_separator, decimal_separator, countries, created_at, updated_at FROM fiat_currencies
ORDER BY code
`

func (q *Queries) ListAllFiatCurrencies(ctx context.Context) ([]FiatCurrency, error) {
	rows, err := q.db.Query(ctx, listAllFiatCurrencies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FiatCurrency{}
	for rows.Next() {
		var i FiatCurrency
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Name,
			&i.Symbol,
			&i.DecimalPlaces,
			&i.IsActive,
			&i.SymbolPosition,
			&i.ThousandSeparator,
			&i.DecimalSeparator,
			&i.Countries,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWorkspaceSupportedCurrencies = `-- name: ListWorkspaceSupportedCurrencies :many
SELECT fc.id, fc.code, fc.name, fc.symbol, fc.decimal_places, fc.is_active, fc.symbol_position, fc.thousand_separator, fc.decimal_separator, fc.countries, fc.created_at, fc.updated_at FROM fiat_currencies fc
INNER JOIN (
    SELECT jsonb_array_elements_text(supported_currencies) as currency_code
    FROM workspaces
    WHERE workspaces.id = $1
) w ON fc.code = w.currency_code
WHERE fc.is_active = true
ORDER BY fc.code
`

func (q *Queries) ListWorkspaceSupportedCurrencies(ctx context.Context, id uuid.UUID) ([]FiatCurrency, error) {
	rows, err := q.db.Query(ctx, listWorkspaceSupportedCurrencies, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FiatCurrency{}
	for rows.Next() {
		var i FiatCurrency
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Name,
			&i.Symbol,
			&i.DecimalPlaces,
			&i.IsActive,
			&i.SymbolPosition,
			&i.ThousandSeparator,
			&i.DecimalSeparator,
			&i.Countries,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeWorkspaceSupportedCurrency = `-- name: RemoveWorkspaceSupportedCurrency :exec
UPDATE workspaces
SET 
    supported_currencies = supported_currencies - $2::text,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type RemoveWorkspaceSupportedCurrencyParams struct {
	ID      uuid.UUID `json:"id"`
	Column2 string    `json:"column_2"`
}

func (q *Queries) RemoveWorkspaceSupportedCurrency(ctx context.Context, arg RemoveWorkspaceSupportedCurrencyParams) error {
	_, err := q.db.Exec(ctx, removeWorkspaceSupportedCurrency, arg.ID, arg.Column2)
	return err
}

const updateFiatCurrency = `-- name: UpdateFiatCurrency :one
UPDATE fiat_currencies
SET 
    name = $2,
    symbol = $3,
    decimal_places = $4,
    is_active = $5,
    symbol_position = $6,
    thousand_separator = $7,
    decimal_separator = $8,
    countries = $9,
    updated_at = CURRENT_TIMESTAMP
WHERE code = $1
RETURNING id, code, name, symbol, decimal_places, is_active, symbol_position, thousand_separator, decimal_separator, countries, created_at, updated_at
`

type UpdateFiatCurrencyParams struct {
	Code              string      `json:"code"`
	Name              string      `json:"name"`
	Symbol            string      `json:"symbol"`
	DecimalPlaces     int32       `json:"decimal_places"`
	IsActive          pgtype.Bool `json:"is_active"`
	SymbolPosition    pgtype.Text `json:"symbol_position"`
	ThousandSeparator pgtype.Text `json:"thousand_separator"`
	DecimalSeparator  pgtype.Text `json:"decimal_separator"`
	Countries         []byte      `json:"countries"`
}

func (q *Queries) UpdateFiatCurrency(ctx context.Context, arg UpdateFiatCurrencyParams) (FiatCurrency, error) {
	row := q.db.QueryRow(ctx, updateFiatCurrency,
		arg.Code,
		arg.Name,
		arg.Symbol,
		arg.DecimalPlaces,
		arg.IsActive,
		arg.SymbolPosition,
		arg.ThousandSeparator,
		arg.DecimalSeparator,
		arg.Countries,
	)
	var i FiatCurrency
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.Symbol,
		&i.DecimalPlaces,
		&i.IsActive,
		&i.SymbolPosition,
		&i.ThousandSeparator,
		&i.DecimalSeparator,
		&i.Countries,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateWorkspaceDefaultCurrency = `-- name: UpdateWorkspaceDefaultCurrency :exec
UPDATE workspaces
SET default_currency = $2, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type UpdateWorkspaceDefaultCurrencyParams struct {
	ID              uuid.UUID   `json:"id"`
	DefaultCurrency pgtype.Text `json:"default_currency"`
}

func (q *Queries) UpdateWorkspaceDefaultCurrency(ctx context.Context, arg UpdateWorkspaceDefaultCurrencyParams) error {
	_, err := q.db.Exec(ctx, updateWorkspaceDefaultCurrency, arg.ID, arg.DefaultCurrency)
	return err
}

const updateWorkspaceSupportedCurrencies = `-- name: UpdateWorkspaceSupportedCurrencies :exec
UPDATE workspaces
SET supported_currencies = $2, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type UpdateWorkspaceSupportedCurrenciesParams struct {
	ID                  uuid.UUID `json:"id"`
	SupportedCurrencies []byte    `json:"supported_currencies"`
}

func (q *Queries) UpdateWorkspaceSupportedCurrencies(ctx context.Context, arg UpdateWorkspaceSupportedCurrenciesParams) error {
	_, err := q.db.Exec(ctx, updateWorkspaceSupportedCurrencies, arg.ID, arg.SupportedCurrencies)
	return err
}
