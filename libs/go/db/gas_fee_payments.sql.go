// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: gas_fee_payments.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createGasFeePayment = `-- name: CreateGasFeePayment :one
INSERT INTO gas_fee_payments (
    payment_id,
    gas_fee_wei,
    gas_price_gwei,
    gas_units_used,
    max_gas_units,
    base_fee_gwei,
    priority_fee_gwei,
    payment_token_id,
    payment_token_amount,
    payment_method,
    sponsor_type,
    sponsor_id,
    sponsor_workspace_id,
    network_id,
    block_number,
    block_timestamp,
    eth_usd_price,
    token_usd_price,
    gas_fee_usd_cents
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19
)
RETURNING id, payment_id, gas_fee_wei, gas_price_gwei, gas_units_used, max_gas_units, base_fee_gwei, priority_fee_gwei, payment_token_id, payment_token_amount, payment_method, sponsor_type, sponsor_id, sponsor_workspace_id, network_id, block_number, block_timestamp, eth_usd_price, token_usd_price, gas_fee_usd_cents, created_at
`

type CreateGasFeePaymentParams struct {
	PaymentID          uuid.UUID          `json:"payment_id"`
	GasFeeWei          string             `json:"gas_fee_wei"`
	GasPriceGwei       string             `json:"gas_price_gwei"`
	GasUnitsUsed       int64              `json:"gas_units_used"`
	MaxGasUnits        int64              `json:"max_gas_units"`
	BaseFeeGwei        pgtype.Text        `json:"base_fee_gwei"`
	PriorityFeeGwei    pgtype.Text        `json:"priority_fee_gwei"`
	PaymentTokenID     pgtype.UUID        `json:"payment_token_id"`
	PaymentTokenAmount pgtype.Text        `json:"payment_token_amount"`
	PaymentMethod      string             `json:"payment_method"`
	SponsorType        string             `json:"sponsor_type"`
	SponsorID          pgtype.UUID        `json:"sponsor_id"`
	SponsorWorkspaceID pgtype.UUID        `json:"sponsor_workspace_id"`
	NetworkID          uuid.UUID          `json:"network_id"`
	BlockNumber        pgtype.Int8        `json:"block_number"`
	BlockTimestamp     pgtype.Timestamptz `json:"block_timestamp"`
	EthUsdPrice        pgtype.Numeric     `json:"eth_usd_price"`
	TokenUsdPrice      pgtype.Numeric     `json:"token_usd_price"`
	GasFeeUsdCents     pgtype.Int8        `json:"gas_fee_usd_cents"`
}

func (q *Queries) CreateGasFeePayment(ctx context.Context, arg CreateGasFeePaymentParams) (GasFeePayment, error) {
	row := q.db.QueryRow(ctx, createGasFeePayment,
		arg.PaymentID,
		arg.GasFeeWei,
		arg.GasPriceGwei,
		arg.GasUnitsUsed,
		arg.MaxGasUnits,
		arg.BaseFeeGwei,
		arg.PriorityFeeGwei,
		arg.PaymentTokenID,
		arg.PaymentTokenAmount,
		arg.PaymentMethod,
		arg.SponsorType,
		arg.SponsorID,
		arg.SponsorWorkspaceID,
		arg.NetworkID,
		arg.BlockNumber,
		arg.BlockTimestamp,
		arg.EthUsdPrice,
		arg.TokenUsdPrice,
		arg.GasFeeUsdCents,
	)
	var i GasFeePayment
	err := row.Scan(
		&i.ID,
		&i.PaymentID,
		&i.GasFeeWei,
		&i.GasPriceGwei,
		&i.GasUnitsUsed,
		&i.MaxGasUnits,
		&i.BaseFeeGwei,
		&i.PriorityFeeGwei,
		&i.PaymentTokenID,
		&i.PaymentTokenAmount,
		&i.PaymentMethod,
		&i.SponsorType,
		&i.SponsorID,
		&i.SponsorWorkspaceID,
		&i.NetworkID,
		&i.BlockNumber,
		&i.BlockTimestamp,
		&i.EthUsdPrice,
		&i.TokenUsdPrice,
		&i.GasFeeUsdCents,
		&i.CreatedAt,
	)
	return i, err
}

const getCustomerGasPayments = `-- name: GetCustomerGasPayments :many
SELECT 
    gfp.id, gfp.payment_id, gfp.gas_fee_wei, gfp.gas_price_gwei, gfp.gas_units_used, gfp.max_gas_units, gfp.base_fee_gwei, gfp.priority_fee_gwei, gfp.payment_token_id, gfp.payment_token_amount, gfp.payment_method, gfp.sponsor_type, gfp.sponsor_id, gfp.sponsor_workspace_id, gfp.network_id, gfp.block_number, gfp.block_timestamp, gfp.eth_usd_price, gfp.token_usd_price, gfp.gas_fee_usd_cents, gfp.created_at,
    p.customer_id,
    c.email as customer_email,
    n.name as network_name
FROM gas_fee_payments gfp
JOIN payments p ON gfp.payment_id = p.id
JOIN customers c ON p.customer_id = c.id
JOIN networks n ON gfp.network_id = n.id
WHERE p.customer_id = $1
    AND gfp.sponsor_type = 'customer'
ORDER BY gfp.created_at DESC
LIMIT $2 OFFSET $3
`

type GetCustomerGasPaymentsParams struct {
	CustomerID uuid.UUID `json:"customer_id"`
	Limit      int32     `json:"limit"`
	Offset     int32     `json:"offset"`
}

type GetCustomerGasPaymentsRow struct {
	ID                 uuid.UUID          `json:"id"`
	PaymentID          uuid.UUID          `json:"payment_id"`
	GasFeeWei          string             `json:"gas_fee_wei"`
	GasPriceGwei       string             `json:"gas_price_gwei"`
	GasUnitsUsed       int64              `json:"gas_units_used"`
	MaxGasUnits        int64              `json:"max_gas_units"`
	BaseFeeGwei        pgtype.Text        `json:"base_fee_gwei"`
	PriorityFeeGwei    pgtype.Text        `json:"priority_fee_gwei"`
	PaymentTokenID     pgtype.UUID        `json:"payment_token_id"`
	PaymentTokenAmount pgtype.Text        `json:"payment_token_amount"`
	PaymentMethod      string             `json:"payment_method"`
	SponsorType        string             `json:"sponsor_type"`
	SponsorID          pgtype.UUID        `json:"sponsor_id"`
	SponsorWorkspaceID pgtype.UUID        `json:"sponsor_workspace_id"`
	NetworkID          uuid.UUID          `json:"network_id"`
	BlockNumber        pgtype.Int8        `json:"block_number"`
	BlockTimestamp     pgtype.Timestamptz `json:"block_timestamp"`
	EthUsdPrice        pgtype.Numeric     `json:"eth_usd_price"`
	TokenUsdPrice      pgtype.Numeric     `json:"token_usd_price"`
	GasFeeUsdCents     pgtype.Int8        `json:"gas_fee_usd_cents"`
	CreatedAt          pgtype.Timestamptz `json:"created_at"`
	CustomerID         uuid.UUID          `json:"customer_id"`
	CustomerEmail      pgtype.Text        `json:"customer_email"`
	NetworkName        string             `json:"network_name"`
}

func (q *Queries) GetCustomerGasPayments(ctx context.Context, arg GetCustomerGasPaymentsParams) ([]GetCustomerGasPaymentsRow, error) {
	rows, err := q.db.Query(ctx, getCustomerGasPayments, arg.CustomerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCustomerGasPaymentsRow{}
	for rows.Next() {
		var i GetCustomerGasPaymentsRow
		if err := rows.Scan(
			&i.ID,
			&i.PaymentID,
			&i.GasFeeWei,
			&i.GasPriceGwei,
			&i.GasUnitsUsed,
			&i.MaxGasUnits,
			&i.BaseFeeGwei,
			&i.PriorityFeeGwei,
			&i.PaymentTokenID,
			&i.PaymentTokenAmount,
			&i.PaymentMethod,
			&i.SponsorType,
			&i.SponsorID,
			&i.SponsorWorkspaceID,
			&i.NetworkID,
			&i.BlockNumber,
			&i.BlockTimestamp,
			&i.EthUsdPrice,
			&i.TokenUsdPrice,
			&i.GasFeeUsdCents,
			&i.CreatedAt,
			&i.CustomerID,
			&i.CustomerEmail,
			&i.NetworkName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGasFeeMetrics = `-- name: GetGasFeeMetrics :one
SELECT 
    COUNT(*) as total_transactions,
    SUM(gas_fee_usd_cents) as total_gas_fees_cents,
    AVG(gas_fee_usd_cents) as avg_gas_fee_cents,
    SUM(gas_fee_usd_cents) FILTER (WHERE sponsor_type = 'merchant') as merchant_sponsored_cents,
    SUM(gas_fee_usd_cents) FILTER (WHERE sponsor_type = 'customer') as customer_paid_cents,
    SUM(gas_fee_usd_cents) FILTER (WHERE sponsor_type = 'platform') as platform_sponsored_cents,
    AVG(gas_units_used) as avg_gas_units,
    MAX(gas_fee_usd_cents) as max_gas_fee_cents,
    MIN(gas_fee_usd_cents) as min_gas_fee_cents
FROM gas_fee_payments gfp
JOIN payments p ON gfp.payment_id = p.id
WHERE p.workspace_id = $1
    AND gfp.created_at >= $2
    AND gfp.created_at < $3
`

type GetGasFeeMetricsParams struct {
	WorkspaceID uuid.UUID          `json:"workspace_id"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	CreatedAt_2 pgtype.Timestamptz `json:"created_at_2"`
}

type GetGasFeeMetricsRow struct {
	TotalTransactions      int64       `json:"total_transactions"`
	TotalGasFeesCents      int64       `json:"total_gas_fees_cents"`
	AvgGasFeeCents         float64     `json:"avg_gas_fee_cents"`
	MerchantSponsoredCents int64       `json:"merchant_sponsored_cents"`
	CustomerPaidCents      int64       `json:"customer_paid_cents"`
	PlatformSponsoredCents int64       `json:"platform_sponsored_cents"`
	AvgGasUnits            float64     `json:"avg_gas_units"`
	MaxGasFeeCents         interface{} `json:"max_gas_fee_cents"`
	MinGasFeeCents         interface{} `json:"min_gas_fee_cents"`
}

func (q *Queries) GetGasFeeMetrics(ctx context.Context, arg GetGasFeeMetricsParams) (GetGasFeeMetricsRow, error) {
	row := q.db.QueryRow(ctx, getGasFeeMetrics, arg.WorkspaceID, arg.CreatedAt, arg.CreatedAt_2)
	var i GetGasFeeMetricsRow
	err := row.Scan(
		&i.TotalTransactions,
		&i.TotalGasFeesCents,
		&i.AvgGasFeeCents,
		&i.MerchantSponsoredCents,
		&i.CustomerPaidCents,
		&i.PlatformSponsoredCents,
		&i.AvgGasUnits,
		&i.MaxGasFeeCents,
		&i.MinGasFeeCents,
	)
	return i, err
}

const getGasFeePayment = `-- name: GetGasFeePayment :one
SELECT id, payment_id, gas_fee_wei, gas_price_gwei, gas_units_used, max_gas_units, base_fee_gwei, priority_fee_gwei, payment_token_id, payment_token_amount, payment_method, sponsor_type, sponsor_id, sponsor_workspace_id, network_id, block_number, block_timestamp, eth_usd_price, token_usd_price, gas_fee_usd_cents, created_at FROM gas_fee_payments
WHERE id = $1
`

func (q *Queries) GetGasFeePayment(ctx context.Context, id uuid.UUID) (GasFeePayment, error) {
	row := q.db.QueryRow(ctx, getGasFeePayment, id)
	var i GasFeePayment
	err := row.Scan(
		&i.ID,
		&i.PaymentID,
		&i.GasFeeWei,
		&i.GasPriceGwei,
		&i.GasUnitsUsed,
		&i.MaxGasUnits,
		&i.BaseFeeGwei,
		&i.PriorityFeeGwei,
		&i.PaymentTokenID,
		&i.PaymentTokenAmount,
		&i.PaymentMethod,
		&i.SponsorType,
		&i.SponsorID,
		&i.SponsorWorkspaceID,
		&i.NetworkID,
		&i.BlockNumber,
		&i.BlockTimestamp,
		&i.EthUsdPrice,
		&i.TokenUsdPrice,
		&i.GasFeeUsdCents,
		&i.CreatedAt,
	)
	return i, err
}

const getGasFeePaymentByPaymentId = `-- name: GetGasFeePaymentByPaymentId :one
SELECT id, payment_id, gas_fee_wei, gas_price_gwei, gas_units_used, max_gas_units, base_fee_gwei, priority_fee_gwei, payment_token_id, payment_token_amount, payment_method, sponsor_type, sponsor_id, sponsor_workspace_id, network_id, block_number, block_timestamp, eth_usd_price, token_usd_price, gas_fee_usd_cents, created_at FROM gas_fee_payments
WHERE payment_id = $1
`

func (q *Queries) GetGasFeePaymentByPaymentId(ctx context.Context, paymentID uuid.UUID) (GasFeePayment, error) {
	row := q.db.QueryRow(ctx, getGasFeePaymentByPaymentId, paymentID)
	var i GasFeePayment
	err := row.Scan(
		&i.ID,
		&i.PaymentID,
		&i.GasFeeWei,
		&i.GasPriceGwei,
		&i.GasUnitsUsed,
		&i.MaxGasUnits,
		&i.BaseFeeGwei,
		&i.PriorityFeeGwei,
		&i.PaymentTokenID,
		&i.PaymentTokenAmount,
		&i.PaymentMethod,
		&i.SponsorType,
		&i.SponsorID,
		&i.SponsorWorkspaceID,
		&i.NetworkID,
		&i.BlockNumber,
		&i.BlockTimestamp,
		&i.EthUsdPrice,
		&i.TokenUsdPrice,
		&i.GasFeeUsdCents,
		&i.CreatedAt,
	)
	return i, err
}

const getGasFeePaymentsBySponsor = `-- name: GetGasFeePaymentsBySponsor :many
SELECT id, payment_id, gas_fee_wei, gas_price_gwei, gas_units_used, max_gas_units, base_fee_gwei, priority_fee_gwei, payment_token_id, payment_token_amount, payment_method, sponsor_type, sponsor_id, sponsor_workspace_id, network_id, block_number, block_timestamp, eth_usd_price, token_usd_price, gas_fee_usd_cents, created_at FROM gas_fee_payments
WHERE sponsor_type = $1 AND sponsor_id = $2
ORDER BY created_at DESC
LIMIT $3 OFFSET $4
`

type GetGasFeePaymentsBySponsorParams struct {
	SponsorType string      `json:"sponsor_type"`
	SponsorID   pgtype.UUID `json:"sponsor_id"`
	Limit       int32       `json:"limit"`
	Offset      int32       `json:"offset"`
}

func (q *Queries) GetGasFeePaymentsBySponsor(ctx context.Context, arg GetGasFeePaymentsBySponsorParams) ([]GasFeePayment, error) {
	rows, err := q.db.Query(ctx, getGasFeePaymentsBySponsor,
		arg.SponsorType,
		arg.SponsorID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GasFeePayment{}
	for rows.Next() {
		var i GasFeePayment
		if err := rows.Scan(
			&i.ID,
			&i.PaymentID,
			&i.GasFeeWei,
			&i.GasPriceGwei,
			&i.GasUnitsUsed,
			&i.MaxGasUnits,
			&i.BaseFeeGwei,
			&i.PriorityFeeGwei,
			&i.PaymentTokenID,
			&i.PaymentTokenAmount,
			&i.PaymentMethod,
			&i.SponsorType,
			&i.SponsorID,
			&i.SponsorWorkspaceID,
			&i.NetworkID,
			&i.BlockNumber,
			&i.BlockTimestamp,
			&i.EthUsdPrice,
			&i.TokenUsdPrice,
			&i.GasFeeUsdCents,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGasFeePaymentsByWorkspace = `-- name: GetGasFeePaymentsByWorkspace :many
SELECT gfp.id, gfp.payment_id, gfp.gas_fee_wei, gfp.gas_price_gwei, gfp.gas_units_used, gfp.max_gas_units, gfp.base_fee_gwei, gfp.priority_fee_gwei, gfp.payment_token_id, gfp.payment_token_amount, gfp.payment_method, gfp.sponsor_type, gfp.sponsor_id, gfp.sponsor_workspace_id, gfp.network_id, gfp.block_number, gfp.block_timestamp, gfp.eth_usd_price, gfp.token_usd_price, gfp.gas_fee_usd_cents, gfp.created_at, p.customer_id, p.amount_in_cents as payment_amount
FROM gas_fee_payments gfp
JOIN payments p ON gfp.payment_id = p.id
WHERE p.workspace_id = $1
ORDER BY gfp.created_at DESC
LIMIT $2 OFFSET $3
`

type GetGasFeePaymentsByWorkspaceParams struct {
	WorkspaceID uuid.UUID `json:"workspace_id"`
	Limit       int32     `json:"limit"`
	Offset      int32     `json:"offset"`
}

type GetGasFeePaymentsByWorkspaceRow struct {
	ID                 uuid.UUID          `json:"id"`
	PaymentID          uuid.UUID          `json:"payment_id"`
	GasFeeWei          string             `json:"gas_fee_wei"`
	GasPriceGwei       string             `json:"gas_price_gwei"`
	GasUnitsUsed       int64              `json:"gas_units_used"`
	MaxGasUnits        int64              `json:"max_gas_units"`
	BaseFeeGwei        pgtype.Text        `json:"base_fee_gwei"`
	PriorityFeeGwei    pgtype.Text        `json:"priority_fee_gwei"`
	PaymentTokenID     pgtype.UUID        `json:"payment_token_id"`
	PaymentTokenAmount pgtype.Text        `json:"payment_token_amount"`
	PaymentMethod      string             `json:"payment_method"`
	SponsorType        string             `json:"sponsor_type"`
	SponsorID          pgtype.UUID        `json:"sponsor_id"`
	SponsorWorkspaceID pgtype.UUID        `json:"sponsor_workspace_id"`
	NetworkID          uuid.UUID          `json:"network_id"`
	BlockNumber        pgtype.Int8        `json:"block_number"`
	BlockTimestamp     pgtype.Timestamptz `json:"block_timestamp"`
	EthUsdPrice        pgtype.Numeric     `json:"eth_usd_price"`
	TokenUsdPrice      pgtype.Numeric     `json:"token_usd_price"`
	GasFeeUsdCents     pgtype.Int8        `json:"gas_fee_usd_cents"`
	CreatedAt          pgtype.Timestamptz `json:"created_at"`
	CustomerID         uuid.UUID          `json:"customer_id"`
	PaymentAmount      int64              `json:"payment_amount"`
}

func (q *Queries) GetGasFeePaymentsByWorkspace(ctx context.Context, arg GetGasFeePaymentsByWorkspaceParams) ([]GetGasFeePaymentsByWorkspaceRow, error) {
	rows, err := q.db.Query(ctx, getGasFeePaymentsByWorkspace, arg.WorkspaceID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetGasFeePaymentsByWorkspaceRow{}
	for rows.Next() {
		var i GetGasFeePaymentsByWorkspaceRow
		if err := rows.Scan(
			&i.ID,
			&i.PaymentID,
			&i.GasFeeWei,
			&i.GasPriceGwei,
			&i.GasUnitsUsed,
			&i.MaxGasUnits,
			&i.BaseFeeGwei,
			&i.PriorityFeeGwei,
			&i.PaymentTokenID,
			&i.PaymentTokenAmount,
			&i.PaymentMethod,
			&i.SponsorType,
			&i.SponsorID,
			&i.SponsorWorkspaceID,
			&i.NetworkID,
			&i.BlockNumber,
			&i.BlockTimestamp,
			&i.EthUsdPrice,
			&i.TokenUsdPrice,
			&i.GasFeeUsdCents,
			&i.CreatedAt,
			&i.CustomerID,
			&i.PaymentAmount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGasFeesByNetwork = `-- name: GetGasFeesByNetwork :many
SELECT 
    n.name as network_name,
    COUNT(*) as transaction_count,
    SUM(gfp.gas_fee_usd_cents) as total_gas_fees_cents,
    AVG(gfp.gas_fee_usd_cents) as avg_gas_fee_cents,
    AVG(gfp.gas_units_used) as avg_gas_units
FROM gas_fee_payments gfp
JOIN payments p ON gfp.payment_id = p.id
JOIN networks n ON gfp.network_id = n.id
WHERE p.workspace_id = $1
    AND gfp.created_at >= $2
    AND gfp.created_at < $3
GROUP BY n.id, n.name
ORDER BY total_gas_fees_cents DESC
`

type GetGasFeesByNetworkParams struct {
	WorkspaceID uuid.UUID          `json:"workspace_id"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	CreatedAt_2 pgtype.Timestamptz `json:"created_at_2"`
}

type GetGasFeesByNetworkRow struct {
	NetworkName       string  `json:"network_name"`
	TransactionCount  int64   `json:"transaction_count"`
	TotalGasFeesCents int64   `json:"total_gas_fees_cents"`
	AvgGasFeeCents    float64 `json:"avg_gas_fee_cents"`
	AvgGasUnits       float64 `json:"avg_gas_units"`
}

func (q *Queries) GetGasFeesByNetwork(ctx context.Context, arg GetGasFeesByNetworkParams) ([]GetGasFeesByNetworkRow, error) {
	rows, err := q.db.Query(ctx, getGasFeesByNetwork, arg.WorkspaceID, arg.CreatedAt, arg.CreatedAt_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetGasFeesByNetworkRow{}
	for rows.Next() {
		var i GetGasFeesByNetworkRow
		if err := rows.Scan(
			&i.NetworkName,
			&i.TransactionCount,
			&i.TotalGasFeesCents,
			&i.AvgGasFeeCents,
			&i.AvgGasUnits,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGasSponsorshipStats = `-- name: GetGasSponsorshipStats :one
SELECT 
    sponsor_workspace_id,
    COUNT(*) as sponsored_count,
    SUM(gas_fee_usd_cents) as total_sponsored_cents,
    AVG(gas_fee_usd_cents) as avg_sponsored_cents
FROM gas_fee_payments
WHERE sponsor_type = 'merchant'
    AND sponsor_workspace_id = $1
    AND created_at >= $2
    AND created_at < $3
GROUP BY sponsor_workspace_id
`

type GetGasSponsorshipStatsParams struct {
	SponsorWorkspaceID pgtype.UUID        `json:"sponsor_workspace_id"`
	CreatedAt          pgtype.Timestamptz `json:"created_at"`
	CreatedAt_2        pgtype.Timestamptz `json:"created_at_2"`
}

type GetGasSponsorshipStatsRow struct {
	SponsorWorkspaceID  pgtype.UUID `json:"sponsor_workspace_id"`
	SponsoredCount      int64       `json:"sponsored_count"`
	TotalSponsoredCents int64       `json:"total_sponsored_cents"`
	AvgSponsoredCents   float64     `json:"avg_sponsored_cents"`
}

func (q *Queries) GetGasSponsorshipStats(ctx context.Context, arg GetGasSponsorshipStatsParams) (GetGasSponsorshipStatsRow, error) {
	row := q.db.QueryRow(ctx, getGasSponsorshipStats, arg.SponsorWorkspaceID, arg.CreatedAt, arg.CreatedAt_2)
	var i GetGasSponsorshipStatsRow
	err := row.Scan(
		&i.SponsorWorkspaceID,
		&i.SponsoredCount,
		&i.TotalSponsoredCents,
		&i.AvgSponsoredCents,
	)
	return i, err
}
