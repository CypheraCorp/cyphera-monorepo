// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: gas_sponsorship_configs.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const checkGasSponsorshipEligibility = `-- name: CheckGasSponsorshipEligibility :one
SELECT 
    sponsorship_enabled,
    sponsor_customer_gas,
    sponsor_threshold_usd_cents,
    monthly_budget_usd_cents,
    current_month_spent_cents,
    CASE 
        WHEN NOT sponsorship_enabled THEN false
        WHEN NOT sponsor_customer_gas THEN false
        WHEN monthly_budget_usd_cents IS NOT NULL AND current_month_spent_cents >= monthly_budget_usd_cents THEN false
        ELSE true
    END as is_eligible,
    CASE 
        WHEN monthly_budget_usd_cents IS NOT NULL 
        THEN monthly_budget_usd_cents - current_month_spent_cents
        ELSE NULL
    END as remaining_budget_cents
FROM gas_sponsorship_configs
WHERE workspace_id = $1
`

type CheckGasSponsorshipEligibilityRow struct {
	SponsorshipEnabled       pgtype.Bool `json:"sponsorship_enabled"`
	SponsorCustomerGas       pgtype.Bool `json:"sponsor_customer_gas"`
	SponsorThresholdUsdCents pgtype.Int8 `json:"sponsor_threshold_usd_cents"`
	MonthlyBudgetUsdCents    pgtype.Int8 `json:"monthly_budget_usd_cents"`
	CurrentMonthSpentCents   pgtype.Int8 `json:"current_month_spent_cents"`
	IsEligible               bool        `json:"is_eligible"`
	RemainingBudgetCents     interface{} `json:"remaining_budget_cents"`
}

func (q *Queries) CheckGasSponsorshipEligibility(ctx context.Context, workspaceID uuid.UUID) (CheckGasSponsorshipEligibilityRow, error) {
	row := q.db.QueryRow(ctx, checkGasSponsorshipEligibility, workspaceID)
	var i CheckGasSponsorshipEligibilityRow
	err := row.Scan(
		&i.SponsorshipEnabled,
		&i.SponsorCustomerGas,
		&i.SponsorThresholdUsdCents,
		&i.MonthlyBudgetUsdCents,
		&i.CurrentMonthSpentCents,
		&i.IsEligible,
		&i.RemainingBudgetCents,
	)
	return i, err
}

const createGasSponsorshipConfig = `-- name: CreateGasSponsorshipConfig :one
INSERT INTO gas_sponsorship_configs (
    workspace_id,
    sponsorship_enabled,
    sponsor_customer_gas,
    sponsor_threshold_usd_cents,
    monthly_budget_usd_cents,
    sponsor_for_products,
    sponsor_for_customers,
    sponsor_for_tiers
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
)
ON CONFLICT (workspace_id)
DO UPDATE SET
    sponsorship_enabled = EXCLUDED.sponsorship_enabled,
    sponsor_customer_gas = EXCLUDED.sponsor_customer_gas,
    sponsor_threshold_usd_cents = EXCLUDED.sponsor_threshold_usd_cents,
    monthly_budget_usd_cents = EXCLUDED.monthly_budget_usd_cents,
    sponsor_for_products = EXCLUDED.sponsor_for_products,
    sponsor_for_customers = EXCLUDED.sponsor_for_customers,
    sponsor_for_tiers = EXCLUDED.sponsor_for_tiers,
    updated_at = CURRENT_TIMESTAMP
RETURNING id, workspace_id, sponsorship_enabled, sponsor_customer_gas, sponsor_threshold_usd_cents, monthly_budget_usd_cents, sponsor_for_products, sponsor_for_customers, sponsor_for_tiers, current_month_spent_cents, last_reset_date, created_at, updated_at
`

type CreateGasSponsorshipConfigParams struct {
	WorkspaceID              uuid.UUID   `json:"workspace_id"`
	SponsorshipEnabled       pgtype.Bool `json:"sponsorship_enabled"`
	SponsorCustomerGas       pgtype.Bool `json:"sponsor_customer_gas"`
	SponsorThresholdUsdCents pgtype.Int8 `json:"sponsor_threshold_usd_cents"`
	MonthlyBudgetUsdCents    pgtype.Int8 `json:"monthly_budget_usd_cents"`
	SponsorForProducts       []byte      `json:"sponsor_for_products"`
	SponsorForCustomers      []byte      `json:"sponsor_for_customers"`
	SponsorForTiers          []byte      `json:"sponsor_for_tiers"`
}

func (q *Queries) CreateGasSponsorshipConfig(ctx context.Context, arg CreateGasSponsorshipConfigParams) (GasSponsorshipConfig, error) {
	row := q.db.QueryRow(ctx, createGasSponsorshipConfig,
		arg.WorkspaceID,
		arg.SponsorshipEnabled,
		arg.SponsorCustomerGas,
		arg.SponsorThresholdUsdCents,
		arg.MonthlyBudgetUsdCents,
		arg.SponsorForProducts,
		arg.SponsorForCustomers,
		arg.SponsorForTiers,
	)
	var i GasSponsorshipConfig
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.SponsorshipEnabled,
		&i.SponsorCustomerGas,
		&i.SponsorThresholdUsdCents,
		&i.MonthlyBudgetUsdCents,
		&i.SponsorForProducts,
		&i.SponsorForCustomers,
		&i.SponsorForTiers,
		&i.CurrentMonthSpentCents,
		&i.LastResetDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getActiveGasSponsorships = `-- name: GetActiveGasSponsorships :many
SELECT id, workspace_id, sponsorship_enabled, sponsor_customer_gas, sponsor_threshold_usd_cents, monthly_budget_usd_cents, sponsor_for_products, sponsor_for_customers, sponsor_for_tiers, current_month_spent_cents, last_reset_date, created_at, updated_at FROM gas_sponsorship_configs
WHERE sponsorship_enabled = true
    AND sponsor_customer_gas = true
    AND (monthly_budget_usd_cents IS NULL OR current_month_spent_cents < monthly_budget_usd_cents)
`

func (q *Queries) GetActiveGasSponsorships(ctx context.Context) ([]GasSponsorshipConfig, error) {
	rows, err := q.db.Query(ctx, getActiveGasSponsorships)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GasSponsorshipConfig{}
	for rows.Next() {
		var i GasSponsorshipConfig
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.SponsorshipEnabled,
			&i.SponsorCustomerGas,
			&i.SponsorThresholdUsdCents,
			&i.MonthlyBudgetUsdCents,
			&i.SponsorForProducts,
			&i.SponsorForCustomers,
			&i.SponsorForTiers,
			&i.CurrentMonthSpentCents,
			&i.LastResetDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGasSponsorshipConfig = `-- name: GetGasSponsorshipConfig :one
SELECT id, workspace_id, sponsorship_enabled, sponsor_customer_gas, sponsor_threshold_usd_cents, monthly_budget_usd_cents, sponsor_for_products, sponsor_for_customers, sponsor_for_tiers, current_month_spent_cents, last_reset_date, created_at, updated_at FROM gas_sponsorship_configs
WHERE workspace_id = $1
`

func (q *Queries) GetGasSponsorshipConfig(ctx context.Context, workspaceID uuid.UUID) (GasSponsorshipConfig, error) {
	row := q.db.QueryRow(ctx, getGasSponsorshipConfig, workspaceID)
	var i GasSponsorshipConfig
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.SponsorshipEnabled,
		&i.SponsorCustomerGas,
		&i.SponsorThresholdUsdCents,
		&i.MonthlyBudgetUsdCents,
		&i.SponsorForProducts,
		&i.SponsorForCustomers,
		&i.SponsorForTiers,
		&i.CurrentMonthSpentCents,
		&i.LastResetDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getGasSponsorshipsByCustomer = `-- name: GetGasSponsorshipsByCustomer :one
SELECT 
    workspace_id,
    sponsorship_enabled,
    sponsor_for_customers
FROM gas_sponsorship_configs
WHERE workspace_id = $1
    AND sponsorship_enabled = true
    AND sponsor_for_customers ? $2
`

type GetGasSponsorshipsByCustomerParams struct {
	WorkspaceID         uuid.UUID `json:"workspace_id"`
	SponsorForCustomers []byte    `json:"sponsor_for_customers"`
}

type GetGasSponsorshipsByCustomerRow struct {
	WorkspaceID         uuid.UUID   `json:"workspace_id"`
	SponsorshipEnabled  pgtype.Bool `json:"sponsorship_enabled"`
	SponsorForCustomers []byte      `json:"sponsor_for_customers"`
}

func (q *Queries) GetGasSponsorshipsByCustomer(ctx context.Context, arg GetGasSponsorshipsByCustomerParams) (GetGasSponsorshipsByCustomerRow, error) {
	row := q.db.QueryRow(ctx, getGasSponsorshipsByCustomer, arg.WorkspaceID, arg.SponsorForCustomers)
	var i GetGasSponsorshipsByCustomerRow
	err := row.Scan(&i.WorkspaceID, &i.SponsorshipEnabled, &i.SponsorForCustomers)
	return i, err
}

const getGasSponsorshipsByProduct = `-- name: GetGasSponsorshipsByProduct :one
SELECT 
    workspace_id,
    sponsorship_enabled,
    sponsor_for_products
FROM gas_sponsorship_configs
WHERE workspace_id = $1
    AND sponsorship_enabled = true
    AND sponsor_for_products ? $2
`

type GetGasSponsorshipsByProductParams struct {
	WorkspaceID        uuid.UUID `json:"workspace_id"`
	SponsorForProducts []byte    `json:"sponsor_for_products"`
}

type GetGasSponsorshipsByProductRow struct {
	WorkspaceID        uuid.UUID   `json:"workspace_id"`
	SponsorshipEnabled pgtype.Bool `json:"sponsorship_enabled"`
	SponsorForProducts []byte      `json:"sponsor_for_products"`
}

func (q *Queries) GetGasSponsorshipsByProduct(ctx context.Context, arg GetGasSponsorshipsByProductParams) (GetGasSponsorshipsByProductRow, error) {
	row := q.db.QueryRow(ctx, getGasSponsorshipsByProduct, arg.WorkspaceID, arg.SponsorForProducts)
	var i GetGasSponsorshipsByProductRow
	err := row.Scan(&i.WorkspaceID, &i.SponsorshipEnabled, &i.SponsorForProducts)
	return i, err
}

const getSponsorshipConfigsNeedingReset = `-- name: GetSponsorshipConfigsNeedingReset :many
SELECT id, workspace_id, sponsorship_enabled, sponsor_customer_gas, sponsor_threshold_usd_cents, monthly_budget_usd_cents, sponsor_for_products, sponsor_for_customers, sponsor_for_tiers, current_month_spent_cents, last_reset_date, created_at, updated_at FROM gas_sponsorship_configs
WHERE sponsorship_enabled = true
    AND (last_reset_date IS NULL 
        OR last_reset_date < date_trunc('month', $1::date))
ORDER BY workspace_id
`

func (q *Queries) GetSponsorshipConfigsNeedingReset(ctx context.Context, dollar_1 pgtype.Date) ([]GasSponsorshipConfig, error) {
	rows, err := q.db.Query(ctx, getSponsorshipConfigsNeedingReset, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GasSponsorshipConfig{}
	for rows.Next() {
		var i GasSponsorshipConfig
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.SponsorshipEnabled,
			&i.SponsorCustomerGas,
			&i.SponsorThresholdUsdCents,
			&i.MonthlyBudgetUsdCents,
			&i.SponsorForProducts,
			&i.SponsorForCustomers,
			&i.SponsorForTiers,
			&i.CurrentMonthSpentCents,
			&i.LastResetDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkspacesNeedingReset = `-- name: GetWorkspacesNeedingReset :many
SELECT workspace_id 
FROM gas_sponsorship_configs
WHERE (last_reset_date IS NULL OR last_reset_date < DATE_TRUNC('month', CURRENT_DATE))
    AND current_month_spent_cents > 0
`

func (q *Queries) GetWorkspacesNeedingReset(ctx context.Context) ([]uuid.UUID, error) {
	rows, err := q.db.Query(ctx, getWorkspacesNeedingReset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []uuid.UUID{}
	for rows.Next() {
		var workspace_id uuid.UUID
		if err := rows.Scan(&workspace_id); err != nil {
			return nil, err
		}
		items = append(items, workspace_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resetGasSponsorshipMonthlySpending = `-- name: ResetGasSponsorshipMonthlySpending :exec
UPDATE gas_sponsorship_configs
SET 
    current_month_spent_cents = 0,
    last_reset_date = $2,
    updated_at = COALESCE($3, CURRENT_TIMESTAMP)
WHERE workspace_id = $1
`

type ResetGasSponsorshipMonthlySpendingParams struct {
	WorkspaceID   uuid.UUID          `json:"workspace_id"`
	LastResetDate pgtype.Date        `json:"last_reset_date"`
	UpdatedAt     pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) ResetGasSponsorshipMonthlySpending(ctx context.Context, arg ResetGasSponsorshipMonthlySpendingParams) error {
	_, err := q.db.Exec(ctx, resetGasSponsorshipMonthlySpending, arg.WorkspaceID, arg.LastResetDate, arg.UpdatedAt)
	return err
}

const updateGasSponsorshipConfig = `-- name: UpdateGasSponsorshipConfig :one
UPDATE gas_sponsorship_configs
SET 
    sponsorship_enabled = COALESCE($2, sponsorship_enabled),
    sponsor_customer_gas = COALESCE($3, sponsor_customer_gas),
    sponsor_threshold_usd_cents = COALESCE($4, sponsor_threshold_usd_cents),
    monthly_budget_usd_cents = COALESCE($5, monthly_budget_usd_cents),
    sponsor_for_products = COALESCE($6, sponsor_for_products),
    sponsor_for_customers = COALESCE($7, sponsor_for_customers),
    sponsor_for_tiers = COALESCE($8, sponsor_for_tiers),
    updated_at = CURRENT_TIMESTAMP
WHERE workspace_id = $1
RETURNING id, workspace_id, sponsorship_enabled, sponsor_customer_gas, sponsor_threshold_usd_cents, monthly_budget_usd_cents, sponsor_for_products, sponsor_for_customers, sponsor_for_tiers, current_month_spent_cents, last_reset_date, created_at, updated_at
`

type UpdateGasSponsorshipConfigParams struct {
	WorkspaceID              uuid.UUID   `json:"workspace_id"`
	SponsorshipEnabled       pgtype.Bool `json:"sponsorship_enabled"`
	SponsorCustomerGas       pgtype.Bool `json:"sponsor_customer_gas"`
	SponsorThresholdUsdCents pgtype.Int8 `json:"sponsor_threshold_usd_cents"`
	MonthlyBudgetUsdCents    pgtype.Int8 `json:"monthly_budget_usd_cents"`
	SponsorForProducts       []byte      `json:"sponsor_for_products"`
	SponsorForCustomers      []byte      `json:"sponsor_for_customers"`
	SponsorForTiers          []byte      `json:"sponsor_for_tiers"`
}

func (q *Queries) UpdateGasSponsorshipConfig(ctx context.Context, arg UpdateGasSponsorshipConfigParams) (GasSponsorshipConfig, error) {
	row := q.db.QueryRow(ctx, updateGasSponsorshipConfig,
		arg.WorkspaceID,
		arg.SponsorshipEnabled,
		arg.SponsorCustomerGas,
		arg.SponsorThresholdUsdCents,
		arg.MonthlyBudgetUsdCents,
		arg.SponsorForProducts,
		arg.SponsorForCustomers,
		arg.SponsorForTiers,
	)
	var i GasSponsorshipConfig
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.SponsorshipEnabled,
		&i.SponsorCustomerGas,
		&i.SponsorThresholdUsdCents,
		&i.MonthlyBudgetUsdCents,
		&i.SponsorForProducts,
		&i.SponsorForCustomers,
		&i.SponsorForTiers,
		&i.CurrentMonthSpentCents,
		&i.LastResetDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateGasSponsorshipSpending = `-- name: UpdateGasSponsorshipSpending :exec
UPDATE gas_sponsorship_configs
SET 
    current_month_spent_cents = current_month_spent_cents + $2,
    updated_at = COALESCE($3, CURRENT_TIMESTAMP)
WHERE workspace_id = $1
`

type UpdateGasSponsorshipSpendingParams struct {
	WorkspaceID            uuid.UUID          `json:"workspace_id"`
	CurrentMonthSpentCents pgtype.Int8        `json:"current_month_spent_cents"`
	UpdatedAt              pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateGasSponsorshipSpending(ctx context.Context, arg UpdateGasSponsorshipSpendingParams) error {
	_, err := q.db.Exec(ctx, updateGasSponsorshipSpending, arg.WorkspaceID, arg.CurrentMonthSpentCents, arg.UpdatedAt)
	return err
}
