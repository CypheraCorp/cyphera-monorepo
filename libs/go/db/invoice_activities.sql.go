// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: invoice_activities.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createInvoiceActivity = `-- name: CreateInvoiceActivity :one
INSERT INTO invoice_activities (
    invoice_id,
    workspace_id,
    activity_type,
    from_status,
    to_status,
    performed_by,
    description,
    metadata
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, invoice_id, workspace_id, activity_type, from_status, to_status, performed_by, description, metadata, created_at
`

type CreateInvoiceActivityParams struct {
	InvoiceID    uuid.UUID   `json:"invoice_id"`
	WorkspaceID  uuid.UUID   `json:"workspace_id"`
	ActivityType string      `json:"activity_type"`
	FromStatus   pgtype.Text `json:"from_status"`
	ToStatus     pgtype.Text `json:"to_status"`
	PerformedBy  pgtype.UUID `json:"performed_by"`
	Description  pgtype.Text `json:"description"`
	Metadata     []byte      `json:"metadata"`
}

func (q *Queries) CreateInvoiceActivity(ctx context.Context, arg CreateInvoiceActivityParams) (InvoiceActivity, error) {
	row := q.db.QueryRow(ctx, createInvoiceActivity,
		arg.InvoiceID,
		arg.WorkspaceID,
		arg.ActivityType,
		arg.FromStatus,
		arg.ToStatus,
		arg.PerformedBy,
		arg.Description,
		arg.Metadata,
	)
	var i InvoiceActivity
	err := row.Scan(
		&i.ID,
		&i.InvoiceID,
		&i.WorkspaceID,
		&i.ActivityType,
		&i.FromStatus,
		&i.ToStatus,
		&i.PerformedBy,
		&i.Description,
		&i.Metadata,
		&i.CreatedAt,
	)
	return i, err
}

const getInvoiceActivities = `-- name: GetInvoiceActivities :many
SELECT id, invoice_id, workspace_id, activity_type, from_status, to_status, performed_by, description, metadata, created_at FROM invoice_activities
WHERE invoice_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetInvoiceActivitiesParams struct {
	InvoiceID uuid.UUID `json:"invoice_id"`
	Limit     int32     `json:"limit"`
	Offset    int32     `json:"offset"`
}

func (q *Queries) GetInvoiceActivities(ctx context.Context, arg GetInvoiceActivitiesParams) ([]InvoiceActivity, error) {
	rows, err := q.db.Query(ctx, getInvoiceActivities, arg.InvoiceID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []InvoiceActivity{}
	for rows.Next() {
		var i InvoiceActivity
		if err := rows.Scan(
			&i.ID,
			&i.InvoiceID,
			&i.WorkspaceID,
			&i.ActivityType,
			&i.FromStatus,
			&i.ToStatus,
			&i.PerformedBy,
			&i.Description,
			&i.Metadata,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getInvoiceActivitiesByType = `-- name: GetInvoiceActivitiesByType :many
SELECT id, invoice_id, workspace_id, activity_type, from_status, to_status, performed_by, description, metadata, created_at FROM invoice_activities
WHERE invoice_id = $1 AND activity_type = $2
ORDER BY created_at DESC
`

type GetInvoiceActivitiesByTypeParams struct {
	InvoiceID    uuid.UUID `json:"invoice_id"`
	ActivityType string    `json:"activity_type"`
}

func (q *Queries) GetInvoiceActivitiesByType(ctx context.Context, arg GetInvoiceActivitiesByTypeParams) ([]InvoiceActivity, error) {
	rows, err := q.db.Query(ctx, getInvoiceActivitiesByType, arg.InvoiceID, arg.ActivityType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []InvoiceActivity{}
	for rows.Next() {
		var i InvoiceActivity
		if err := rows.Scan(
			&i.ID,
			&i.InvoiceID,
			&i.WorkspaceID,
			&i.ActivityType,
			&i.FromStatus,
			&i.ToStatus,
			&i.PerformedBy,
			&i.Description,
			&i.Metadata,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getInvoiceActivityCount = `-- name: GetInvoiceActivityCount :one
SELECT COUNT(*) FROM invoice_activities
WHERE invoice_id = $1
`

func (q *Queries) GetInvoiceActivityCount(ctx context.Context, invoiceID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getInvoiceActivityCount, invoiceID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getInvoiceStatusHistory = `-- name: GetInvoiceStatusHistory :many
SELECT 
    activity_type,
    from_status,
    to_status,
    performed_by,
    description,
    created_at
FROM invoice_activities
WHERE invoice_id = $1 
    AND activity_type IN ('created', 'status_changed')
ORDER BY created_at ASC
`

type GetInvoiceStatusHistoryRow struct {
	ActivityType string             `json:"activity_type"`
	FromStatus   pgtype.Text        `json:"from_status"`
	ToStatus     pgtype.Text        `json:"to_status"`
	PerformedBy  pgtype.UUID        `json:"performed_by"`
	Description  pgtype.Text        `json:"description"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) GetInvoiceStatusHistory(ctx context.Context, invoiceID uuid.UUID) ([]GetInvoiceStatusHistoryRow, error) {
	rows, err := q.db.Query(ctx, getInvoiceStatusHistory, invoiceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetInvoiceStatusHistoryRow{}
	for rows.Next() {
		var i GetInvoiceStatusHistoryRow
		if err := rows.Scan(
			&i.ActivityType,
			&i.FromStatus,
			&i.ToStatus,
			&i.PerformedBy,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecentInvoiceActivities = `-- name: GetRecentInvoiceActivities :many
SELECT id, invoice_id, workspace_id, activity_type, from_status, to_status, performed_by, description, metadata, created_at FROM invoice_activities
WHERE workspace_id = $1
ORDER BY created_at DESC
LIMIT $2
`

type GetRecentInvoiceActivitiesParams struct {
	WorkspaceID uuid.UUID `json:"workspace_id"`
	Limit       int32     `json:"limit"`
}

func (q *Queries) GetRecentInvoiceActivities(ctx context.Context, arg GetRecentInvoiceActivitiesParams) ([]InvoiceActivity, error) {
	rows, err := q.db.Query(ctx, getRecentInvoiceActivities, arg.WorkspaceID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []InvoiceActivity{}
	for rows.Next() {
		var i InvoiceActivity
		if err := rows.Scan(
			&i.ID,
			&i.InvoiceID,
			&i.WorkspaceID,
			&i.ActivityType,
			&i.FromStatus,
			&i.ToStatus,
			&i.PerformedBy,
			&i.Description,
			&i.Metadata,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const recordInvoiceCreation = `-- name: RecordInvoiceCreation :one
INSERT INTO invoice_activities (
    invoice_id,
    workspace_id,
    activity_type,
    to_status,
    performed_by,
    description,
    metadata
) VALUES (
    $1, $2, 'created', $3, $4, $5, $6
) RETURNING id, invoice_id, workspace_id, activity_type, from_status, to_status, performed_by, description, metadata, created_at
`

type RecordInvoiceCreationParams struct {
	InvoiceID   uuid.UUID   `json:"invoice_id"`
	WorkspaceID uuid.UUID   `json:"workspace_id"`
	ToStatus    pgtype.Text `json:"to_status"`
	PerformedBy pgtype.UUID `json:"performed_by"`
	Description pgtype.Text `json:"description"`
	Metadata    []byte      `json:"metadata"`
}

func (q *Queries) RecordInvoiceCreation(ctx context.Context, arg RecordInvoiceCreationParams) (InvoiceActivity, error) {
	row := q.db.QueryRow(ctx, recordInvoiceCreation,
		arg.InvoiceID,
		arg.WorkspaceID,
		arg.ToStatus,
		arg.PerformedBy,
		arg.Description,
		arg.Metadata,
	)
	var i InvoiceActivity
	err := row.Scan(
		&i.ID,
		&i.InvoiceID,
		&i.WorkspaceID,
		&i.ActivityType,
		&i.FromStatus,
		&i.ToStatus,
		&i.PerformedBy,
		&i.Description,
		&i.Metadata,
		&i.CreatedAt,
	)
	return i, err
}

const recordInvoiceReminder = `-- name: RecordInvoiceReminder :one
INSERT INTO invoice_activities (
    invoice_id,
    workspace_id,
    activity_type,
    description,
    metadata
) VALUES (
    $1, $2, 'reminder_sent', $3, $4
) RETURNING id, invoice_id, workspace_id, activity_type, from_status, to_status, performed_by, description, metadata, created_at
`

type RecordInvoiceReminderParams struct {
	InvoiceID   uuid.UUID   `json:"invoice_id"`
	WorkspaceID uuid.UUID   `json:"workspace_id"`
	Description pgtype.Text `json:"description"`
	Metadata    []byte      `json:"metadata"`
}

func (q *Queries) RecordInvoiceReminder(ctx context.Context, arg RecordInvoiceReminderParams) (InvoiceActivity, error) {
	row := q.db.QueryRow(ctx, recordInvoiceReminder,
		arg.InvoiceID,
		arg.WorkspaceID,
		arg.Description,
		arg.Metadata,
	)
	var i InvoiceActivity
	err := row.Scan(
		&i.ID,
		&i.InvoiceID,
		&i.WorkspaceID,
		&i.ActivityType,
		&i.FromStatus,
		&i.ToStatus,
		&i.PerformedBy,
		&i.Description,
		&i.Metadata,
		&i.CreatedAt,
	)
	return i, err
}

const recordInvoiceStatusChange = `-- name: RecordInvoiceStatusChange :one
INSERT INTO invoice_activities (
    invoice_id,
    workspace_id,
    activity_type,
    from_status,
    to_status,
    performed_by,
    description
) VALUES (
    $1, $2, 'status_changed', $3, $4, $5, $6
) RETURNING id, invoice_id, workspace_id, activity_type, from_status, to_status, performed_by, description, metadata, created_at
`

type RecordInvoiceStatusChangeParams struct {
	InvoiceID   uuid.UUID   `json:"invoice_id"`
	WorkspaceID uuid.UUID   `json:"workspace_id"`
	FromStatus  pgtype.Text `json:"from_status"`
	ToStatus    pgtype.Text `json:"to_status"`
	PerformedBy pgtype.UUID `json:"performed_by"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) RecordInvoiceStatusChange(ctx context.Context, arg RecordInvoiceStatusChangeParams) (InvoiceActivity, error) {
	row := q.db.QueryRow(ctx, recordInvoiceStatusChange,
		arg.InvoiceID,
		arg.WorkspaceID,
		arg.FromStatus,
		arg.ToStatus,
		arg.PerformedBy,
		arg.Description,
	)
	var i InvoiceActivity
	err := row.Scan(
		&i.ID,
		&i.InvoiceID,
		&i.WorkspaceID,
		&i.ActivityType,
		&i.FromStatus,
		&i.ToStatus,
		&i.PerformedBy,
		&i.Description,
		&i.Metadata,
		&i.CreatedAt,
	)
	return i, err
}
