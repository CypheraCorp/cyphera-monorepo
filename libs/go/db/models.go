// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type AccountType string

const (
	AccountTypeAdmin    AccountType = "admin"
	AccountTypeMerchant AccountType = "merchant"
)

func (e *AccountType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AccountType(s)
	case string:
		*e = AccountType(s)
	default:
		return fmt.Errorf("unsupported scan type for AccountType: %T", src)
	}
	return nil
}

type NullAccountType struct {
	AccountType AccountType `json:"account_type"`
	Valid       bool        `json:"valid"` // Valid is true if AccountType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAccountType) Scan(value interface{}) error {
	if value == nil {
		ns.AccountType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AccountType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAccountType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AccountType), nil
}

type ApiKeyLevel string

const (
	ApiKeyLevelRead  ApiKeyLevel = "read"
	ApiKeyLevelWrite ApiKeyLevel = "write"
	ApiKeyLevelAdmin ApiKeyLevel = "admin"
)

func (e *ApiKeyLevel) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ApiKeyLevel(s)
	case string:
		*e = ApiKeyLevel(s)
	default:
		return fmt.Errorf("unsupported scan type for ApiKeyLevel: %T", src)
	}
	return nil
}

type NullApiKeyLevel struct {
	ApiKeyLevel ApiKeyLevel `json:"api_key_level"`
	Valid       bool        `json:"valid"` // Valid is true if ApiKeyLevel is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullApiKeyLevel) Scan(value interface{}) error {
	if value == nil {
		ns.ApiKeyLevel, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ApiKeyLevel.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullApiKeyLevel) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ApiKeyLevel), nil
}

type CircleNetworkType string

const (
	CircleNetworkTypeARB         CircleNetworkType = "ARB"
	CircleNetworkTypeARBSEPOLIA  CircleNetworkType = "ARB-SEPOLIA"
	CircleNetworkTypeETH         CircleNetworkType = "ETH"
	CircleNetworkTypeETHSEPOLIA  CircleNetworkType = "ETH-SEPOLIA"
	CircleNetworkTypeMATIC       CircleNetworkType = "MATIC"
	CircleNetworkTypeMATICAMOY   CircleNetworkType = "MATIC-AMOY"
	CircleNetworkTypeOP          CircleNetworkType = "OP"
	CircleNetworkTypeOPSEPOLIA   CircleNetworkType = "OP-SEPOLIA"
	CircleNetworkTypeBASE        CircleNetworkType = "BASE"
	CircleNetworkTypeBASESEPOLIA CircleNetworkType = "BASE-SEPOLIA"
	CircleNetworkTypeUNI         CircleNetworkType = "UNI"
	CircleNetworkTypeUNISEPOLIA  CircleNetworkType = "UNI-SEPOLIA"
)

func (e *CircleNetworkType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CircleNetworkType(s)
	case string:
		*e = CircleNetworkType(s)
	default:
		return fmt.Errorf("unsupported scan type for CircleNetworkType: %T", src)
	}
	return nil
}

type NullCircleNetworkType struct {
	CircleNetworkType CircleNetworkType `json:"circle_network_type"`
	Valid             bool              `json:"valid"` // Valid is true if CircleNetworkType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCircleNetworkType) Scan(value interface{}) error {
	if value == nil {
		ns.CircleNetworkType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CircleNetworkType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCircleNetworkType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CircleNetworkType), nil
}

type IntervalType string

const (
	IntervalType1min  IntervalType = "1min"
	IntervalType5mins IntervalType = "5mins"
	IntervalTypeDaily IntervalType = "daily"
	IntervalTypeWeek  IntervalType = "week"
	IntervalTypeMonth IntervalType = "month"
	IntervalTypeYear  IntervalType = "year"
)

func (e *IntervalType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = IntervalType(s)
	case string:
		*e = IntervalType(s)
	default:
		return fmt.Errorf("unsupported scan type for IntervalType: %T", src)
	}
	return nil
}

type NullIntervalType struct {
	IntervalType IntervalType `json:"interval_type"`
	Valid        bool         `json:"valid"` // Valid is true if IntervalType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullIntervalType) Scan(value interface{}) error {
	if value == nil {
		ns.IntervalType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.IntervalType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullIntervalType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.IntervalType), nil
}

type NetworkType string

const (
	NetworkTypeEvm      NetworkType = "evm"
	NetworkTypeSolana   NetworkType = "solana"
	NetworkTypeCosmos   NetworkType = "cosmos"
	NetworkTypeBitcoin  NetworkType = "bitcoin"
	NetworkTypePolkadot NetworkType = "polkadot"
)

func (e *NetworkType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = NetworkType(s)
	case string:
		*e = NetworkType(s)
	default:
		return fmt.Errorf("unsupported scan type for NetworkType: %T", src)
	}
	return nil
}

type NullNetworkType struct {
	NetworkType NetworkType `json:"network_type"`
	Valid       bool        `json:"valid"` // Valid is true if NetworkType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullNetworkType) Scan(value interface{}) error {
	if value == nil {
		ns.NetworkType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.NetworkType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullNetworkType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.NetworkType), nil
}

type PriceType string

const (
	PriceTypeRecurring PriceType = "recurring"
	PriceTypeOneOff    PriceType = "one_off"
)

func (e *PriceType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PriceType(s)
	case string:
		*e = PriceType(s)
	default:
		return fmt.Errorf("unsupported scan type for PriceType: %T", src)
	}
	return nil
}

type NullPriceType struct {
	PriceType PriceType `json:"price_type"`
	Valid     bool      `json:"valid"` // Valid is true if PriceType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPriceType) Scan(value interface{}) error {
	if value == nil {
		ns.PriceType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PriceType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPriceType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PriceType), nil
}

type SubscriptionEventType string

const (
	SubscriptionEventTypeCreated                 SubscriptionEventType = "created"
	SubscriptionEventTypeRedeemed                SubscriptionEventType = "redeemed"
	SubscriptionEventTypeRenewed                 SubscriptionEventType = "renewed"
	SubscriptionEventTypeCanceled                SubscriptionEventType = "canceled"
	SubscriptionEventTypeExpired                 SubscriptionEventType = "expired"
	SubscriptionEventTypeCompleted               SubscriptionEventType = "completed"
	SubscriptionEventTypeFailed                  SubscriptionEventType = "failed"
	SubscriptionEventTypeFailedValidation        SubscriptionEventType = "failed_validation"
	SubscriptionEventTypeFailedCustomerCreation  SubscriptionEventType = "failed_customer_creation"
	SubscriptionEventTypeFailedWalletCreation    SubscriptionEventType = "failed_wallet_creation"
	SubscriptionEventTypeFailedDelegationStorage SubscriptionEventType = "failed_delegation_storage"
	SubscriptionEventTypeFailedSubscriptionDb    SubscriptionEventType = "failed_subscription_db"
	SubscriptionEventTypeFailedRedemption        SubscriptionEventType = "failed_redemption"
	SubscriptionEventTypeFailedTransaction       SubscriptionEventType = "failed_transaction"
	SubscriptionEventTypeFailedDuplicate         SubscriptionEventType = "failed_duplicate"
)

func (e *SubscriptionEventType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SubscriptionEventType(s)
	case string:
		*e = SubscriptionEventType(s)
	default:
		return fmt.Errorf("unsupported scan type for SubscriptionEventType: %T", src)
	}
	return nil
}

type NullSubscriptionEventType struct {
	SubscriptionEventType SubscriptionEventType `json:"subscription_event_type"`
	Valid                 bool                  `json:"valid"` // Valid is true if SubscriptionEventType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSubscriptionEventType) Scan(value interface{}) error {
	if value == nil {
		ns.SubscriptionEventType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SubscriptionEventType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSubscriptionEventType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SubscriptionEventType), nil
}

type SubscriptionStatus string

const (
	SubscriptionStatusActive    SubscriptionStatus = "active"
	SubscriptionStatusCanceled  SubscriptionStatus = "canceled"
	SubscriptionStatusExpired   SubscriptionStatus = "expired"
	SubscriptionStatusOverdue   SubscriptionStatus = "overdue"
	SubscriptionStatusSuspended SubscriptionStatus = "suspended"
	SubscriptionStatusFailed    SubscriptionStatus = "failed"
	SubscriptionStatusCompleted SubscriptionStatus = "completed"
	SubscriptionStatusTrial     SubscriptionStatus = "trial"
)

func (e *SubscriptionStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SubscriptionStatus(s)
	case string:
		*e = SubscriptionStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for SubscriptionStatus: %T", src)
	}
	return nil
}

type NullSubscriptionStatus struct {
	SubscriptionStatus SubscriptionStatus `json:"subscription_status"`
	Valid              bool               `json:"valid"` // Valid is true if SubscriptionStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSubscriptionStatus) Scan(value interface{}) error {
	if value == nil {
		ns.SubscriptionStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SubscriptionStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSubscriptionStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SubscriptionStatus), nil
}

type UserRole string

const (
	UserRoleAdmin     UserRole = "admin"
	UserRoleSupport   UserRole = "support"
	UserRoleDeveloper UserRole = "developer"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole `json:"user_role"`
	Valid    bool     `json:"valid"` // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type UserStatus string

const (
	UserStatusActive    UserStatus = "active"
	UserStatusInactive  UserStatus = "inactive"
	UserStatusSuspended UserStatus = "suspended"
	UserStatusPending   UserStatus = "pending"
)

func (e *UserStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserStatus(s)
	case string:
		*e = UserStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for UserStatus: %T", src)
	}
	return nil
}

type NullUserStatus struct {
	UserStatus UserStatus `json:"user_status"`
	Valid      bool       `json:"valid"` // Valid is true if UserStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserStatus) Scan(value interface{}) error {
	if value == nil {
		ns.UserStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserStatus), nil
}

type WalletType string

const (
	WalletTypeWallet       WalletType = "wallet"
	WalletTypeCircleWallet WalletType = "circle_wallet"
	WalletTypeWeb3auth     WalletType = "web3auth"
)

func (e *WalletType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = WalletType(s)
	case string:
		*e = WalletType(s)
	default:
		return fmt.Errorf("unsupported scan type for WalletType: %T", src)
	}
	return nil
}

type NullWalletType struct {
	WalletType WalletType `json:"wallet_type"`
	Valid      bool       `json:"valid"` // Valid is true if WalletType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullWalletType) Scan(value interface{}) error {
	if value == nil {
		ns.WalletType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.WalletType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullWalletType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.WalletType), nil
}

type Account struct {
	ID                 uuid.UUID          `json:"id"`
	Name               string             `json:"name"`
	AccountType        AccountType        `json:"account_type"`
	OwnerID            pgtype.UUID        `json:"owner_id"`
	BusinessName       pgtype.Text        `json:"business_name"`
	BusinessType       pgtype.Text        `json:"business_type"`
	WebsiteUrl         pgtype.Text        `json:"website_url"`
	SupportEmail       pgtype.Text        `json:"support_email"`
	SupportPhone       pgtype.Text        `json:"support_phone"`
	Metadata           []byte             `json:"metadata"`
	FinishedOnboarding pgtype.Bool        `json:"finished_onboarding"`
	CreatedAt          pgtype.Timestamptz `json:"created_at"`
	UpdatedAt          pgtype.Timestamptz `json:"updated_at"`
	DeletedAt          pgtype.Timestamptz `json:"deleted_at"`
}

type ApiKey struct {
	ID          uuid.UUID          `json:"id"`
	WorkspaceID uuid.UUID          `json:"workspace_id"`
	Name        string             `json:"name"`
	KeyHash     string             `json:"key_hash"`
	KeyPrefix   pgtype.Text        `json:"key_prefix"`
	AccessLevel ApiKeyLevel        `json:"access_level"`
	ExpiresAt   pgtype.Timestamptz `json:"expires_at"`
	LastUsedAt  pgtype.Timestamptz `json:"last_used_at"`
	Metadata    []byte             `json:"metadata"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	DeletedAt   pgtype.Timestamptz `json:"deleted_at"`
}

type CircleUser struct {
	ID                     uuid.UUID          `json:"id"`
	WorkspaceID            uuid.UUID          `json:"workspace_id"`
	CircleCreateDate       pgtype.Timestamptz `json:"circle_create_date"`
	PinStatus              string             `json:"pin_status"`
	Status                 string             `json:"status"`
	SecurityQuestionStatus string             `json:"security_question_status"`
	CreatedAt              pgtype.Timestamptz `json:"created_at"`
	UpdatedAt              pgtype.Timestamptz `json:"updated_at"`
}

type CircleWallet struct {
	ID             uuid.UUID          `json:"id"`
	WalletID       uuid.UUID          `json:"wallet_id"`
	CircleUserID   uuid.UUID          `json:"circle_user_id"`
	CircleWalletID string             `json:"circle_wallet_id"`
	ChainID        int32              `json:"chain_id"`
	State          string             `json:"state"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
	DeletedAt      pgtype.Timestamptz `json:"deleted_at"`
}

type Customer struct {
	ID                 uuid.UUID          `json:"id"`
	NumID              int64              `json:"num_id"`
	Web3authID         pgtype.Text        `json:"web3auth_id"`
	ExternalID         pgtype.Text        `json:"external_id"`
	Email              pgtype.Text        `json:"email"`
	Name               pgtype.Text        `json:"name"`
	Phone              pgtype.Text        `json:"phone"`
	Description        pgtype.Text        `json:"description"`
	Metadata           []byte             `json:"metadata"`
	FinishedOnboarding pgtype.Bool        `json:"finished_onboarding"`
	PaymentSyncStatus  pgtype.Text        `json:"payment_sync_status"`
	PaymentSyncedAt    pgtype.Timestamptz `json:"payment_synced_at"`
	PaymentSyncVersion pgtype.Int4        `json:"payment_sync_version"`
	PaymentProvider    pgtype.Text        `json:"payment_provider"`
	CreatedAt          pgtype.Timestamptz `json:"created_at"`
	UpdatedAt          pgtype.Timestamptz `json:"updated_at"`
	DeletedAt          pgtype.Timestamptz `json:"deleted_at"`
	TaxJurisdictionID  pgtype.UUID        `json:"tax_jurisdiction_id"`
	TaxID              pgtype.Text        `json:"tax_id"`
	TaxIDType          pgtype.Text        `json:"tax_id_type"`
	TaxIDVerified      pgtype.Bool        `json:"tax_id_verified"`
	TaxIDVerifiedAt    pgtype.Timestamptz `json:"tax_id_verified_at"`
	IsBusiness         pgtype.Bool        `json:"is_business"`
	BusinessName       pgtype.Text        `json:"business_name"`
	BillingCountry     pgtype.Text        `json:"billing_country"`
	BillingState       pgtype.Text        `json:"billing_state"`
	BillingCity        pgtype.Text        `json:"billing_city"`
	BillingPostalCode  pgtype.Text        `json:"billing_postal_code"`
}

type CustomerWallet struct {
	ID            uuid.UUID          `json:"id"`
	CustomerID    uuid.UUID          `json:"customer_id"`
	WalletAddress string             `json:"wallet_address"`
	NetworkType   NetworkType        `json:"network_type"`
	Nickname      pgtype.Text        `json:"nickname"`
	Ens           pgtype.Text        `json:"ens"`
	IsPrimary     pgtype.Bool        `json:"is_primary"`
	Verified      pgtype.Bool        `json:"verified"`
	LastUsedAt    pgtype.Timestamptz `json:"last_used_at"`
	Metadata      []byte             `json:"metadata"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `json:"updated_at"`
	DeletedAt     pgtype.Timestamptz `json:"deleted_at"`
}

type DashboardMetric struct {
	ID                                uuid.UUID          `json:"id"`
	WorkspaceID                       uuid.UUID          `json:"workspace_id"`
	MetricDate                        pgtype.Date        `json:"metric_date"`
	MetricType                        string             `json:"metric_type"`
	MetricHour                        pgtype.Int4        `json:"metric_hour"`
	FiatCurrency                      string             `json:"fiat_currency"`
	MrrCents                          pgtype.Int8        `json:"mrr_cents"`
	ArrCents                          pgtype.Int8        `json:"arr_cents"`
	TotalRevenueCents                 pgtype.Int8        `json:"total_revenue_cents"`
	NewRevenueCents                   pgtype.Int8        `json:"new_revenue_cents"`
	ExpansionRevenueCents             pgtype.Int8        `json:"expansion_revenue_cents"`
	ContractionRevenueCents           pgtype.Int8        `json:"contraction_revenue_cents"`
	TotalCustomers                    pgtype.Int4        `json:"total_customers"`
	NewCustomers                      pgtype.Int4        `json:"new_customers"`
	ChurnedCustomers                  pgtype.Int4        `json:"churned_customers"`
	ReactivatedCustomers              pgtype.Int4        `json:"reactivated_customers"`
	ActiveSubscriptions               pgtype.Int4        `json:"active_subscriptions"`
	NewSubscriptions                  pgtype.Int4        `json:"new_subscriptions"`
	CancelledSubscriptions            pgtype.Int4        `json:"cancelled_subscriptions"`
	PausedSubscriptions               pgtype.Int4        `json:"paused_subscriptions"`
	TrialSubscriptions                pgtype.Int4        `json:"trial_subscriptions"`
	ChurnRate                         pgtype.Numeric     `json:"churn_rate"`
	GrowthRate                        pgtype.Numeric     `json:"growth_rate"`
	LtvAvgCents                       pgtype.Int8        `json:"ltv_avg_cents"`
	SuccessfulPayments                pgtype.Int4        `json:"successful_payments"`
	FailedPayments                    pgtype.Int4        `json:"failed_payments"`
	PendingPayments                   pgtype.Int4        `json:"pending_payments"`
	TotalPaymentVolumeCents           pgtype.Int8        `json:"total_payment_volume_cents"`
	AvgPaymentSizeCents               pgtype.Int8        `json:"avg_payment_size_cents"`
	TotalGasFeesCents                 pgtype.Int8        `json:"total_gas_fees_cents"`
	SponsoredGasFeesCents             pgtype.Int8        `json:"sponsored_gas_fees_cents"`
	CustomerGasFeesCents              pgtype.Int8        `json:"customer_gas_fees_cents"`
	AvgGasFeeCents                    pgtype.Int8        `json:"avg_gas_fee_cents"`
	GasSponsorshipRate                pgtype.Numeric     `json:"gas_sponsorship_rate"`
	UniqueWalletAddresses             pgtype.Int4        `json:"unique_wallet_addresses"`
	NewWalletAddresses                pgtype.Int4        `json:"new_wallet_addresses"`
	NetworkMetrics                    []byte             `json:"network_metrics"`
	TokenMetrics                      []byte             `json:"token_metrics"`
	AvgPaymentConfirmationTimeSeconds pgtype.Int4        `json:"avg_payment_confirmation_time_seconds"`
	PaymentSuccessRate                pgtype.Numeric     `json:"payment_success_rate"`
	CreatedAt                         pgtype.Timestamptz `json:"created_at"`
	UpdatedAt                         pgtype.Timestamptz `json:"updated_at"`
}

type DelegationDatum struct {
	ID        uuid.UUID          `json:"id"`
	Delegate  string             `json:"delegate"`
	Delegator string             `json:"delegator"`
	Authority string             `json:"authority"`
	Caveats   json.RawMessage    `json:"caveats"`
	Salt      string             `json:"salt"`
	Signature string             `json:"signature"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	DeletedAt pgtype.Timestamptz `json:"deleted_at"`
}

type DunningAnalytic struct {
	ID                       uuid.UUID          `json:"id"`
	WorkspaceID              uuid.UUID          `json:"workspace_id"`
	PeriodStart              pgtype.Date        `json:"period_start"`
	PeriodEnd                pgtype.Date        `json:"period_end"`
	PeriodType               string             `json:"period_type"`
	TotalCampaignsStarted    pgtype.Int4        `json:"total_campaigns_started"`
	TotalCampaignsRecovered  pgtype.Int4        `json:"total_campaigns_recovered"`
	TotalCampaignsLost       pgtype.Int4        `json:"total_campaigns_lost"`
	RecoveryRate             pgtype.Numeric     `json:"recovery_rate"`
	TotalAtRiskCents         pgtype.Int8        `json:"total_at_risk_cents"`
	TotalRecoveredCents      pgtype.Int8        `json:"total_recovered_cents"`
	TotalLostCents           pgtype.Int8        `json:"total_lost_cents"`
	TotalPaymentRetries      pgtype.Int4        `json:"total_payment_retries"`
	SuccessfulPaymentRetries pgtype.Int4        `json:"successful_payment_retries"`
	TotalEmailsSent          pgtype.Int4        `json:"total_emails_sent"`
	EmailOpenRate            pgtype.Numeric     `json:"email_open_rate"`
	EmailClickRate           pgtype.Numeric     `json:"email_click_rate"`
	RecoveryByAttempt        []byte             `json:"recovery_by_attempt"`
	AvgHoursToRecovery       pgtype.Numeric     `json:"avg_hours_to_recovery"`
	CreatedAt                pgtype.Timestamptz `json:"created_at"`
	UpdatedAt                pgtype.Timestamptz `json:"updated_at"`
}

type DunningAttempt struct {
	ID                 uuid.UUID          `json:"id"`
	CampaignID         uuid.UUID          `json:"campaign_id"`
	AttemptNumber      int32              `json:"attempt_number"`
	AttemptType        string             `json:"attempt_type"`
	Status             string             `json:"status"`
	StartedAt          pgtype.Timestamptz `json:"started_at"`
	CompletedAt        pgtype.Timestamptz `json:"completed_at"`
	PaymentID          pgtype.UUID        `json:"payment_id"`
	PaymentStatus      pgtype.Text        `json:"payment_status"`
	PaymentError       pgtype.Text        `json:"payment_error"`
	CommunicationType  pgtype.Text        `json:"communication_type"`
	CommunicationSent  pgtype.Bool        `json:"communication_sent"`
	CommunicationError pgtype.Text        `json:"communication_error"`
	EmailTemplateID    pgtype.UUID        `json:"email_template_id"`
	CustomerResponse   pgtype.Text        `json:"customer_response"`
	CustomerResponseAt pgtype.Timestamptz `json:"customer_response_at"`
	Metadata           []byte             `json:"metadata"`
	CreatedAt          pgtype.Timestamptz `json:"created_at"`
}

type DunningCampaign struct {
	ID                    uuid.UUID          `json:"id"`
	WorkspaceID           uuid.UUID          `json:"workspace_id"`
	ConfigurationID       uuid.UUID          `json:"configuration_id"`
	SubscriptionID        pgtype.UUID        `json:"subscription_id"`
	PaymentID             pgtype.UUID        `json:"payment_id"`
	CustomerID            uuid.UUID          `json:"customer_id"`
	Status                string             `json:"status"`
	StartedAt             pgtype.Timestamptz `json:"started_at"`
	CompletedAt           pgtype.Timestamptz `json:"completed_at"`
	CurrentAttempt        int32              `json:"current_attempt"`
	NextRetryAt           pgtype.Timestamptz `json:"next_retry_at"`
	LastRetryAt           pgtype.Timestamptz `json:"last_retry_at"`
	Recovered             pgtype.Bool        `json:"recovered"`
	RecoveredAt           pgtype.Timestamptz `json:"recovered_at"`
	RecoveredAmountCents  pgtype.Int8        `json:"recovered_amount_cents"`
	FinalActionTaken      pgtype.Text        `json:"final_action_taken"`
	FinalActionAt         pgtype.Timestamptz `json:"final_action_at"`
	OriginalFailureReason pgtype.Text        `json:"original_failure_reason"`
	OriginalAmountCents   int64              `json:"original_amount_cents"`
	Currency              string             `json:"currency"`
	Metadata              []byte             `json:"metadata"`
	CreatedAt             pgtype.Timestamptz `json:"created_at"`
	UpdatedAt             pgtype.Timestamptz `json:"updated_at"`
}

type DunningConfiguration struct {
	ID                     uuid.UUID          `json:"id"`
	WorkspaceID            uuid.UUID          `json:"workspace_id"`
	Name                   string             `json:"name"`
	Description            pgtype.Text        `json:"description"`
	IsActive               pgtype.Bool        `json:"is_active"`
	IsDefault              pgtype.Bool        `json:"is_default"`
	MaxRetryAttempts       int32              `json:"max_retry_attempts"`
	RetryIntervalDays      []int32            `json:"retry_interval_days"`
	AttemptActions         json.RawMessage    `json:"attempt_actions"`
	FinalAction            string             `json:"final_action"`
	FinalActionConfig      []byte             `json:"final_action_config"`
	SendPreDunningReminder pgtype.Bool        `json:"send_pre_dunning_reminder"`
	PreDunningDays         pgtype.Int4        `json:"pre_dunning_days"`
	AllowCustomerRetry     pgtype.Bool        `json:"allow_customer_retry"`
	GracePeriodHours       pgtype.Int4        `json:"grace_period_hours"`
	CreatedAt              pgtype.Timestamptz `json:"created_at"`
	UpdatedAt              pgtype.Timestamptz `json:"updated_at"`
	DeletedAt              pgtype.Timestamptz `json:"deleted_at"`
}

type DunningEmailTemplate struct {
	ID                 uuid.UUID          `json:"id"`
	WorkspaceID        uuid.UUID          `json:"workspace_id"`
	Name               string             `json:"name"`
	TemplateType       string             `json:"template_type"`
	Subject            string             `json:"subject"`
	BodyHtml           string             `json:"body_html"`
	BodyText           pgtype.Text        `json:"body_text"`
	AvailableVariables []byte             `json:"available_variables"`
	IsActive           pgtype.Bool        `json:"is_active"`
	CreatedAt          pgtype.Timestamptz `json:"created_at"`
	UpdatedAt          pgtype.Timestamptz `json:"updated_at"`
	DeletedAt          pgtype.Timestamptz `json:"deleted_at"`
}

type FailedSubscriptionAttempt struct {
	ID                  uuid.UUID             `json:"id"`
	CustomerID          pgtype.UUID           `json:"customer_id"`
	ProductID           uuid.UUID             `json:"product_id"`
	ProductTokenID      uuid.UUID             `json:"product_token_id"`
	CustomerWalletID    pgtype.UUID           `json:"customer_wallet_id"`
	WalletAddress       string                `json:"wallet_address"`
	ErrorType           SubscriptionEventType `json:"error_type"`
	ErrorMessage        string                `json:"error_message"`
	ErrorDetails        []byte                `json:"error_details"`
	DelegationSignature pgtype.Text           `json:"delegation_signature"`
	OccurredAt          pgtype.Timestamptz    `json:"occurred_at"`
	Metadata            []byte                `json:"metadata"`
	CreatedAt           pgtype.Timestamptz    `json:"created_at"`
	UpdatedAt           pgtype.Timestamptz    `json:"updated_at"`
}

type FiatCurrency struct {
	ID                uuid.UUID          `json:"id"`
	Code              string             `json:"code"`
	Name              string             `json:"name"`
	Symbol            string             `json:"symbol"`
	DecimalPlaces     int32              `json:"decimal_places"`
	IsActive          pgtype.Bool        `json:"is_active"`
	SymbolPosition    pgtype.Text        `json:"symbol_position"`
	ThousandSeparator pgtype.Text        `json:"thousand_separator"`
	DecimalSeparator  pgtype.Text        `json:"decimal_separator"`
	Countries         []byte             `json:"countries"`
	CreatedAt         pgtype.Timestamptz `json:"created_at"`
	UpdatedAt         pgtype.Timestamptz `json:"updated_at"`
}

type GasFeePayment struct {
	ID                 uuid.UUID          `json:"id"`
	PaymentID          uuid.UUID          `json:"payment_id"`
	GasFeeWei          string             `json:"gas_fee_wei"`
	GasPriceGwei       string             `json:"gas_price_gwei"`
	GasUnitsUsed       int64              `json:"gas_units_used"`
	MaxGasUnits        int64              `json:"max_gas_units"`
	BaseFeeGwei        pgtype.Text        `json:"base_fee_gwei"`
	PriorityFeeGwei    pgtype.Text        `json:"priority_fee_gwei"`
	PaymentTokenID     pgtype.UUID        `json:"payment_token_id"`
	PaymentTokenAmount pgtype.Text        `json:"payment_token_amount"`
	PaymentMethod      string             `json:"payment_method"`
	SponsorType        string             `json:"sponsor_type"`
	SponsorID          pgtype.UUID        `json:"sponsor_id"`
	SponsorWorkspaceID pgtype.UUID        `json:"sponsor_workspace_id"`
	NetworkID          uuid.UUID          `json:"network_id"`
	BlockNumber        pgtype.Int8        `json:"block_number"`
	BlockTimestamp     pgtype.Timestamptz `json:"block_timestamp"`
	EthUsdPrice        pgtype.Numeric     `json:"eth_usd_price"`
	TokenUsdPrice      pgtype.Numeric     `json:"token_usd_price"`
	GasFeeUsdCents     pgtype.Int8        `json:"gas_fee_usd_cents"`
	CreatedAt          pgtype.Timestamptz `json:"created_at"`
}

type GasSponsorshipConfig struct {
	ID                       uuid.UUID          `json:"id"`
	WorkspaceID              uuid.UUID          `json:"workspace_id"`
	SponsorshipEnabled       pgtype.Bool        `json:"sponsorship_enabled"`
	SponsorCustomerGas       pgtype.Bool        `json:"sponsor_customer_gas"`
	SponsorThresholdUsdCents pgtype.Int8        `json:"sponsor_threshold_usd_cents"`
	MonthlyBudgetUsdCents    pgtype.Int8        `json:"monthly_budget_usd_cents"`
	SponsorForProducts       []byte             `json:"sponsor_for_products"`
	SponsorForCustomers      []byte             `json:"sponsor_for_customers"`
	SponsorForTiers          []byte             `json:"sponsor_for_tiers"`
	CurrentMonthSpentCents   pgtype.Int8        `json:"current_month_spent_cents"`
	LastResetDate            pgtype.Date        `json:"last_reset_date"`
	CreatedAt                pgtype.Timestamptz `json:"created_at"`
	UpdatedAt                pgtype.Timestamptz `json:"updated_at"`
}

type Invoice struct {
	ID                     uuid.UUID          `json:"id"`
	WorkspaceID            uuid.UUID          `json:"workspace_id"`
	CustomerID             pgtype.UUID        `json:"customer_id"`
	SubscriptionID         pgtype.UUID        `json:"subscription_id"`
	ExternalID             string             `json:"external_id"`
	ExternalCustomerID     pgtype.Text        `json:"external_customer_id"`
	ExternalSubscriptionID pgtype.Text        `json:"external_subscription_id"`
	Status                 string             `json:"status"`
	CollectionMethod       pgtype.Text        `json:"collection_method"`
	AmountDue              int32              `json:"amount_due"`
	AmountPaid             int32              `json:"amount_paid"`
	AmountRemaining        int32              `json:"amount_remaining"`
	Currency               string             `json:"currency"`
	DueDate                pgtype.Timestamptz `json:"due_date"`
	PaidAt                 pgtype.Timestamptz `json:"paid_at"`
	CreatedDate            pgtype.Timestamptz `json:"created_date"`
	InvoicePdf             pgtype.Text        `json:"invoice_pdf"`
	HostedInvoiceUrl       pgtype.Text        `json:"hosted_invoice_url"`
	ChargeID               pgtype.Text        `json:"charge_id"`
	PaymentIntentID        pgtype.Text        `json:"payment_intent_id"`
	LineItems              []byte             `json:"line_items"`
	TaxAmount              pgtype.Int4        `json:"tax_amount"`
	TotalTaxAmounts        []byte             `json:"total_tax_amounts"`
	BillingReason          pgtype.Text        `json:"billing_reason"`
	PaidOutOfBand          pgtype.Bool        `json:"paid_out_of_band"`
	PaymentProvider        pgtype.Text        `json:"payment_provider"`
	PaymentSyncStatus      pgtype.Text        `json:"payment_sync_status"`
	PaymentSyncedAt        pgtype.Timestamptz `json:"payment_synced_at"`
	AttemptCount           pgtype.Int4        `json:"attempt_count"`
	NextPaymentAttempt     pgtype.Timestamptz `json:"next_payment_attempt"`
	Metadata               []byte             `json:"metadata"`
	CreatedAt              pgtype.Timestamptz `json:"created_at"`
	UpdatedAt              pgtype.Timestamptz `json:"updated_at"`
	DeletedAt              pgtype.Timestamptz `json:"deleted_at"`
	InvoiceNumber          pgtype.Text        `json:"invoice_number"`
	SubtotalCents          pgtype.Int8        `json:"subtotal_cents"`
	DiscountCents          pgtype.Int8        `json:"discount_cents"`
	PaymentLinkID          pgtype.UUID        `json:"payment_link_id"`
	DelegationAddress      pgtype.Text        `json:"delegation_address"`
	QrCodeData             pgtype.Text        `json:"qr_code_data"`
	TaxAmountCents         int64              `json:"tax_amount_cents"`
	TaxDetails             []byte             `json:"tax_details"`
	CustomerTaxID          pgtype.Text        `json:"customer_tax_id"`
	CustomerJurisdictionID pgtype.UUID        `json:"customer_jurisdiction_id"`
	ReverseChargeApplies   pgtype.Bool        `json:"reverse_charge_applies"`
}

type InvoiceLineItem struct {
	ID                uuid.UUID          `json:"id"`
	InvoiceID         uuid.UUID          `json:"invoice_id"`
	Description       string             `json:"description"`
	Quantity          pgtype.Numeric     `json:"quantity"`
	UnitAmountInCents int64              `json:"unit_amount_in_cents"`
	AmountInCents     int64              `json:"amount_in_cents"`
	FiatCurrency      string             `json:"fiat_currency"`
	SubscriptionID    pgtype.UUID        `json:"subscription_id"`
	ProductID         pgtype.UUID        `json:"product_id"`
	PriceID           pgtype.UUID        `json:"price_id"`
	NetworkID         pgtype.UUID        `json:"network_id"`
	TokenID           pgtype.UUID        `json:"token_id"`
	CryptoAmount      pgtype.Numeric     `json:"crypto_amount"`
	ExchangeRate      pgtype.Numeric     `json:"exchange_rate"`
	TaxRate           pgtype.Numeric     `json:"tax_rate"`
	TaxAmountInCents  pgtype.Int8        `json:"tax_amount_in_cents"`
	TaxCryptoAmount   pgtype.Numeric     `json:"tax_crypto_amount"`
	PeriodStart       pgtype.Timestamptz `json:"period_start"`
	PeriodEnd         pgtype.Timestamptz `json:"period_end"`
	LineItemType      pgtype.Text        `json:"line_item_type"`
	GasFeePaymentID   pgtype.UUID        `json:"gas_fee_payment_id"`
	IsGasSponsored    pgtype.Bool        `json:"is_gas_sponsored"`
	GasSponsorType    pgtype.Text        `json:"gas_sponsor_type"`
	GasSponsorName    pgtype.Text        `json:"gas_sponsor_name"`
	Metadata          []byte             `json:"metadata"`
	CreatedAt         pgtype.Timestamptz `json:"created_at"`
	UpdatedAt         pgtype.Timestamptz `json:"updated_at"`
}

type Network struct {
	ID                    uuid.UUID          `json:"id"`
	Name                  string             `json:"name"`
	Type                  string             `json:"type"`
	NetworkType           NetworkType        `json:"network_type"`
	CircleNetworkType     CircleNetworkType  `json:"circle_network_type"`
	RpcID                 string             `json:"rpc_id"`
	BlockExplorerUrl      pgtype.Text        `json:"block_explorer_url"`
	ChainID               int32              `json:"chain_id"`
	IsTestnet             bool               `json:"is_testnet"`
	Active                bool               `json:"active"`
	LogoUrl               pgtype.Text        `json:"logo_url"`
	DisplayName           pgtype.Text        `json:"display_name"`
	ChainNamespace        pgtype.Text        `json:"chain_namespace"`
	BaseFeeMultiplier     pgtype.Numeric     `json:"base_fee_multiplier"`
	PriorityFeeMultiplier pgtype.Numeric     `json:"priority_fee_multiplier"`
	DeploymentGasLimit    pgtype.Text        `json:"deployment_gas_limit"`
	TokenTransferGasLimit pgtype.Text        `json:"token_transfer_gas_limit"`
	SupportsEip1559       pgtype.Bool        `json:"supports_eip1559"`
	GasOracleUrl          pgtype.Text        `json:"gas_oracle_url"`
	GasRefreshIntervalMs  pgtype.Int4        `json:"gas_refresh_interval_ms"`
	GasPriorityLevels     []byte             `json:"gas_priority_levels"`
	AverageBlockTimeMs    pgtype.Int4        `json:"average_block_time_ms"`
	PeakHoursMultiplier   pgtype.Numeric     `json:"peak_hours_multiplier"`
	CreatedAt             pgtype.Timestamptz `json:"created_at"`
	UpdatedAt             pgtype.Timestamptz `json:"updated_at"`
	DeletedAt             pgtype.Timestamptz `json:"deleted_at"`
}

type Payment struct {
	ID                  uuid.UUID          `json:"id"`
	WorkspaceID         uuid.UUID          `json:"workspace_id"`
	InvoiceID           pgtype.UUID        `json:"invoice_id"`
	SubscriptionID      pgtype.UUID        `json:"subscription_id"`
	SubscriptionEvent   pgtype.UUID        `json:"subscription_event"`
	CustomerID          uuid.UUID          `json:"customer_id"`
	AmountInCents       int64              `json:"amount_in_cents"`
	Currency            string             `json:"currency"`
	Status              string             `json:"status"`
	PaymentMethod       string             `json:"payment_method"`
	TransactionHash     pgtype.Text        `json:"transaction_hash"`
	NetworkID           pgtype.UUID        `json:"network_id"`
	TokenID             pgtype.UUID        `json:"token_id"`
	CryptoAmount        pgtype.Numeric     `json:"crypto_amount"`
	ExchangeRate        pgtype.Numeric     `json:"exchange_rate"`
	HasGasFee           pgtype.Bool        `json:"has_gas_fee"`
	GasFeeUsdCents      pgtype.Int8        `json:"gas_fee_usd_cents"`
	GasSponsored        pgtype.Bool        `json:"gas_sponsored"`
	ExternalPaymentID   pgtype.Text        `json:"external_payment_id"`
	PaymentProvider     pgtype.Text        `json:"payment_provider"`
	ProductAmountCents  int64              `json:"product_amount_cents"`
	TaxAmountCents      pgtype.Int8        `json:"tax_amount_cents"`
	GasAmountCents      pgtype.Int8        `json:"gas_amount_cents"`
	DiscountAmountCents pgtype.Int8        `json:"discount_amount_cents"`
	InitiatedAt         pgtype.Timestamptz `json:"initiated_at"`
	CompletedAt         pgtype.Timestamptz `json:"completed_at"`
	FailedAt            pgtype.Timestamptz `json:"failed_at"`
	ErrorMessage        pgtype.Text        `json:"error_message"`
	Metadata            []byte             `json:"metadata"`
	CreatedAt           pgtype.Timestamptz `json:"created_at"`
	UpdatedAt           pgtype.Timestamptz `json:"updated_at"`
}

type PaymentLink struct {
	ID              uuid.UUID          `json:"id"`
	WorkspaceID     uuid.UUID          `json:"workspace_id"`
	Slug            string             `json:"slug"`
	Status          string             `json:"status"`
	ProductID       pgtype.UUID        `json:"product_id"`
	PriceID         pgtype.UUID        `json:"price_id"`
	AmountInCents   pgtype.Int8        `json:"amount_in_cents"`
	Currency        pgtype.Text        `json:"currency"`
	PaymentType     pgtype.Text        `json:"payment_type"`
	CollectEmail    pgtype.Bool        `json:"collect_email"`
	CollectShipping pgtype.Bool        `json:"collect_shipping"`
	CollectName     pgtype.Bool        `json:"collect_name"`
	ExpiresAt       pgtype.Timestamptz `json:"expires_at"`
	MaxUses         pgtype.Int4        `json:"max_uses"`
	UsedCount       pgtype.Int4        `json:"used_count"`
	RedirectUrl     pgtype.Text        `json:"redirect_url"`
	QrCodeUrl       pgtype.Text        `json:"qr_code_url"`
	Metadata        []byte             `json:"metadata"`
	CreatedAt       pgtype.Timestamptz `json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `json:"updated_at"`
	DeletedAt       pgtype.Timestamptz `json:"deleted_at"`
}

type PaymentSyncEvent struct {
	ID                 uuid.UUID          `json:"id"`
	SessionID          uuid.UUID          `json:"session_id"`
	WorkspaceID        uuid.UUID          `json:"workspace_id"`
	ProviderName       string             `json:"provider_name"`
	EntityType         string             `json:"entity_type"`
	EntityID           pgtype.UUID        `json:"entity_id"`
	ExternalID         pgtype.Text        `json:"external_id"`
	EventType          string             `json:"event_type"`
	EventMessage       pgtype.Text        `json:"event_message"`
	EventDetails       []byte             `json:"event_details"`
	WebhookEventID     pgtype.Text        `json:"webhook_event_id"`
	ProviderAccountID  pgtype.Text        `json:"provider_account_id"`
	IdempotencyKey     pgtype.Text        `json:"idempotency_key"`
	ProcessingAttempts pgtype.Int4        `json:"processing_attempts"`
	SignatureValid     pgtype.Bool        `json:"signature_valid"`
	OccurredAt         pgtype.Timestamptz `json:"occurred_at"`
}

type PaymentSyncSession struct {
	ID           uuid.UUID          `json:"id"`
	WorkspaceID  uuid.UUID          `json:"workspace_id"`
	ProviderName string             `json:"provider_name"`
	SessionType  string             `json:"session_type"`
	Status       string             `json:"status"`
	EntityTypes  []string           `json:"entity_types"`
	Config       []byte             `json:"config"`
	Progress     []byte             `json:"progress"`
	ErrorSummary []byte             `json:"error_summary"`
	StartedAt    pgtype.Timestamptz `json:"started_at"`
	CompletedAt  pgtype.Timestamptz `json:"completed_at"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
	DeletedAt    pgtype.Timestamptz `json:"deleted_at"`
}

type Price struct {
	ID                  uuid.UUID          `json:"id"`
	ProductID           uuid.UUID          `json:"product_id"`
	ExternalID          pgtype.Text        `json:"external_id"`
	Active              bool               `json:"active"`
	Type                PriceType          `json:"type"`
	Nickname            pgtype.Text        `json:"nickname"`
	Currency            string             `json:"currency"`
	UnitAmountInPennies int32              `json:"unit_amount_in_pennies"`
	IntervalType        IntervalType       `json:"interval_type"`
	TermLength          int32              `json:"term_length"`
	Metadata            []byte             `json:"metadata"`
	PaymentSyncStatus   pgtype.Text        `json:"payment_sync_status"`
	PaymentSyncedAt     pgtype.Timestamptz `json:"payment_synced_at"`
	PaymentSyncVersion  pgtype.Int4        `json:"payment_sync_version"`
	PaymentProvider     pgtype.Text        `json:"payment_provider"`
	CreatedAt           pgtype.Timestamptz `json:"created_at"`
	UpdatedAt           pgtype.Timestamptz `json:"updated_at"`
	DeletedAt           pgtype.Timestamptz `json:"deleted_at"`
}

type Product struct {
	ID                 uuid.UUID          `json:"id"`
	WorkspaceID        uuid.UUID          `json:"workspace_id"`
	WalletID           uuid.UUID          `json:"wallet_id"`
	ExternalID         pgtype.Text        `json:"external_id"`
	Name               string             `json:"name"`
	Description        pgtype.Text        `json:"description"`
	ImageUrl           pgtype.Text        `json:"image_url"`
	Url                pgtype.Text        `json:"url"`
	Active             bool               `json:"active"`
	Metadata           []byte             `json:"metadata"`
	PaymentSyncStatus  pgtype.Text        `json:"payment_sync_status"`
	PaymentSyncedAt    pgtype.Timestamptz `json:"payment_synced_at"`
	PaymentSyncVersion pgtype.Int4        `json:"payment_sync_version"`
	PaymentProvider    pgtype.Text        `json:"payment_provider"`
	CreatedAt          pgtype.Timestamptz `json:"created_at"`
	UpdatedAt          pgtype.Timestamptz `json:"updated_at"`
	DeletedAt          pgtype.Timestamptz `json:"deleted_at"`
}

type ProductsToken struct {
	ID        uuid.UUID          `json:"id"`
	ProductID uuid.UUID          `json:"product_id"`
	NetworkID uuid.UUID          `json:"network_id"`
	TokenID   uuid.UUID          `json:"token_id"`
	Active    bool               `json:"active"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	DeletedAt pgtype.Timestamptz `json:"deleted_at"`
}

type Subscription struct {
	ID                 uuid.UUID          `json:"id"`
	NumID              int64              `json:"num_id"`
	CustomerID         uuid.UUID          `json:"customer_id"`
	ProductID          uuid.UUID          `json:"product_id"`
	WorkspaceID        uuid.UUID          `json:"workspace_id"`
	PriceID            uuid.UUID          `json:"price_id"`
	ProductTokenID     uuid.UUID          `json:"product_token_id"`
	ExternalID         pgtype.Text        `json:"external_id"`
	TokenAmount        int32              `json:"token_amount"`
	DelegationID       uuid.UUID          `json:"delegation_id"`
	CustomerWalletID   pgtype.UUID        `json:"customer_wallet_id"`
	Status             SubscriptionStatus `json:"status"`
	CurrentPeriodStart pgtype.Timestamptz `json:"current_period_start"`
	CurrentPeriodEnd   pgtype.Timestamptz `json:"current_period_end"`
	NextRedemptionDate pgtype.Timestamptz `json:"next_redemption_date"`
	TotalRedemptions   int32              `json:"total_redemptions"`
	TotalAmountInCents int32              `json:"total_amount_in_cents"`
	Metadata           []byte             `json:"metadata"`
	PaymentSyncStatus  pgtype.Text        `json:"payment_sync_status"`
	PaymentSyncedAt    pgtype.Timestamptz `json:"payment_synced_at"`
	PaymentSyncVersion pgtype.Int4        `json:"payment_sync_version"`
	PaymentProvider    pgtype.Text        `json:"payment_provider"`
	CreatedAt          pgtype.Timestamptz `json:"created_at"`
	UpdatedAt          pgtype.Timestamptz `json:"updated_at"`
	DeletedAt          pgtype.Timestamptz `json:"deleted_at"`
	CancelAt           pgtype.Timestamptz `json:"cancel_at"`
	CancelledAt        pgtype.Timestamptz `json:"cancelled_at"`
	CancellationReason pgtype.Text        `json:"cancellation_reason"`
	PausedAt           pgtype.Timestamptz `json:"paused_at"`
	PauseEndsAt        pgtype.Timestamptz `json:"pause_ends_at"`
	TrialStart         pgtype.Timestamptz `json:"trial_start"`
	TrialEnd           pgtype.Timestamptz `json:"trial_end"`
}

type SubscriptionEvent struct {
	ID              uuid.UUID             `json:"id"`
	SubscriptionID  uuid.UUID             `json:"subscription_id"`
	EventType       SubscriptionEventType `json:"event_type"`
	TransactionHash pgtype.Text           `json:"transaction_hash"`
	AmountInCents   int32                 `json:"amount_in_cents"`
	OccurredAt      pgtype.Timestamptz    `json:"occurred_at"`
	ErrorMessage    pgtype.Text           `json:"error_message"`
	Metadata        []byte                `json:"metadata"`
	CreatedAt       pgtype.Timestamptz    `json:"created_at"`
	UpdatedAt       pgtype.Timestamptz    `json:"updated_at"`
}

type SubscriptionProration struct {
	ID                  uuid.UUID          `json:"id"`
	SubscriptionID      uuid.UUID          `json:"subscription_id"`
	ScheduleChangeID    pgtype.UUID        `json:"schedule_change_id"`
	ProrationType       string             `json:"proration_type"`
	PeriodStart         pgtype.Timestamptz `json:"period_start"`
	PeriodEnd           pgtype.Timestamptz `json:"period_end"`
	DaysTotal           int32              `json:"days_total"`
	DaysUsed            int32              `json:"days_used"`
	DaysRemaining       int32              `json:"days_remaining"`
	OriginalAmountCents int64              `json:"original_amount_cents"`
	UsedAmountCents     int64              `json:"used_amount_cents"`
	CreditAmountCents   int64              `json:"credit_amount_cents"`
	AppliedToInvoiceID  pgtype.UUID        `json:"applied_to_invoice_id"`
	AppliedToPaymentID  pgtype.UUID        `json:"applied_to_payment_id"`
	CreatedAt           pgtype.Timestamptz `json:"created_at"`
}

type SubscriptionScheduleChange struct {
	ID                   uuid.UUID          `json:"id"`
	SubscriptionID       uuid.UUID          `json:"subscription_id"`
	ChangeType           string             `json:"change_type"`
	ScheduledFor         pgtype.Timestamptz `json:"scheduled_for"`
	FromLineItems        []byte             `json:"from_line_items"`
	ToLineItems          []byte             `json:"to_line_items"`
	ProrationAmountCents pgtype.Int8        `json:"proration_amount_cents"`
	ProrationCalculation []byte             `json:"proration_calculation"`
	Status               string             `json:"status"`
	ProcessedAt          pgtype.Timestamptz `json:"processed_at"`
	ErrorMessage         pgtype.Text        `json:"error_message"`
	Reason               pgtype.Text        `json:"reason"`
	InitiatedBy          pgtype.Text        `json:"initiated_by"`
	Metadata             []byte             `json:"metadata"`
	CreatedAt            pgtype.Timestamptz `json:"created_at"`
	UpdatedAt            pgtype.Timestamptz `json:"updated_at"`
}

type SubscriptionStateHistory struct {
	ID                uuid.UUID              `json:"id"`
	SubscriptionID    uuid.UUID              `json:"subscription_id"`
	FromStatus        NullSubscriptionStatus `json:"from_status"`
	ToStatus          SubscriptionStatus     `json:"to_status"`
	FromAmountCents   pgtype.Int8            `json:"from_amount_cents"`
	ToAmountCents     pgtype.Int8            `json:"to_amount_cents"`
	LineItemsSnapshot []byte                 `json:"line_items_snapshot"`
	ChangeReason      pgtype.Text            `json:"change_reason"`
	ScheduleChangeID  pgtype.UUID            `json:"schedule_change_id"`
	InitiatedBy       pgtype.Text            `json:"initiated_by"`
	OccurredAt        pgtype.Timestamptz     `json:"occurred_at"`
}

type Token struct {
	ID              uuid.UUID          `json:"id"`
	NetworkID       uuid.UUID          `json:"network_id"`
	GasToken        bool               `json:"gas_token"`
	Name            string             `json:"name"`
	Symbol          string             `json:"symbol"`
	ContractAddress string             `json:"contract_address"`
	Active          bool               `json:"active"`
	Decimals        int32              `json:"decimals"`
	CreatedAt       pgtype.Timestamptz `json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `json:"updated_at"`
	DeletedAt       pgtype.Timestamptz `json:"deleted_at"`
}

type User struct {
	ID                 uuid.UUID          `json:"id"`
	Web3authID         pgtype.Text        `json:"web3auth_id"`
	Verifier           pgtype.Text        `json:"verifier"`
	VerifierID         pgtype.Text        `json:"verifier_id"`
	Email              string             `json:"email"`
	AccountID          uuid.UUID          `json:"account_id"`
	Role               UserRole           `json:"role"`
	IsAccountOwner     pgtype.Bool        `json:"is_account_owner"`
	FirstName          pgtype.Text        `json:"first_name"`
	LastName           pgtype.Text        `json:"last_name"`
	AddressLine1       pgtype.Text        `json:"address_line_1"`
	AddressLine2       pgtype.Text        `json:"address_line_2"`
	City               pgtype.Text        `json:"city"`
	StateRegion        pgtype.Text        `json:"state_region"`
	PostalCode         pgtype.Text        `json:"postal_code"`
	Country            pgtype.Text        `json:"country"`
	DisplayName        pgtype.Text        `json:"display_name"`
	PictureUrl         pgtype.Text        `json:"picture_url"`
	Phone              pgtype.Text        `json:"phone"`
	Timezone           pgtype.Text        `json:"timezone"`
	Locale             pgtype.Text        `json:"locale"`
	LastLoginAt        pgtype.Timestamptz `json:"last_login_at"`
	EmailVerified      pgtype.Bool        `json:"email_verified"`
	TwoFactorEnabled   pgtype.Bool        `json:"two_factor_enabled"`
	FinishedOnboarding pgtype.Bool        `json:"finished_onboarding"`
	Status             NullUserStatus     `json:"status"`
	Metadata           []byte             `json:"metadata"`
	CreatedAt          pgtype.Timestamptz `json:"created_at"`
	UpdatedAt          pgtype.Timestamptz `json:"updated_at"`
	DeletedAt          pgtype.Timestamptz `json:"deleted_at"`
}

type Wallet struct {
	ID               uuid.UUID          `json:"id"`
	WorkspaceID      uuid.UUID          `json:"workspace_id"`
	WalletType       string             `json:"wallet_type"`
	WalletAddress    string             `json:"wallet_address"`
	NetworkType      NetworkType        `json:"network_type"`
	NetworkID        pgtype.UUID        `json:"network_id"`
	Nickname         pgtype.Text        `json:"nickname"`
	Ens              pgtype.Text        `json:"ens"`
	IsPrimary        pgtype.Bool        `json:"is_primary"`
	Verified         pgtype.Bool        `json:"verified"`
	LastUsedAt       pgtype.Timestamptz `json:"last_used_at"`
	Web3authUserID   pgtype.Text        `json:"web3auth_user_id"`
	SmartAccountType pgtype.Text        `json:"smart_account_type"`
	DeploymentStatus pgtype.Text        `json:"deployment_status"`
	Metadata         []byte             `json:"metadata"`
	CreatedAt        pgtype.Timestamptz `json:"created_at"`
	UpdatedAt        pgtype.Timestamptz `json:"updated_at"`
	DeletedAt        pgtype.Timestamptz `json:"deleted_at"`
}

type Workspace struct {
	ID                  uuid.UUID          `json:"id"`
	AccountID           uuid.UUID          `json:"account_id"`
	Name                string             `json:"name"`
	Description         pgtype.Text        `json:"description"`
	BusinessName        pgtype.Text        `json:"business_name"`
	BusinessType        pgtype.Text        `json:"business_type"`
	WebsiteUrl          pgtype.Text        `json:"website_url"`
	SupportEmail        pgtype.Text        `json:"support_email"`
	SupportPhone        pgtype.Text        `json:"support_phone"`
	Metadata            []byte             `json:"metadata"`
	Livemode            pgtype.Bool        `json:"livemode"`
	DefaultCurrency     pgtype.Text        `json:"default_currency"`
	SupportedCurrencies []byte             `json:"supported_currencies"`
	CreatedAt           pgtype.Timestamptz `json:"created_at"`
	UpdatedAt           pgtype.Timestamptz `json:"updated_at"`
	DeletedAt           pgtype.Timestamptz `json:"deleted_at"`
}

type WorkspaceCustomer struct {
	ID          uuid.UUID          `json:"id"`
	WorkspaceID uuid.UUID          `json:"workspace_id"`
	CustomerID  uuid.UUID          `json:"customer_id"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	DeletedAt   pgtype.Timestamptz `json:"deleted_at"`
}

type WorkspacePaymentConfiguration struct {
	ID                 uuid.UUID          `json:"id"`
	WorkspaceID        uuid.UUID          `json:"workspace_id"`
	ProviderName       string             `json:"provider_name"`
	IsActive           bool               `json:"is_active"`
	IsTestMode         bool               `json:"is_test_mode"`
	Configuration      json.RawMessage    `json:"configuration"`
	WebhookEndpointUrl pgtype.Text        `json:"webhook_endpoint_url"`
	WebhookSecretKey   pgtype.Text        `json:"webhook_secret_key"`
	ConnectedAccountID pgtype.Text        `json:"connected_account_id"`
	LastSyncAt         pgtype.Timestamptz `json:"last_sync_at"`
	LastWebhookAt      pgtype.Timestamptz `json:"last_webhook_at"`
	Metadata           []byte             `json:"metadata"`
	CreatedAt          pgtype.Timestamptz `json:"created_at"`
	UpdatedAt          pgtype.Timestamptz `json:"updated_at"`
	DeletedAt          pgtype.Timestamptz `json:"deleted_at"`
}

type WorkspaceProviderAccount struct {
	ID                uuid.UUID          `json:"id"`
	WorkspaceID       uuid.UUID          `json:"workspace_id"`
	ProviderName      string             `json:"provider_name"`
	ProviderAccountID string             `json:"provider_account_id"`
	AccountType       string             `json:"account_type"`
	IsActive          bool               `json:"is_active"`
	Environment       string             `json:"environment"`
	DisplayName       pgtype.Text        `json:"display_name"`
	Metadata          []byte             `json:"metadata"`
	CreatedAt         pgtype.Timestamptz `json:"created_at"`
	UpdatedAt         pgtype.Timestamptz `json:"updated_at"`
	DeletedAt         pgtype.Timestamptz `json:"deleted_at"`
}
