// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: products.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const activateProduct = `-- name: ActivateProduct :one
UPDATE products
SET 
    active = true,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, workspace_id, wallet_id, external_id, name, description, image_url, url, active, product_type, product_group, price_type, currency, unit_amount_in_pennies, interval_type, term_length, price_nickname, price_external_id, metadata, payment_sync_status, payment_synced_at, payment_sync_version, payment_provider, created_at, updated_at, deleted_at
`

func (q *Queries) ActivateProduct(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.db.QueryRow(ctx, activateProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.WalletID,
		&i.ExternalID,
		&i.Name,
		&i.Description,
		&i.ImageUrl,
		&i.Url,
		&i.Active,
		&i.ProductType,
		&i.ProductGroup,
		&i.PriceType,
		&i.Currency,
		&i.UnitAmountInPennies,
		&i.IntervalType,
		&i.TermLength,
		&i.PriceNickname,
		&i.PriceExternalID,
		&i.Metadata,
		&i.PaymentSyncStatus,
		&i.PaymentSyncedAt,
		&i.PaymentSyncVersion,
		&i.PaymentProvider,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const countProducts = `-- name: CountProducts :one
SELECT COUNT(*) FROM products
WHERE workspace_id = $1 AND deleted_at IS NULL
`

func (q *Queries) CountProducts(ctx context.Context, workspaceID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countProducts, workspaceID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
    workspace_id,
    wallet_id,
    name,
    description,
    image_url,
    url,
    active,
    product_type,
    product_group,
    price_type,
    currency,
    unit_amount_in_pennies,
    interval_type,
    term_length,
    price_nickname,
    price_external_id,
    metadata,
    payment_sync_status,
    payment_provider
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17,
    COALESCE($18, 'pending'),
    $19
)
RETURNING id, workspace_id, wallet_id, external_id, name, description, image_url, url, active, product_type, product_group, price_type, currency, unit_amount_in_pennies, interval_type, term_length, price_nickname, price_external_id, metadata, payment_sync_status, payment_synced_at, payment_sync_version, payment_provider, created_at, updated_at, deleted_at
`

type CreateProductParams struct {
	WorkspaceID         uuid.UUID        `json:"workspace_id"`
	WalletID            uuid.UUID        `json:"wallet_id"`
	Name                string           `json:"name"`
	Description         pgtype.Text      `json:"description"`
	ImageUrl            pgtype.Text      `json:"image_url"`
	Url                 pgtype.Text      `json:"url"`
	Active              bool             `json:"active"`
	ProductType         pgtype.Text      `json:"product_type"`
	ProductGroup        pgtype.Text      `json:"product_group"`
	PriceType           PriceType        `json:"price_type"`
	Currency            string           `json:"currency"`
	UnitAmountInPennies int32            `json:"unit_amount_in_pennies"`
	IntervalType        NullIntervalType `json:"interval_type"`
	TermLength          pgtype.Int4      `json:"term_length"`
	PriceNickname       pgtype.Text      `json:"price_nickname"`
	PriceExternalID     pgtype.Text      `json:"price_external_id"`
	Metadata            []byte           `json:"metadata"`
	Column18            interface{}      `json:"column_18"`
	PaymentProvider     pgtype.Text      `json:"payment_provider"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.WorkspaceID,
		arg.WalletID,
		arg.Name,
		arg.Description,
		arg.ImageUrl,
		arg.Url,
		arg.Active,
		arg.ProductType,
		arg.ProductGroup,
		arg.PriceType,
		arg.Currency,
		arg.UnitAmountInPennies,
		arg.IntervalType,
		arg.TermLength,
		arg.PriceNickname,
		arg.PriceExternalID,
		arg.Metadata,
		arg.Column18,
		arg.PaymentProvider,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.WalletID,
		&i.ExternalID,
		&i.Name,
		&i.Description,
		&i.ImageUrl,
		&i.Url,
		&i.Active,
		&i.ProductType,
		&i.ProductGroup,
		&i.PriceType,
		&i.Currency,
		&i.UnitAmountInPennies,
		&i.IntervalType,
		&i.TermLength,
		&i.PriceNickname,
		&i.PriceExternalID,
		&i.Metadata,
		&i.PaymentSyncStatus,
		&i.PaymentSyncedAt,
		&i.PaymentSyncVersion,
		&i.PaymentProvider,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createProductWithSync = `-- name: CreateProductWithSync :one
INSERT INTO products (
    workspace_id,
    wallet_id,
    external_id,
    name,
    description,
    image_url,
    url,
    active,
    product_type,
    product_group,
    price_type,
    currency,
    unit_amount_in_pennies,
    interval_type,
    term_length,
    price_nickname,
    price_external_id,
    metadata,
    payment_sync_status,
    payment_synced_at,
    payment_sync_version,
    payment_provider
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22
)
RETURNING id, workspace_id, wallet_id, external_id, name, description, image_url, url, active, product_type, product_group, price_type, currency, unit_amount_in_pennies, interval_type, term_length, price_nickname, price_external_id, metadata, payment_sync_status, payment_synced_at, payment_sync_version, payment_provider, created_at, updated_at, deleted_at
`

type CreateProductWithSyncParams struct {
	WorkspaceID         uuid.UUID          `json:"workspace_id"`
	WalletID            uuid.UUID          `json:"wallet_id"`
	ExternalID          pgtype.Text        `json:"external_id"`
	Name                string             `json:"name"`
	Description         pgtype.Text        `json:"description"`
	ImageUrl            pgtype.Text        `json:"image_url"`
	Url                 pgtype.Text        `json:"url"`
	Active              bool               `json:"active"`
	ProductType         pgtype.Text        `json:"product_type"`
	ProductGroup        pgtype.Text        `json:"product_group"`
	PriceType           PriceType          `json:"price_type"`
	Currency            string             `json:"currency"`
	UnitAmountInPennies int32              `json:"unit_amount_in_pennies"`
	IntervalType        NullIntervalType   `json:"interval_type"`
	TermLength          pgtype.Int4        `json:"term_length"`
	PriceNickname       pgtype.Text        `json:"price_nickname"`
	PriceExternalID     pgtype.Text        `json:"price_external_id"`
	Metadata            []byte             `json:"metadata"`
	PaymentSyncStatus   pgtype.Text        `json:"payment_sync_status"`
	PaymentSyncedAt     pgtype.Timestamptz `json:"payment_synced_at"`
	PaymentSyncVersion  pgtype.Int4        `json:"payment_sync_version"`
	PaymentProvider     pgtype.Text        `json:"payment_provider"`
}

func (q *Queries) CreateProductWithSync(ctx context.Context, arg CreateProductWithSyncParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProductWithSync,
		arg.WorkspaceID,
		arg.WalletID,
		arg.ExternalID,
		arg.Name,
		arg.Description,
		arg.ImageUrl,
		arg.Url,
		arg.Active,
		arg.ProductType,
		arg.ProductGroup,
		arg.PriceType,
		arg.Currency,
		arg.UnitAmountInPennies,
		arg.IntervalType,
		arg.TermLength,
		arg.PriceNickname,
		arg.PriceExternalID,
		arg.Metadata,
		arg.PaymentSyncStatus,
		arg.PaymentSyncedAt,
		arg.PaymentSyncVersion,
		arg.PaymentProvider,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.WalletID,
		&i.ExternalID,
		&i.Name,
		&i.Description,
		&i.ImageUrl,
		&i.Url,
		&i.Active,
		&i.ProductType,
		&i.ProductGroup,
		&i.PriceType,
		&i.Currency,
		&i.UnitAmountInPennies,
		&i.IntervalType,
		&i.TermLength,
		&i.PriceNickname,
		&i.PriceExternalID,
		&i.Metadata,
		&i.PaymentSyncStatus,
		&i.PaymentSyncedAt,
		&i.PaymentSyncVersion,
		&i.PaymentProvider,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deactivateProduct = `-- name: DeactivateProduct :one
UPDATE products
SET 
    active = false,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, workspace_id, wallet_id, external_id, name, description, image_url, url, active, product_type, product_group, price_type, currency, unit_amount_in_pennies, interval_type, term_length, price_nickname, price_external_id, metadata, payment_sync_status, payment_synced_at, payment_sync_version, payment_provider, created_at, updated_at, deleted_at
`

func (q *Queries) DeactivateProduct(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.db.QueryRow(ctx, deactivateProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.WalletID,
		&i.ExternalID,
		&i.Name,
		&i.Description,
		&i.ImageUrl,
		&i.Url,
		&i.Active,
		&i.ProductType,
		&i.ProductGroup,
		&i.PriceType,
		&i.Currency,
		&i.UnitAmountInPennies,
		&i.IntervalType,
		&i.TermLength,
		&i.PriceNickname,
		&i.PriceExternalID,
		&i.Metadata,
		&i.PaymentSyncStatus,
		&i.PaymentSyncedAt,
		&i.PaymentSyncVersion,
		&i.PaymentProvider,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
UPDATE products
SET deleted_at = CURRENT_TIMESTAMP
WHERE id = $1 AND workspace_id = $2 AND deleted_at IS NULL
`

type DeleteProductParams struct {
	ID          uuid.UUID `json:"id"`
	WorkspaceID uuid.UUID `json:"workspace_id"`
}

func (q *Queries) DeleteProduct(ctx context.Context, arg DeleteProductParams) error {
	_, err := q.db.Exec(ctx, deleteProduct, arg.ID, arg.WorkspaceID)
	return err
}

const getActiveProductsByWalletID = `-- name: GetActiveProductsByWalletID :many
SELECT id, workspace_id, wallet_id, external_id, name, description, image_url, url, active, product_type, product_group, price_type, currency, unit_amount_in_pennies, interval_type, term_length, price_nickname, price_external_id, metadata, payment_sync_status, payment_synced_at, payment_sync_version, payment_provider, created_at, updated_at, deleted_at FROM products
WHERE wallet_id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetActiveProductsByWalletID(ctx context.Context, walletID uuid.UUID) ([]Product, error) {
	rows, err := q.db.Query(ctx, getActiveProductsByWalletID, walletID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.WalletID,
			&i.ExternalID,
			&i.Name,
			&i.Description,
			&i.ImageUrl,
			&i.Url,
			&i.Active,
			&i.ProductType,
			&i.ProductGroup,
			&i.PriceType,
			&i.Currency,
			&i.UnitAmountInPennies,
			&i.IntervalType,
			&i.TermLength,
			&i.PriceNickname,
			&i.PriceExternalID,
			&i.Metadata,
			&i.PaymentSyncStatus,
			&i.PaymentSyncedAt,
			&i.PaymentSyncVersion,
			&i.PaymentProvider,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAddonProducts = `-- name: GetAddonProducts :many
SELECT id, workspace_id, wallet_id, external_id, name, description, image_url, url, active, product_type, product_group, price_type, currency, unit_amount_in_pennies, interval_type, term_length, price_nickname, price_external_id, metadata, payment_sync_status, payment_synced_at, payment_sync_version, payment_provider, created_at, updated_at, deleted_at FROM products
WHERE workspace_id = $1 
  AND product_type = 'addon'
  AND active = true
  AND deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) GetAddonProducts(ctx context.Context, workspaceID uuid.UUID) ([]Product, error) {
	rows, err := q.db.Query(ctx, getAddonProducts, workspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.WalletID,
			&i.ExternalID,
			&i.Name,
			&i.Description,
			&i.ImageUrl,
			&i.Url,
			&i.Active,
			&i.ProductType,
			&i.ProductGroup,
			&i.PriceType,
			&i.Currency,
			&i.UnitAmountInPennies,
			&i.IntervalType,
			&i.TermLength,
			&i.PriceNickname,
			&i.PriceExternalID,
			&i.Metadata,
			&i.PaymentSyncStatus,
			&i.PaymentSyncedAt,
			&i.PaymentSyncVersion,
			&i.PaymentProvider,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBaseProducts = `-- name: GetBaseProducts :many
SELECT id, workspace_id, wallet_id, external_id, name, description, image_url, url, active, product_type, product_group, price_type, currency, unit_amount_in_pennies, interval_type, term_length, price_nickname, price_external_id, metadata, payment_sync_status, payment_synced_at, payment_sync_version, payment_provider, created_at, updated_at, deleted_at FROM products
WHERE workspace_id = $1 
  AND product_type = 'base'
  AND active = true
  AND deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) GetBaseProducts(ctx context.Context, workspaceID uuid.UUID) ([]Product, error) {
	rows, err := q.db.Query(ctx, getBaseProducts, workspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.WalletID,
			&i.ExternalID,
			&i.Name,
			&i.Description,
			&i.ImageUrl,
			&i.Url,
			&i.Active,
			&i.ProductType,
			&i.ProductGroup,
			&i.PriceType,
			&i.Currency,
			&i.UnitAmountInPennies,
			&i.IntervalType,
			&i.TermLength,
			&i.PriceNickname,
			&i.PriceExternalID,
			&i.Metadata,
			&i.PaymentSyncStatus,
			&i.PaymentSyncedAt,
			&i.PaymentSyncVersion,
			&i.PaymentProvider,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProduct = `-- name: GetProduct :one
SELECT id, workspace_id, wallet_id, external_id, name, description, image_url, url, active, product_type, product_group, price_type, currency, unit_amount_in_pennies, interval_type, term_length, price_nickname, price_external_id, metadata, payment_sync_status, payment_synced_at, payment_sync_version, payment_provider, created_at, updated_at, deleted_at FROM products
WHERE id = $1 AND workspace_id = $2 AND deleted_at IS NULL LIMIT 1
`

type GetProductParams struct {
	ID          uuid.UUID `json:"id"`
	WorkspaceID uuid.UUID `json:"workspace_id"`
}

func (q *Queries) GetProduct(ctx context.Context, arg GetProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, getProduct, arg.ID, arg.WorkspaceID)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.WalletID,
		&i.ExternalID,
		&i.Name,
		&i.Description,
		&i.ImageUrl,
		&i.Url,
		&i.Active,
		&i.ProductType,
		&i.ProductGroup,
		&i.PriceType,
		&i.Currency,
		&i.UnitAmountInPennies,
		&i.IntervalType,
		&i.TermLength,
		&i.PriceNickname,
		&i.PriceExternalID,
		&i.Metadata,
		&i.PaymentSyncStatus,
		&i.PaymentSyncedAt,
		&i.PaymentSyncVersion,
		&i.PaymentProvider,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getProductByExternalID = `-- name: GetProductByExternalID :one
SELECT p.id, p.workspace_id, p.wallet_id, p.external_id, p.name, p.description, p.image_url, p.url, p.active, p.product_type, p.product_group, p.price_type, p.currency, p.unit_amount_in_pennies, p.interval_type, p.term_length, p.price_nickname, p.price_external_id, p.metadata, p.payment_sync_status, p.payment_synced_at, p.payment_sync_version, p.payment_provider, p.created_at, p.updated_at, p.deleted_at FROM products p
WHERE p.workspace_id = $1 
  AND p.external_id = $2
  AND p.payment_provider = $3
  AND p.deleted_at IS NULL
`

type GetProductByExternalIDParams struct {
	WorkspaceID     uuid.UUID   `json:"workspace_id"`
	ExternalID      pgtype.Text `json:"external_id"`
	PaymentProvider pgtype.Text `json:"payment_provider"`
}

func (q *Queries) GetProductByExternalID(ctx context.Context, arg GetProductByExternalIDParams) (Product, error) {
	row := q.db.QueryRow(ctx, getProductByExternalID, arg.WorkspaceID, arg.ExternalID, arg.PaymentProvider)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.WalletID,
		&i.ExternalID,
		&i.Name,
		&i.Description,
		&i.ImageUrl,
		&i.Url,
		&i.Active,
		&i.ProductType,
		&i.ProductGroup,
		&i.PriceType,
		&i.Currency,
		&i.UnitAmountInPennies,
		&i.IntervalType,
		&i.TermLength,
		&i.PriceNickname,
		&i.PriceExternalID,
		&i.Metadata,
		&i.PaymentSyncStatus,
		&i.PaymentSyncedAt,
		&i.PaymentSyncVersion,
		&i.PaymentProvider,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getProductWithoutWorkspaceId = `-- name: GetProductWithoutWorkspaceId :one
SELECT id, workspace_id, wallet_id, external_id, name, description, image_url, url, active, product_type, product_group, price_type, currency, unit_amount_in_pennies, interval_type, term_length, price_nickname, price_external_id, metadata, payment_sync_status, payment_synced_at, payment_sync_version, payment_provider, created_at, updated_at, deleted_at FROM products
WHERE id = $1 AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) GetProductWithoutWorkspaceId(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.db.QueryRow(ctx, getProductWithoutWorkspaceId, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.WalletID,
		&i.ExternalID,
		&i.Name,
		&i.Description,
		&i.ImageUrl,
		&i.Url,
		&i.Active,
		&i.ProductType,
		&i.ProductGroup,
		&i.PriceType,
		&i.Currency,
		&i.UnitAmountInPennies,
		&i.IntervalType,
		&i.TermLength,
		&i.PriceNickname,
		&i.PriceExternalID,
		&i.Metadata,
		&i.PaymentSyncStatus,
		&i.PaymentSyncedAt,
		&i.PaymentSyncVersion,
		&i.PaymentProvider,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getProductsByGroup = `-- name: GetProductsByGroup :many
SELECT id, workspace_id, wallet_id, external_id, name, description, image_url, url, active, product_type, product_group, price_type, currency, unit_amount_in_pennies, interval_type, term_length, price_nickname, price_external_id, metadata, payment_sync_status, payment_synced_at, payment_sync_version, payment_provider, created_at, updated_at, deleted_at FROM products
WHERE workspace_id = $1 
  AND product_group = $2
  AND deleted_at IS NULL
ORDER BY created_at DESC
`

type GetProductsByGroupParams struct {
	WorkspaceID  uuid.UUID   `json:"workspace_id"`
	ProductGroup pgtype.Text `json:"product_group"`
}

func (q *Queries) GetProductsByGroup(ctx context.Context, arg GetProductsByGroupParams) ([]Product, error) {
	rows, err := q.db.Query(ctx, getProductsByGroup, arg.WorkspaceID, arg.ProductGroup)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.WalletID,
			&i.ExternalID,
			&i.Name,
			&i.Description,
			&i.ImageUrl,
			&i.Url,
			&i.Active,
			&i.ProductType,
			&i.ProductGroup,
			&i.PriceType,
			&i.Currency,
			&i.UnitAmountInPennies,
			&i.IntervalType,
			&i.TermLength,
			&i.PriceNickname,
			&i.PriceExternalID,
			&i.Metadata,
			&i.PaymentSyncStatus,
			&i.PaymentSyncedAt,
			&i.PaymentSyncVersion,
			&i.PaymentProvider,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductsByType = `-- name: GetProductsByType :many
SELECT id, workspace_id, wallet_id, external_id, name, description, image_url, url, active, product_type, product_group, price_type, currency, unit_amount_in_pennies, interval_type, term_length, price_nickname, price_external_id, metadata, payment_sync_status, payment_synced_at, payment_sync_version, payment_provider, created_at, updated_at, deleted_at FROM products
WHERE workspace_id = $1 
  AND product_type = $2
  AND deleted_at IS NULL
ORDER BY created_at DESC
`

type GetProductsByTypeParams struct {
	WorkspaceID uuid.UUID   `json:"workspace_id"`
	ProductType pgtype.Text `json:"product_type"`
}

func (q *Queries) GetProductsByType(ctx context.Context, arg GetProductsByTypeParams) ([]Product, error) {
	rows, err := q.db.Query(ctx, getProductsByType, arg.WorkspaceID, arg.ProductType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.WalletID,
			&i.ExternalID,
			&i.Name,
			&i.Description,
			&i.ImageUrl,
			&i.Url,
			&i.Active,
			&i.ProductType,
			&i.ProductGroup,
			&i.PriceType,
			&i.Currency,
			&i.UnitAmountInPennies,
			&i.IntervalType,
			&i.TermLength,
			&i.PriceNickname,
			&i.PriceExternalID,
			&i.Metadata,
			&i.PaymentSyncStatus,
			&i.PaymentSyncedAt,
			&i.PaymentSyncVersion,
			&i.PaymentProvider,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductsNeedingSync = `-- name: GetProductsNeedingSync :many

SELECT id, workspace_id, wallet_id, external_id, name, description, image_url, url, active, product_type, product_group, price_type, currency, unit_amount_in_pennies, interval_type, term_length, price_nickname, price_external_id, metadata, payment_sync_status, payment_synced_at, payment_sync_version, payment_provider, created_at, updated_at, deleted_at FROM products 
WHERE workspace_id = $1 AND payment_sync_status = 'pending' AND deleted_at IS NULL
ORDER BY created_at ASC
`

// Payment Sync Related Product Queries
func (q *Queries) GetProductsNeedingSync(ctx context.Context, workspaceID uuid.UUID) ([]Product, error) {
	rows, err := q.db.Query(ctx, getProductsNeedingSync, workspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.WalletID,
			&i.ExternalID,
			&i.Name,
			&i.Description,
			&i.ImageUrl,
			&i.Url,
			&i.Active,
			&i.ProductType,
			&i.ProductGroup,
			&i.PriceType,
			&i.Currency,
			&i.UnitAmountInPennies,
			&i.IntervalType,
			&i.TermLength,
			&i.PriceNickname,
			&i.PriceExternalID,
			&i.Metadata,
			&i.PaymentSyncStatus,
			&i.PaymentSyncedAt,
			&i.PaymentSyncVersion,
			&i.PaymentProvider,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductsSyncedByProvider = `-- name: GetProductsSyncedByProvider :many
SELECT id, workspace_id, wallet_id, external_id, name, description, image_url, url, active, product_type, product_group, price_type, currency, unit_amount_in_pennies, interval_type, term_length, price_nickname, price_external_id, metadata, payment_sync_status, payment_synced_at, payment_sync_version, payment_provider, created_at, updated_at, deleted_at FROM products 
WHERE workspace_id = $1 AND payment_provider = $2 AND payment_sync_status != 'pending' AND deleted_at IS NULL
ORDER BY payment_synced_at DESC
`

type GetProductsSyncedByProviderParams struct {
	WorkspaceID     uuid.UUID   `json:"workspace_id"`
	PaymentProvider pgtype.Text `json:"payment_provider"`
}

func (q *Queries) GetProductsSyncedByProvider(ctx context.Context, arg GetProductsSyncedByProviderParams) ([]Product, error) {
	rows, err := q.db.Query(ctx, getProductsSyncedByProvider, arg.WorkspaceID, arg.PaymentProvider)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.WalletID,
			&i.ExternalID,
			&i.Name,
			&i.Description,
			&i.ImageUrl,
			&i.Url,
			&i.Active,
			&i.ProductType,
			&i.ProductGroup,
			&i.PriceType,
			&i.Currency,
			&i.UnitAmountInPennies,
			&i.IntervalType,
			&i.TermLength,
			&i.PriceNickname,
			&i.PriceExternalID,
			&i.Metadata,
			&i.PaymentSyncStatus,
			&i.PaymentSyncedAt,
			&i.PaymentSyncVersion,
			&i.PaymentProvider,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductsWithSyncConflicts = `-- name: GetProductsWithSyncConflicts :many
SELECT id, workspace_id, wallet_id, external_id, name, description, image_url, url, active, product_type, product_group, price_type, currency, unit_amount_in_pennies, interval_type, term_length, price_nickname, price_external_id, metadata, payment_sync_status, payment_synced_at, payment_sync_version, payment_provider, created_at, updated_at, deleted_at FROM products 
WHERE workspace_id = $1 AND payment_sync_status = 'conflict' AND deleted_at IS NULL
ORDER BY payment_synced_at DESC
`

func (q *Queries) GetProductsWithSyncConflicts(ctx context.Context, workspaceID uuid.UUID) ([]Product, error) {
	rows, err := q.db.Query(ctx, getProductsWithSyncConflicts, workspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.WalletID,
			&i.ExternalID,
			&i.Name,
			&i.Description,
			&i.ImageUrl,
			&i.Url,
			&i.Active,
			&i.ProductType,
			&i.ProductGroup,
			&i.PriceType,
			&i.Currency,
			&i.UnitAmountInPennies,
			&i.IntervalType,
			&i.TermLength,
			&i.PriceNickname,
			&i.PriceExternalID,
			&i.Metadata,
			&i.PaymentSyncStatus,
			&i.PaymentSyncedAt,
			&i.PaymentSyncVersion,
			&i.PaymentProvider,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listActiveProducts = `-- name: ListActiveProducts :many
SELECT id, workspace_id, wallet_id, external_id, name, description, image_url, url, active, product_type, product_group, price_type, currency, unit_amount_in_pennies, interval_type, term_length, price_nickname, price_external_id, metadata, payment_sync_status, payment_synced_at, payment_sync_version, payment_provider, created_at, updated_at, deleted_at FROM products
WHERE workspace_id = $1 AND active = true AND deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) ListActiveProducts(ctx context.Context, workspaceID uuid.UUID) ([]Product, error) {
	rows, err := q.db.Query(ctx, listActiveProducts, workspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.WalletID,
			&i.ExternalID,
			&i.Name,
			&i.Description,
			&i.ImageUrl,
			&i.Url,
			&i.Active,
			&i.ProductType,
			&i.ProductGroup,
			&i.PriceType,
			&i.Currency,
			&i.UnitAmountInPennies,
			&i.IntervalType,
			&i.TermLength,
			&i.PriceNickname,
			&i.PriceExternalID,
			&i.Metadata,
			&i.PaymentSyncStatus,
			&i.PaymentSyncedAt,
			&i.PaymentSyncVersion,
			&i.PaymentProvider,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProducts = `-- name: ListProducts :many
SELECT id, workspace_id, wallet_id, external_id, name, description, image_url, url, active, product_type, product_group, price_type, currency, unit_amount_in_pennies, interval_type, term_length, price_nickname, price_external_id, metadata, payment_sync_status, payment_synced_at, payment_sync_version, payment_provider, created_at, updated_at, deleted_at FROM products
WHERE workspace_id = $1 AND deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) ListProducts(ctx context.Context, workspaceID uuid.UUID) ([]Product, error) {
	rows, err := q.db.Query(ctx, listProducts, workspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.WalletID,
			&i.ExternalID,
			&i.Name,
			&i.Description,
			&i.ImageUrl,
			&i.Url,
			&i.Active,
			&i.ProductType,
			&i.ProductGroup,
			&i.PriceType,
			&i.Currency,
			&i.UnitAmountInPennies,
			&i.IntervalType,
			&i.TermLength,
			&i.PriceNickname,
			&i.PriceExternalID,
			&i.Metadata,
			&i.PaymentSyncStatus,
			&i.PaymentSyncedAt,
			&i.PaymentSyncVersion,
			&i.PaymentProvider,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductsWithPagination = `-- name: ListProductsWithPagination :many
SELECT id, workspace_id, wallet_id, external_id, name, description, image_url, url, active, product_type, product_group, price_type, currency, unit_amount_in_pennies, interval_type, term_length, price_nickname, price_external_id, metadata, payment_sync_status, payment_synced_at, payment_sync_version, payment_provider, created_at, updated_at, deleted_at FROM products
WHERE workspace_id = $1 AND deleted_at IS NULL
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListProductsWithPaginationParams struct {
	WorkspaceID uuid.UUID `json:"workspace_id"`
	Limit       int32     `json:"limit"`
	Offset      int32     `json:"offset"`
}

func (q *Queries) ListProductsWithPagination(ctx context.Context, arg ListProductsWithPaginationParams) ([]Product, error) {
	rows, err := q.db.Query(ctx, listProductsWithPagination, arg.WorkspaceID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.WalletID,
			&i.ExternalID,
			&i.Name,
			&i.Description,
			&i.ImageUrl,
			&i.Url,
			&i.Active,
			&i.ProductType,
			&i.ProductGroup,
			&i.PriceType,
			&i.Currency,
			&i.UnitAmountInPennies,
			&i.IntervalType,
			&i.TermLength,
			&i.PriceNickname,
			&i.PriceExternalID,
			&i.Metadata,
			&i.PaymentSyncStatus,
			&i.PaymentSyncedAt,
			&i.PaymentSyncVersion,
			&i.PaymentProvider,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET
    name = COALESCE($3, name),
    wallet_id = COALESCE($4, wallet_id),
    description = COALESCE($5, description),
    image_url = COALESCE($6, image_url),
    url = COALESCE($7, url),
    active = COALESCE($8, active),
    product_type = COALESCE($9, product_type),
    product_group = COALESCE($10, product_group),
    price_type = COALESCE($11, price_type),
    currency = COALESCE($12, currency),
    unit_amount_in_pennies = COALESCE($13, unit_amount_in_pennies),
    interval_type = COALESCE($14, interval_type),
    term_length = COALESCE($15, term_length),
    price_nickname = COALESCE($16, price_nickname),
    price_external_id = COALESCE($17, price_external_id),
    metadata = COALESCE($18, metadata),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND workspace_id = $2 AND deleted_at IS NULL
RETURNING id, workspace_id, wallet_id, external_id, name, description, image_url, url, active, product_type, product_group, price_type, currency, unit_amount_in_pennies, interval_type, term_length, price_nickname, price_external_id, metadata, payment_sync_status, payment_synced_at, payment_sync_version, payment_provider, created_at, updated_at, deleted_at
`

type UpdateProductParams struct {
	ID                  uuid.UUID        `json:"id"`
	WorkspaceID         uuid.UUID        `json:"workspace_id"`
	Name                string           `json:"name"`
	WalletID            uuid.UUID        `json:"wallet_id"`
	Description         pgtype.Text      `json:"description"`
	ImageUrl            pgtype.Text      `json:"image_url"`
	Url                 pgtype.Text      `json:"url"`
	Active              bool             `json:"active"`
	ProductType         pgtype.Text      `json:"product_type"`
	ProductGroup        pgtype.Text      `json:"product_group"`
	PriceType           PriceType        `json:"price_type"`
	Currency            string           `json:"currency"`
	UnitAmountInPennies int32            `json:"unit_amount_in_pennies"`
	IntervalType        NullIntervalType `json:"interval_type"`
	TermLength          pgtype.Int4      `json:"term_length"`
	PriceNickname       pgtype.Text      `json:"price_nickname"`
	PriceExternalID     pgtype.Text      `json:"price_external_id"`
	Metadata            []byte           `json:"metadata"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateProduct,
		arg.ID,
		arg.WorkspaceID,
		arg.Name,
		arg.WalletID,
		arg.Description,
		arg.ImageUrl,
		arg.Url,
		arg.Active,
		arg.ProductType,
		arg.ProductGroup,
		arg.PriceType,
		arg.Currency,
		arg.UnitAmountInPennies,
		arg.IntervalType,
		arg.TermLength,
		arg.PriceNickname,
		arg.PriceExternalID,
		arg.Metadata,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.WalletID,
		&i.ExternalID,
		&i.Name,
		&i.Description,
		&i.ImageUrl,
		&i.Url,
		&i.Active,
		&i.ProductType,
		&i.ProductGroup,
		&i.PriceType,
		&i.Currency,
		&i.UnitAmountInPennies,
		&i.IntervalType,
		&i.TermLength,
		&i.PriceNickname,
		&i.PriceExternalID,
		&i.Metadata,
		&i.PaymentSyncStatus,
		&i.PaymentSyncedAt,
		&i.PaymentSyncVersion,
		&i.PaymentProvider,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateProductPaymentSyncStatus = `-- name: UpdateProductPaymentSyncStatus :one
UPDATE products 
SET payment_sync_status = $3, 
    payment_synced_at = CASE WHEN $3 != 'pending' THEN CURRENT_TIMESTAMP ELSE payment_synced_at END,
    payment_sync_version = CASE WHEN $3 != 'pending' THEN payment_sync_version + 1 ELSE payment_sync_version END,
    payment_provider = COALESCE($4, payment_provider),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND workspace_id = $2 AND deleted_at IS NULL
RETURNING id, workspace_id, wallet_id, external_id, name, description, image_url, url, active, product_type, product_group, price_type, currency, unit_amount_in_pennies, interval_type, term_length, price_nickname, price_external_id, metadata, payment_sync_status, payment_synced_at, payment_sync_version, payment_provider, created_at, updated_at, deleted_at
`

type UpdateProductPaymentSyncStatusParams struct {
	ID                uuid.UUID   `json:"id"`
	WorkspaceID       uuid.UUID   `json:"workspace_id"`
	PaymentSyncStatus pgtype.Text `json:"payment_sync_status"`
	PaymentProvider   pgtype.Text `json:"payment_provider"`
}

func (q *Queries) UpdateProductPaymentSyncStatus(ctx context.Context, arg UpdateProductPaymentSyncStatusParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateProductPaymentSyncStatus,
		arg.ID,
		arg.WorkspaceID,
		arg.PaymentSyncStatus,
		arg.PaymentProvider,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.WalletID,
		&i.ExternalID,
		&i.Name,
		&i.Description,
		&i.ImageUrl,
		&i.Url,
		&i.Active,
		&i.ProductType,
		&i.ProductGroup,
		&i.PriceType,
		&i.Currency,
		&i.UnitAmountInPennies,
		&i.IntervalType,
		&i.TermLength,
		&i.PriceNickname,
		&i.PriceExternalID,
		&i.Metadata,
		&i.PaymentSyncStatus,
		&i.PaymentSyncedAt,
		&i.PaymentSyncVersion,
		&i.PaymentProvider,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateProductWithSync = `-- name: UpdateProductWithSync :one
UPDATE products
SET
    name = COALESCE($3, name),
    wallet_id = COALESCE($4, wallet_id),
    description = COALESCE($5, description),
    image_url = COALESCE($6, image_url),
    url = COALESCE($7, url),
    active = COALESCE($8, active),
    product_type = COALESCE($9, product_type),
    product_group = COALESCE($10, product_group),
    price_type = COALESCE($11, price_type),
    currency = COALESCE($12, currency),
    unit_amount_in_pennies = COALESCE($13, unit_amount_in_pennies),
    interval_type = COALESCE($14, interval_type),
    term_length = COALESCE($15, term_length),
    price_nickname = COALESCE($16, price_nickname),
    price_external_id = COALESCE($17, price_external_id),
    metadata = COALESCE($18, metadata),
    payment_sync_status = COALESCE($19, payment_sync_status),
    payment_synced_at = COALESCE($20, payment_synced_at),
    payment_sync_version = COALESCE($21, payment_sync_version),
    payment_provider = COALESCE($22, payment_provider),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND workspace_id = $2 AND deleted_at IS NULL
RETURNING id, workspace_id, wallet_id, external_id, name, description, image_url, url, active, product_type, product_group, price_type, currency, unit_amount_in_pennies, interval_type, term_length, price_nickname, price_external_id, metadata, payment_sync_status, payment_synced_at, payment_sync_version, payment_provider, created_at, updated_at, deleted_at
`

type UpdateProductWithSyncParams struct {
	ID                  uuid.UUID          `json:"id"`
	WorkspaceID         uuid.UUID          `json:"workspace_id"`
	Name                string             `json:"name"`
	WalletID            uuid.UUID          `json:"wallet_id"`
	Description         pgtype.Text        `json:"description"`
	ImageUrl            pgtype.Text        `json:"image_url"`
	Url                 pgtype.Text        `json:"url"`
	Active              bool               `json:"active"`
	ProductType         pgtype.Text        `json:"product_type"`
	ProductGroup        pgtype.Text        `json:"product_group"`
	PriceType           PriceType          `json:"price_type"`
	Currency            string             `json:"currency"`
	UnitAmountInPennies int32              `json:"unit_amount_in_pennies"`
	IntervalType        NullIntervalType   `json:"interval_type"`
	TermLength          pgtype.Int4        `json:"term_length"`
	PriceNickname       pgtype.Text        `json:"price_nickname"`
	PriceExternalID     pgtype.Text        `json:"price_external_id"`
	Metadata            []byte             `json:"metadata"`
	PaymentSyncStatus   pgtype.Text        `json:"payment_sync_status"`
	PaymentSyncedAt     pgtype.Timestamptz `json:"payment_synced_at"`
	PaymentSyncVersion  pgtype.Int4        `json:"payment_sync_version"`
	PaymentProvider     pgtype.Text        `json:"payment_provider"`
}

func (q *Queries) UpdateProductWithSync(ctx context.Context, arg UpdateProductWithSyncParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateProductWithSync,
		arg.ID,
		arg.WorkspaceID,
		arg.Name,
		arg.WalletID,
		arg.Description,
		arg.ImageUrl,
		arg.Url,
		arg.Active,
		arg.ProductType,
		arg.ProductGroup,
		arg.PriceType,
		arg.Currency,
		arg.UnitAmountInPennies,
		arg.IntervalType,
		arg.TermLength,
		arg.PriceNickname,
		arg.PriceExternalID,
		arg.Metadata,
		arg.PaymentSyncStatus,
		arg.PaymentSyncedAt,
		arg.PaymentSyncVersion,
		arg.PaymentProvider,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.WalletID,
		&i.ExternalID,
		&i.Name,
		&i.Description,
		&i.ImageUrl,
		&i.Url,
		&i.Active,
		&i.ProductType,
		&i.ProductGroup,
		&i.PriceType,
		&i.Currency,
		&i.UnitAmountInPennies,
		&i.IntervalType,
		&i.TermLength,
		&i.PriceNickname,
		&i.PriceExternalID,
		&i.Metadata,
		&i.PaymentSyncStatus,
		&i.PaymentSyncedAt,
		&i.PaymentSyncVersion,
		&i.PaymentProvider,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
