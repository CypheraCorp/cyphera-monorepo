// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: subscription_events.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countSubscriptionEventDetails = `-- name: CountSubscriptionEventDetails :one
SELECT COUNT(*) 
FROM subscription_events se
JOIN subscriptions s ON se.subscription_id = s.id
JOIN products p ON s.product_id = p.id
WHERE s.deleted_at IS NULL
    AND p.deleted_at IS NULL
    AND p.workspace_id = $1
    AND se.event_type IN ('redeemed', 'failed', 'failed_redemption')
`

func (q *Queries) CountSubscriptionEventDetails(ctx context.Context, workspaceID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countSubscriptionEventDetails, workspaceID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countSubscriptionEvents = `-- name: CountSubscriptionEvents :one
SELECT COUNT(*) FROM subscription_events
`

func (q *Queries) CountSubscriptionEvents(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countSubscriptionEvents)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countSubscriptionEventsBySubscription = `-- name: CountSubscriptionEventsBySubscription :one
SELECT COUNT(*) FROM subscription_events
WHERE subscription_id = $1
`

func (q *Queries) CountSubscriptionEventsBySubscription(ctx context.Context, subscriptionID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countSubscriptionEventsBySubscription, subscriptionID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countSubscriptionEventsByType = `-- name: CountSubscriptionEventsByType :one
SELECT COUNT(*) FROM subscription_events
WHERE event_type = $1
`

func (q *Queries) CountSubscriptionEventsByType(ctx context.Context, eventType SubscriptionEventType) (int64, error) {
	row := q.db.QueryRow(ctx, countSubscriptionEventsByType, eventType)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createFailedRedemptionEvent = `-- name: CreateFailedRedemptionEvent :one
INSERT INTO subscription_events (
    subscription_id,
    event_type,
    amount_in_cents,
    occurred_at,
    error_message,
    metadata
) VALUES (
    $1, 'failed', $2, CURRENT_TIMESTAMP, $3, $4
)
RETURNING id, subscription_id, event_type, transaction_hash, amount_in_cents, occurred_at, error_message, metadata, created_at, updated_at
`

type CreateFailedRedemptionEventParams struct {
	SubscriptionID uuid.UUID   `json:"subscription_id"`
	AmountInCents  int32       `json:"amount_in_cents"`
	ErrorMessage   pgtype.Text `json:"error_message"`
	Metadata       []byte      `json:"metadata"`
}

func (q *Queries) CreateFailedRedemptionEvent(ctx context.Context, arg CreateFailedRedemptionEventParams) (SubscriptionEvent, error) {
	row := q.db.QueryRow(ctx, createFailedRedemptionEvent,
		arg.SubscriptionID,
		arg.AmountInCents,
		arg.ErrorMessage,
		arg.Metadata,
	)
	var i SubscriptionEvent
	err := row.Scan(
		&i.ID,
		&i.SubscriptionID,
		&i.EventType,
		&i.TransactionHash,
		&i.AmountInCents,
		&i.OccurredAt,
		&i.ErrorMessage,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createRedemptionEvent = `-- name: CreateRedemptionEvent :one
INSERT INTO subscription_events (
    subscription_id,
    event_type,
    transaction_hash,
    amount_in_cents,
    occurred_at,
    metadata
) VALUES (
    $1, 'redeemed', $2, $3, CURRENT_TIMESTAMP, $4
)
RETURNING id, subscription_id, event_type, transaction_hash, amount_in_cents, occurred_at, error_message, metadata, created_at, updated_at
`

type CreateRedemptionEventParams struct {
	SubscriptionID  uuid.UUID   `json:"subscription_id"`
	TransactionHash pgtype.Text `json:"transaction_hash"`
	AmountInCents   int32       `json:"amount_in_cents"`
	Metadata        []byte      `json:"metadata"`
}

func (q *Queries) CreateRedemptionEvent(ctx context.Context, arg CreateRedemptionEventParams) (SubscriptionEvent, error) {
	row := q.db.QueryRow(ctx, createRedemptionEvent,
		arg.SubscriptionID,
		arg.TransactionHash,
		arg.AmountInCents,
		arg.Metadata,
	)
	var i SubscriptionEvent
	err := row.Scan(
		&i.ID,
		&i.SubscriptionID,
		&i.EventType,
		&i.TransactionHash,
		&i.AmountInCents,
		&i.OccurredAt,
		&i.ErrorMessage,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createSubscriptionEvent = `-- name: CreateSubscriptionEvent :one
INSERT INTO subscription_events (
    subscription_id,
    event_type,
    transaction_hash,
    amount_in_cents,
    occurred_at,
    error_message,
    metadata
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, subscription_id, event_type, transaction_hash, amount_in_cents, occurred_at, error_message, metadata, created_at, updated_at
`

type CreateSubscriptionEventParams struct {
	SubscriptionID  uuid.UUID             `json:"subscription_id"`
	EventType       SubscriptionEventType `json:"event_type"`
	TransactionHash pgtype.Text           `json:"transaction_hash"`
	AmountInCents   int32                 `json:"amount_in_cents"`
	OccurredAt      pgtype.Timestamptz    `json:"occurred_at"`
	ErrorMessage    pgtype.Text           `json:"error_message"`
	Metadata        []byte                `json:"metadata"`
}

func (q *Queries) CreateSubscriptionEvent(ctx context.Context, arg CreateSubscriptionEventParams) (SubscriptionEvent, error) {
	row := q.db.QueryRow(ctx, createSubscriptionEvent,
		arg.SubscriptionID,
		arg.EventType,
		arg.TransactionHash,
		arg.AmountInCents,
		arg.OccurredAt,
		arg.ErrorMessage,
		arg.Metadata,
	)
	var i SubscriptionEvent
	err := row.Scan(
		&i.ID,
		&i.SubscriptionID,
		&i.EventType,
		&i.TransactionHash,
		&i.AmountInCents,
		&i.OccurredAt,
		&i.ErrorMessage,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLatestSubscriptionEvent = `-- name: GetLatestSubscriptionEvent :one
SELECT id, subscription_id, event_type, transaction_hash, amount_in_cents, occurred_at, error_message, metadata, created_at, updated_at FROM subscription_events
WHERE subscription_id = $1
ORDER BY occurred_at DESC
LIMIT 1
`

func (q *Queries) GetLatestSubscriptionEvent(ctx context.Context, subscriptionID uuid.UUID) (SubscriptionEvent, error) {
	row := q.db.QueryRow(ctx, getLatestSubscriptionEvent, subscriptionID)
	var i SubscriptionEvent
	err := row.Scan(
		&i.ID,
		&i.SubscriptionID,
		&i.EventType,
		&i.TransactionHash,
		&i.AmountInCents,
		&i.OccurredAt,
		&i.ErrorMessage,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLatestSubscriptionEventByType = `-- name: GetLatestSubscriptionEventByType :many
SELECT id, subscription_id, event_type, transaction_hash, amount_in_cents, occurred_at, error_message, metadata, created_at, updated_at FROM subscription_events
WHERE subscription_id = $1 AND event_type = $2
ORDER BY occurred_at DESC
LIMIT 1
`

type GetLatestSubscriptionEventByTypeParams struct {
	SubscriptionID uuid.UUID             `json:"subscription_id"`
	EventType      SubscriptionEventType `json:"event_type"`
}

func (q *Queries) GetLatestSubscriptionEventByType(ctx context.Context, arg GetLatestSubscriptionEventByTypeParams) ([]SubscriptionEvent, error) {
	rows, err := q.db.Query(ctx, getLatestSubscriptionEventByType, arg.SubscriptionID, arg.EventType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SubscriptionEvent{}
	for rows.Next() {
		var i SubscriptionEvent
		if err := rows.Scan(
			&i.ID,
			&i.SubscriptionID,
			&i.EventType,
			&i.TransactionHash,
			&i.AmountInCents,
			&i.OccurredAt,
			&i.ErrorMessage,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSubscriptionEvent = `-- name: GetSubscriptionEvent :one
SELECT id, subscription_id, event_type, transaction_hash, amount_in_cents, occurred_at, error_message, metadata, created_at, updated_at FROM subscription_events
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSubscriptionEvent(ctx context.Context, id uuid.UUID) (SubscriptionEvent, error) {
	row := q.db.QueryRow(ctx, getSubscriptionEvent, id)
	var i SubscriptionEvent
	err := row.Scan(
		&i.ID,
		&i.SubscriptionID,
		&i.EventType,
		&i.TransactionHash,
		&i.AmountInCents,
		&i.OccurredAt,
		&i.ErrorMessage,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSubscriptionEventByTransactionHash = `-- name: GetSubscriptionEventByTransactionHash :one
SELECT id, subscription_id, event_type, transaction_hash, amount_in_cents, occurred_at, error_message, metadata, created_at, updated_at FROM subscription_events
WHERE transaction_hash = $1 LIMIT 1
`

func (q *Queries) GetSubscriptionEventByTransactionHash(ctx context.Context, transactionHash pgtype.Text) (SubscriptionEvent, error) {
	row := q.db.QueryRow(ctx, getSubscriptionEventByTransactionHash, transactionHash)
	var i SubscriptionEvent
	err := row.Scan(
		&i.ID,
		&i.SubscriptionID,
		&i.EventType,
		&i.TransactionHash,
		&i.AmountInCents,
		&i.OccurredAt,
		&i.ErrorMessage,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSuccessfulRedemptionCount = `-- name: GetSuccessfulRedemptionCount :one
SELECT COUNT(*) 
FROM subscription_events
WHERE subscription_id = $1 AND event_type = 'redeemed'
`

func (q *Queries) GetSuccessfulRedemptionCount(ctx context.Context, subscriptionID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getSuccessfulRedemptionCount, subscriptionID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getTotalAmountBySubscription = `-- name: GetTotalAmountBySubscription :one
SELECT COALESCE(SUM(amount_in_cents), 0) as total_amount
FROM subscription_events
WHERE subscription_id = $1 AND event_type = 'redeemed'
`

func (q *Queries) GetTotalAmountBySubscription(ctx context.Context, subscriptionID uuid.UUID) (interface{}, error) {
	row := q.db.QueryRow(ctx, getTotalAmountBySubscription, subscriptionID)
	var total_amount interface{}
	err := row.Scan(&total_amount)
	return total_amount, err
}

const getUnsyncedSubscriptionEventsWithTxHash = `-- name: GetUnsyncedSubscriptionEventsWithTxHash :many
SELECT se.id, se.subscription_id, se.event_type, se.transaction_hash, se.amount_in_cents, se.occurred_at, se.error_message, se.metadata, se.created_at, se.updated_at FROM subscription_events se
JOIN subscriptions s ON se.subscription_id = s.id
WHERE s.workspace_id = $1
    AND se.transaction_hash IS NOT NULL
    AND se.transaction_hash != ''
    AND NOT EXISTS (
        SELECT 1 FROM payments p
        WHERE p.subscription_event = se.id
        AND p.gas_fee_usd_cents IS NOT NULL
    )
ORDER BY se.occurred_at DESC
LIMIT 100
`

func (q *Queries) GetUnsyncedSubscriptionEventsWithTxHash(ctx context.Context, workspaceID uuid.UUID) ([]SubscriptionEvent, error) {
	rows, err := q.db.Query(ctx, getUnsyncedSubscriptionEventsWithTxHash, workspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SubscriptionEvent{}
	for rows.Next() {
		var i SubscriptionEvent
		if err := rows.Scan(
			&i.ID,
			&i.SubscriptionID,
			&i.EventType,
			&i.TransactionHash,
			&i.AmountInCents,
			&i.OccurredAt,
			&i.ErrorMessage,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFailedSubscriptionEvents = `-- name: ListFailedSubscriptionEvents :many
SELECT id, subscription_id, event_type, transaction_hash, amount_in_cents, occurred_at, error_message, metadata, created_at, updated_at FROM subscription_events
WHERE event_type = 'failed'
ORDER BY occurred_at DESC
`

func (q *Queries) ListFailedSubscriptionEvents(ctx context.Context) ([]SubscriptionEvent, error) {
	rows, err := q.db.Query(ctx, listFailedSubscriptionEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SubscriptionEvent{}
	for rows.Next() {
		var i SubscriptionEvent
		if err := rows.Scan(
			&i.ID,
			&i.SubscriptionID,
			&i.EventType,
			&i.TransactionHash,
			&i.AmountInCents,
			&i.OccurredAt,
			&i.ErrorMessage,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRecentSubscriptionEvents = `-- name: ListRecentSubscriptionEvents :many
SELECT id, subscription_id, event_type, transaction_hash, amount_in_cents, occurred_at, error_message, metadata, created_at, updated_at FROM subscription_events
WHERE occurred_at >= $1
ORDER BY occurred_at DESC
`

func (q *Queries) ListRecentSubscriptionEvents(ctx context.Context, occurredAt pgtype.Timestamptz) ([]SubscriptionEvent, error) {
	rows, err := q.db.Query(ctx, listRecentSubscriptionEvents, occurredAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SubscriptionEvent{}
	for rows.Next() {
		var i SubscriptionEvent
		if err := rows.Scan(
			&i.ID,
			&i.SubscriptionID,
			&i.EventType,
			&i.TransactionHash,
			&i.AmountInCents,
			&i.OccurredAt,
			&i.ErrorMessage,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRecentSubscriptionEventsByType = `-- name: ListRecentSubscriptionEventsByType :many
SELECT id, subscription_id, event_type, transaction_hash, amount_in_cents, occurred_at, error_message, metadata, created_at, updated_at FROM subscription_events
WHERE event_type = $1 AND occurred_at >= $2
ORDER BY occurred_at DESC
`

type ListRecentSubscriptionEventsByTypeParams struct {
	EventType  SubscriptionEventType `json:"event_type"`
	OccurredAt pgtype.Timestamptz    `json:"occurred_at"`
}

func (q *Queries) ListRecentSubscriptionEventsByType(ctx context.Context, arg ListRecentSubscriptionEventsByTypeParams) ([]SubscriptionEvent, error) {
	rows, err := q.db.Query(ctx, listRecentSubscriptionEventsByType, arg.EventType, arg.OccurredAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SubscriptionEvent{}
	for rows.Next() {
		var i SubscriptionEvent
		if err := rows.Scan(
			&i.ID,
			&i.SubscriptionID,
			&i.EventType,
			&i.TransactionHash,
			&i.AmountInCents,
			&i.OccurredAt,
			&i.ErrorMessage,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSubscriptionEventDetailsWithPagination = `-- name: ListSubscriptionEventDetailsWithPagination :many
SELECT
    se.id AS subscription_event_id,
    se.subscription_id,
    se.event_type,
    se.transaction_hash,
    se.amount_in_cents AS event_amount_in_cents,
    se.occurred_at AS event_occurred_at,
    se.error_message,
    se.metadata AS event_metadata,
    se.created_at AS event_created_at,
    s.customer_id,
    s.status AS subscription_status,
    p.id AS product_id,
    p.name AS product_name,
    p.price_type AS price_type,
    p.currency AS price_currency,
    p.unit_amount_in_pennies AS price_unit_amount_in_pennies,
    p.interval_type AS price_interval_type,
    p.term_length AS price_term_length,
    pt.id AS product_token_id,
    pt.token_id AS product_token_token_id,
    pt.created_at AS product_token_created_at,
    pt.updated_at AS product_token_updated_at,
    t.symbol AS product_token_symbol,
    n.id AS network_id,
    n.name AS network_name,
    n.chain_id AS network_chain_id,
    c.email AS customer_email,
    c.name AS customer_name
FROM
    subscription_events se
JOIN
    subscriptions s ON se.subscription_id = s.id
JOIN
    products p ON s.product_id = p.id
JOIN
    products_tokens pt ON s.product_token_id = pt.id
JOIN
    tokens t ON pt.token_id = t.id
JOIN
    networks n ON pt.network_id = n.id
JOIN
    customers c ON s.customer_id = c.id
WHERE
    p.workspace_id = $1
    AND s.deleted_at IS NULL
    AND p.deleted_at IS NULL
    AND se.event_type IN ('redeemed', 'failed', 'failed_redemption')
ORDER BY
    se.occurred_at DESC
LIMIT $2 OFFSET $3
`

type ListSubscriptionEventDetailsWithPaginationParams struct {
	WorkspaceID uuid.UUID `json:"workspace_id"`
	Limit       int32     `json:"limit"`
	Offset      int32     `json:"offset"`
}

type ListSubscriptionEventDetailsWithPaginationRow struct {
	SubscriptionEventID      uuid.UUID             `json:"subscription_event_id"`
	SubscriptionID           uuid.UUID             `json:"subscription_id"`
	EventType                SubscriptionEventType `json:"event_type"`
	TransactionHash          pgtype.Text           `json:"transaction_hash"`
	EventAmountInCents       int32                 `json:"event_amount_in_cents"`
	EventOccurredAt          pgtype.Timestamptz    `json:"event_occurred_at"`
	ErrorMessage             pgtype.Text           `json:"error_message"`
	EventMetadata            []byte                `json:"event_metadata"`
	EventCreatedAt           pgtype.Timestamptz    `json:"event_created_at"`
	CustomerID               uuid.UUID             `json:"customer_id"`
	SubscriptionStatus       SubscriptionStatus    `json:"subscription_status"`
	ProductID                uuid.UUID             `json:"product_id"`
	ProductName              string                `json:"product_name"`
	PriceType                PriceType             `json:"price_type"`
	PriceCurrency            string                `json:"price_currency"`
	PriceUnitAmountInPennies int32                 `json:"price_unit_amount_in_pennies"`
	PriceIntervalType        NullIntervalType      `json:"price_interval_type"`
	PriceTermLength          pgtype.Int4           `json:"price_term_length"`
	ProductTokenID           uuid.UUID             `json:"product_token_id"`
	ProductTokenTokenID      uuid.UUID             `json:"product_token_token_id"`
	ProductTokenCreatedAt    pgtype.Timestamptz    `json:"product_token_created_at"`
	ProductTokenUpdatedAt    pgtype.Timestamptz    `json:"product_token_updated_at"`
	ProductTokenSymbol       string                `json:"product_token_symbol"`
	NetworkID                uuid.UUID             `json:"network_id"`
	NetworkName              string                `json:"network_name"`
	NetworkChainID           int32                 `json:"network_chain_id"`
	CustomerEmail            pgtype.Text           `json:"customer_email"`
	CustomerName             pgtype.Text           `json:"customer_name"`
}

func (q *Queries) ListSubscriptionEventDetailsWithPagination(ctx context.Context, arg ListSubscriptionEventDetailsWithPaginationParams) ([]ListSubscriptionEventDetailsWithPaginationRow, error) {
	rows, err := q.db.Query(ctx, listSubscriptionEventDetailsWithPagination, arg.WorkspaceID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListSubscriptionEventDetailsWithPaginationRow{}
	for rows.Next() {
		var i ListSubscriptionEventDetailsWithPaginationRow
		if err := rows.Scan(
			&i.SubscriptionEventID,
			&i.SubscriptionID,
			&i.EventType,
			&i.TransactionHash,
			&i.EventAmountInCents,
			&i.EventOccurredAt,
			&i.ErrorMessage,
			&i.EventMetadata,
			&i.EventCreatedAt,
			&i.CustomerID,
			&i.SubscriptionStatus,
			&i.ProductID,
			&i.ProductName,
			&i.PriceType,
			&i.PriceCurrency,
			&i.PriceUnitAmountInPennies,
			&i.PriceIntervalType,
			&i.PriceTermLength,
			&i.ProductTokenID,
			&i.ProductTokenTokenID,
			&i.ProductTokenCreatedAt,
			&i.ProductTokenUpdatedAt,
			&i.ProductTokenSymbol,
			&i.NetworkID,
			&i.NetworkName,
			&i.NetworkChainID,
			&i.CustomerEmail,
			&i.CustomerName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSubscriptionEvents = `-- name: ListSubscriptionEvents :many
SELECT id, subscription_id, event_type, transaction_hash, amount_in_cents, occurred_at, error_message, metadata, created_at, updated_at FROM subscription_events
ORDER BY occurred_at DESC
`

func (q *Queries) ListSubscriptionEvents(ctx context.Context) ([]SubscriptionEvent, error) {
	rows, err := q.db.Query(ctx, listSubscriptionEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SubscriptionEvent{}
	for rows.Next() {
		var i SubscriptionEvent
		if err := rows.Scan(
			&i.ID,
			&i.SubscriptionID,
			&i.EventType,
			&i.TransactionHash,
			&i.AmountInCents,
			&i.OccurredAt,
			&i.ErrorMessage,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSubscriptionEventsBySubscription = `-- name: ListSubscriptionEventsBySubscription :many
SELECT id, subscription_id, event_type, transaction_hash, amount_in_cents, occurred_at, error_message, metadata, created_at, updated_at FROM subscription_events
WHERE subscription_id = $1
ORDER BY occurred_at DESC
`

func (q *Queries) ListSubscriptionEventsBySubscription(ctx context.Context, subscriptionID uuid.UUID) ([]SubscriptionEvent, error) {
	rows, err := q.db.Query(ctx, listSubscriptionEventsBySubscription, subscriptionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SubscriptionEvent{}
	for rows.Next() {
		var i SubscriptionEvent
		if err := rows.Scan(
			&i.ID,
			&i.SubscriptionID,
			&i.EventType,
			&i.TransactionHash,
			&i.AmountInCents,
			&i.OccurredAt,
			&i.ErrorMessage,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSubscriptionEventsByType = `-- name: ListSubscriptionEventsByType :many
SELECT id, subscription_id, event_type, transaction_hash, amount_in_cents, occurred_at, error_message, metadata, created_at, updated_at FROM subscription_events
WHERE event_type = $1
ORDER BY occurred_at DESC
`

func (q *Queries) ListSubscriptionEventsByType(ctx context.Context, eventType SubscriptionEventType) ([]SubscriptionEvent, error) {
	rows, err := q.db.Query(ctx, listSubscriptionEventsByType, eventType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SubscriptionEvent{}
	for rows.Next() {
		var i SubscriptionEvent
		if err := rows.Scan(
			&i.ID,
			&i.SubscriptionID,
			&i.EventType,
			&i.TransactionHash,
			&i.AmountInCents,
			&i.OccurredAt,
			&i.ErrorMessage,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSubscriptionEventsWithPagination = `-- name: ListSubscriptionEventsWithPagination :many
SELECT id, subscription_id, event_type, transaction_hash, amount_in_cents, occurred_at, error_message, metadata, created_at, updated_at FROM subscription_events
ORDER BY occurred_at DESC
LIMIT $1 OFFSET $2
`

type ListSubscriptionEventsWithPaginationParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListSubscriptionEventsWithPagination(ctx context.Context, arg ListSubscriptionEventsWithPaginationParams) ([]SubscriptionEvent, error) {
	rows, err := q.db.Query(ctx, listSubscriptionEventsWithPagination, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SubscriptionEvent{}
	for rows.Next() {
		var i SubscriptionEvent
		if err := rows.Scan(
			&i.ID,
			&i.SubscriptionID,
			&i.EventType,
			&i.TransactionHash,
			&i.AmountInCents,
			&i.OccurredAt,
			&i.ErrorMessage,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSubscriptionEvent = `-- name: UpdateSubscriptionEvent :one
UPDATE subscription_events
SET
    event_type = COALESCE($2, event_type),
    transaction_hash = COALESCE($3, transaction_hash),
    amount_in_cents = COALESCE($4, amount_in_cents),
    error_message = COALESCE($5, error_message),
    metadata = COALESCE($6, metadata),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, subscription_id, event_type, transaction_hash, amount_in_cents, occurred_at, error_message, metadata, created_at, updated_at
`

type UpdateSubscriptionEventParams struct {
	ID              uuid.UUID             `json:"id"`
	EventType       SubscriptionEventType `json:"event_type"`
	TransactionHash pgtype.Text           `json:"transaction_hash"`
	AmountInCents   int32                 `json:"amount_in_cents"`
	ErrorMessage    pgtype.Text           `json:"error_message"`
	Metadata        []byte                `json:"metadata"`
}

func (q *Queries) UpdateSubscriptionEvent(ctx context.Context, arg UpdateSubscriptionEventParams) (SubscriptionEvent, error) {
	row := q.db.QueryRow(ctx, updateSubscriptionEvent,
		arg.ID,
		arg.EventType,
		arg.TransactionHash,
		arg.AmountInCents,
		arg.ErrorMessage,
		arg.Metadata,
	)
	var i SubscriptionEvent
	err := row.Scan(
		&i.ID,
		&i.SubscriptionID,
		&i.EventType,
		&i.TransactionHash,
		&i.AmountInCents,
		&i.OccurredAt,
		&i.ErrorMessage,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
