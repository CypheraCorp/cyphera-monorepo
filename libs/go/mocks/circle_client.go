// Code generated by MockGen. DO NOT EDIT.
// Source: libs/go/client/circle/interface.go
//
// Generated by this command:
//
//	mockgen -source=libs/go/client/circle/interface.go -destination=libs/go/mocks/circle_client.go -package=mocks CircleClientInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	circle "github.com/cyphera/cyphera-api/libs/go/client/circle"
	gomock "go.uber.org/mock/gomock"
)

// MockCircleClientInterface is a mock of CircleClientInterface interface.
type MockCircleClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCircleClientInterfaceMockRecorder
	isgomock struct{}
}

// MockCircleClientInterfaceMockRecorder is the mock recorder for MockCircleClientInterface.
type MockCircleClientInterfaceMockRecorder struct {
	mock *MockCircleClientInterface
}

// NewMockCircleClientInterface creates a new mock instance.
func NewMockCircleClientInterface(ctrl *gomock.Controller) *MockCircleClientInterface {
	mock := &MockCircleClientInterface{ctrl: ctrl}
	mock.recorder = &MockCircleClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCircleClientInterface) EXPECT() *MockCircleClientInterfaceMockRecorder {
	return m.recorder
}

// CreatePinChallenge mocks base method.
func (m *MockCircleClientInterface) CreatePinChallenge(ctx context.Context, idempotencyKey, userToken string) (*circle.PinChallengeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePinChallenge", ctx, idempotencyKey, userToken)
	ret0, _ := ret[0].(*circle.PinChallengeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePinChallenge indicates an expected call of CreatePinChallenge.
func (mr *MockCircleClientInterfaceMockRecorder) CreatePinChallenge(ctx, idempotencyKey, userToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePinChallenge", reflect.TypeOf((*MockCircleClientInterface)(nil).CreatePinChallenge), ctx, idempotencyKey, userToken)
}

// CreatePinRestoreChallenge mocks base method.
func (m *MockCircleClientInterface) CreatePinRestoreChallenge(ctx context.Context, idempotencyKey, userToken string) (*circle.PinChallengeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePinRestoreChallenge", ctx, idempotencyKey, userToken)
	ret0, _ := ret[0].(*circle.PinChallengeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePinRestoreChallenge indicates an expected call of CreatePinRestoreChallenge.
func (mr *MockCircleClientInterfaceMockRecorder) CreatePinRestoreChallenge(ctx, idempotencyKey, userToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePinRestoreChallenge", reflect.TypeOf((*MockCircleClientInterface)(nil).CreatePinRestoreChallenge), ctx, idempotencyKey, userToken)
}

// CreateTransferChallenge mocks base method.
func (m *MockCircleClientInterface) CreateTransferChallenge(ctx context.Context, request circle.TransferChallengeRequest, userToken string) (*circle.TransferChallengeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransferChallenge", ctx, request, userToken)
	ret0, _ := ret[0].(*circle.TransferChallengeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransferChallenge indicates an expected call of CreateTransferChallenge.
func (mr *MockCircleClientInterfaceMockRecorder) CreateTransferChallenge(ctx, request, userToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransferChallenge", reflect.TypeOf((*MockCircleClientInterface)(nil).CreateTransferChallenge), ctx, request, userToken)
}

// CreateUserToken mocks base method.
func (m *MockCircleClientInterface) CreateUserToken(ctx context.Context, userID string) (*circle.UserTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserToken", ctx, userID)
	ret0, _ := ret[0].(*circle.UserTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserToken indicates an expected call of CreateUserToken.
func (mr *MockCircleClientInterfaceMockRecorder) CreateUserToken(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserToken", reflect.TypeOf((*MockCircleClientInterface)(nil).CreateUserToken), ctx, userID)
}

// CreateUserWithPinAuth mocks base method.
func (m *MockCircleClientInterface) CreateUserWithPinAuth(ctx context.Context, externalUserID string) (*circle.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserWithPinAuth", ctx, externalUserID)
	ret0, _ := ret[0].(*circle.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserWithPinAuth indicates an expected call of CreateUserWithPinAuth.
func (mr *MockCircleClientInterfaceMockRecorder) CreateUserWithPinAuth(ctx, externalUserID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserWithPinAuth", reflect.TypeOf((*MockCircleClientInterface)(nil).CreateUserWithPinAuth), ctx, externalUserID)
}

// CreateWallets mocks base method.
func (m *MockCircleClientInterface) CreateWallets(ctx context.Context, request circle.CreateWalletsRequest, userToken string) (*circle.CreateWalletsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallets", ctx, request, userToken)
	ret0, _ := ret[0].(*circle.CreateWalletsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWallets indicates an expected call of CreateWallets.
func (mr *MockCircleClientInterfaceMockRecorder) CreateWallets(ctx, request, userToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallets", reflect.TypeOf((*MockCircleClientInterface)(nil).CreateWallets), ctx, request, userToken)
}

// EstimateTransferFee mocks base method.
func (m *MockCircleClientInterface) EstimateTransferFee(ctx context.Context, request circle.EstimateTransferFeeRequest, userToken string) (*circle.EstimateTransferFeeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateTransferFee", ctx, request, userToken)
	ret0, _ := ret[0].(*circle.EstimateTransferFeeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateTransferFee indicates an expected call of EstimateTransferFee.
func (mr *MockCircleClientInterfaceMockRecorder) EstimateTransferFee(ctx, request, userToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateTransferFee", reflect.TypeOf((*MockCircleClientInterface)(nil).EstimateTransferFee), ctx, request, userToken)
}

// GetChallenge mocks base method.
func (m *MockCircleClientInterface) GetChallenge(ctx context.Context, challengeID, userToken string) (*circle.ChallengeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChallenge", ctx, challengeID, userToken)
	ret0, _ := ret[0].(*circle.ChallengeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChallenge indicates an expected call of GetChallenge.
func (mr *MockCircleClientInterfaceMockRecorder) GetChallenge(ctx, challengeID, userToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChallenge", reflect.TypeOf((*MockCircleClientInterface)(nil).GetChallenge), ctx, challengeID, userToken)
}

// GetTransaction mocks base method.
func (m *MockCircleClientInterface) GetTransaction(ctx context.Context, transactionID, userToken string) (*circle.TransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", ctx, transactionID, userToken)
	ret0, _ := ret[0].(*circle.TransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockCircleClientInterfaceMockRecorder) GetTransaction(ctx, transactionID, userToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockCircleClientInterface)(nil).GetTransaction), ctx, transactionID, userToken)
}

// GetUserByID mocks base method.
func (m *MockCircleClientInterface) GetUserByID(ctx context.Context, userID string) (*circle.UserByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, userID)
	ret0, _ := ret[0].(*circle.UserByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockCircleClientInterfaceMockRecorder) GetUserByID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockCircleClientInterface)(nil).GetUserByID), ctx, userID)
}

// GetUserByToken mocks base method.
func (m *MockCircleClientInterface) GetUserByToken(ctx context.Context, userToken string) (*circle.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByToken", ctx, userToken)
	ret0, _ := ret[0].(*circle.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByToken indicates an expected call of GetUserByToken.
func (mr *MockCircleClientInterfaceMockRecorder) GetUserByToken(ctx, userToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByToken", reflect.TypeOf((*MockCircleClientInterface)(nil).GetUserByToken), ctx, userToken)
}

// GetWallet mocks base method.
func (m *MockCircleClientInterface) GetWallet(ctx context.Context, walletID, userToken string) (*circle.WalletResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWallet", ctx, walletID, userToken)
	ret0, _ := ret[0].(*circle.WalletResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWallet indicates an expected call of GetWallet.
func (mr *MockCircleClientInterfaceMockRecorder) GetWallet(ctx, walletID, userToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWallet", reflect.TypeOf((*MockCircleClientInterface)(nil).GetWallet), ctx, walletID, userToken)
}

// GetWalletBalance mocks base method.
func (m *MockCircleClientInterface) GetWalletBalance(ctx context.Context, walletID, userToken string, params *circle.GetWalletBalanceParams) (*circle.WalletBalanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletBalance", ctx, walletID, userToken, params)
	ret0, _ := ret[0].(*circle.WalletBalanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletBalance indicates an expected call of GetWalletBalance.
func (mr *MockCircleClientInterfaceMockRecorder) GetWalletBalance(ctx, walletID, userToken, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletBalance", reflect.TypeOf((*MockCircleClientInterface)(nil).GetWalletBalance), ctx, walletID, userToken, params)
}

// InitializeUser mocks base method.
func (m *MockCircleClientInterface) InitializeUser(ctx context.Context, request circle.InitializeUserRequest, userToken string) (*circle.InitializeUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeUser", ctx, request, userToken)
	ret0, _ := ret[0].(*circle.InitializeUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitializeUser indicates an expected call of InitializeUser.
func (mr *MockCircleClientInterfaceMockRecorder) InitializeUser(ctx, request, userToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeUser", reflect.TypeOf((*MockCircleClientInterface)(nil).InitializeUser), ctx, request, userToken)
}

// ListTransactions mocks base method.
func (m *MockCircleClientInterface) ListTransactions(ctx context.Context, userToken string, params *circle.ListTransactionsParams) (*circle.TransactionListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransactions", ctx, userToken, params)
	ret0, _ := ret[0].(*circle.TransactionListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransactions indicates an expected call of ListTransactions.
func (mr *MockCircleClientInterfaceMockRecorder) ListTransactions(ctx, userToken, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactions", reflect.TypeOf((*MockCircleClientInterface)(nil).ListTransactions), ctx, userToken, params)
}

// ListWallets mocks base method.
func (m *MockCircleClientInterface) ListWallets(ctx context.Context, userToken string, params *circle.ListWalletsParams) (*circle.ListWalletsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWallets", ctx, userToken, params)
	ret0, _ := ret[0].(*circle.ListWalletsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWallets indicates an expected call of ListWallets.
func (mr *MockCircleClientInterfaceMockRecorder) ListWallets(ctx, userToken, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWallets", reflect.TypeOf((*MockCircleClientInterface)(nil).ListWallets), ctx, userToken, params)
}

// UpdatePinChallenge mocks base method.
func (m *MockCircleClientInterface) UpdatePinChallenge(ctx context.Context, idempotencyKey, userToken string) (*circle.PinChallengeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePinChallenge", ctx, idempotencyKey, userToken)
	ret0, _ := ret[0].(*circle.PinChallengeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePinChallenge indicates an expected call of UpdatePinChallenge.
func (mr *MockCircleClientInterfaceMockRecorder) UpdatePinChallenge(ctx, idempotencyKey, userToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePinChallenge", reflect.TypeOf((*MockCircleClientInterface)(nil).UpdatePinChallenge), ctx, idempotencyKey, userToken)
}

// ValidateAddress mocks base method.
func (m *MockCircleClientInterface) ValidateAddress(ctx context.Context, request circle.ValidateAddressRequest) (*circle.ValidateAddressResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAddress", ctx, request)
	ret0, _ := ret[0].(*circle.ValidateAddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateAddress indicates an expected call of ValidateAddress.
func (mr *MockCircleClientInterfaceMockRecorder) ValidateAddress(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAddress", reflect.TypeOf((*MockCircleClientInterface)(nil).ValidateAddress), ctx, request)
}
