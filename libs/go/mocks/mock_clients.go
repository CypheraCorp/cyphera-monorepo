// Code generated by MockGen. DO NOT EDIT.
// Source: libs/go/interfaces/clients.go
//
// Generated by this command:
//
//	mockgen -source=libs/go/interfaces/clients.go -destination=libs/go/mocks/mock_clients.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	interfaces "github.com/cyphera/cyphera-api/libs/go/interfaces"
	gomock "go.uber.org/mock/gomock"
)

// MockDelegationClient is a mock of DelegationClient interface.
type MockDelegationClient struct {
	ctrl     *gomock.Controller
	recorder *MockDelegationClientMockRecorder
	isgomock struct{}
}

// MockDelegationClientMockRecorder is the mock recorder for MockDelegationClient.
type MockDelegationClientMockRecorder struct {
	mock *MockDelegationClient
}

// NewMockDelegationClient creates a new mock instance.
func NewMockDelegationClient(ctrl *gomock.Controller) *MockDelegationClient {
	mock := &MockDelegationClient{ctrl: ctrl}
	mock.recorder = &MockDelegationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDelegationClient) EXPECT() *MockDelegationClientMockRecorder {
	return m.recorder
}

// CreateDelegation mocks base method.
func (m *MockDelegationClient) CreateDelegation(ctx context.Context, params interfaces.CreateDelegationParams) (*interfaces.CreateDelegationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDelegation", ctx, params)
	ret0, _ := ret[0].(*interfaces.CreateDelegationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDelegation indicates an expected call of CreateDelegation.
func (mr *MockDelegationClientMockRecorder) CreateDelegation(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDelegation", reflect.TypeOf((*MockDelegationClient)(nil).CreateDelegation), ctx, params)
}

// GetDelegationStatus mocks base method.
func (m *MockDelegationClient) GetDelegationStatus(ctx context.Context, delegationID string) (*interfaces.DelegationStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegationStatus", ctx, delegationID)
	ret0, _ := ret[0].(*interfaces.DelegationStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelegationStatus indicates an expected call of GetDelegationStatus.
func (mr *MockDelegationClientMockRecorder) GetDelegationStatus(ctx, delegationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegationStatus", reflect.TypeOf((*MockDelegationClient)(nil).GetDelegationStatus), ctx, delegationID)
}

// ProcessPayment mocks base method.
func (m *MockDelegationClient) ProcessPayment(ctx context.Context, params interfaces.ProcessPaymentParams) (*interfaces.ProcessPaymentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessPayment", ctx, params)
	ret0, _ := ret[0].(*interfaces.ProcessPaymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessPayment indicates an expected call of ProcessPayment.
func (mr *MockDelegationClientMockRecorder) ProcessPayment(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessPayment", reflect.TypeOf((*MockDelegationClient)(nil).ProcessPayment), ctx, params)
}

// RevokeDelegation mocks base method.
func (m *MockDelegationClient) RevokeDelegation(ctx context.Context, delegationID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeDelegation", ctx, delegationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeDelegation indicates an expected call of RevokeDelegation.
func (mr *MockDelegationClientMockRecorder) RevokeDelegation(ctx, delegationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeDelegation", reflect.TypeOf((*MockDelegationClient)(nil).RevokeDelegation), ctx, delegationID)
}

// MockCircleClient is a mock of CircleClient interface.
type MockCircleClient struct {
	ctrl     *gomock.Controller
	recorder *MockCircleClientMockRecorder
	isgomock struct{}
}

// MockCircleClientMockRecorder is the mock recorder for MockCircleClient.
type MockCircleClientMockRecorder struct {
	mock *MockCircleClient
}

// NewMockCircleClient creates a new mock instance.
func NewMockCircleClient(ctrl *gomock.Controller) *MockCircleClient {
	mock := &MockCircleClient{ctrl: ctrl}
	mock.recorder = &MockCircleClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCircleClient) EXPECT() *MockCircleClientMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockCircleClient) CreateUser(ctx context.Context, email string) (*interfaces.CircleUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, email)
	ret0, _ := ret[0].(*interfaces.CircleUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockCircleClientMockRecorder) CreateUser(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockCircleClient)(nil).CreateUser), ctx, email)
}

// CreateWallet mocks base method.
func (m *MockCircleClient) CreateWallet(ctx context.Context, params interfaces.CreateWalletParams) (*interfaces.CircleWallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", ctx, params)
	ret0, _ := ret[0].(*interfaces.CircleWallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWallet indicates an expected call of CreateWallet.
func (mr *MockCircleClientMockRecorder) CreateWallet(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockCircleClient)(nil).CreateWallet), ctx, params)
}

// GetTransaction mocks base method.
func (m *MockCircleClient) GetTransaction(ctx context.Context, transactionID string) (*interfaces.CircleTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", ctx, transactionID)
	ret0, _ := ret[0].(*interfaces.CircleTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockCircleClientMockRecorder) GetTransaction(ctx, transactionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockCircleClient)(nil).GetTransaction), ctx, transactionID)
}

// GetUser mocks base method.
func (m *MockCircleClient) GetUser(ctx context.Context, userID string) (*interfaces.CircleUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, userID)
	ret0, _ := ret[0].(*interfaces.CircleUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockCircleClientMockRecorder) GetUser(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockCircleClient)(nil).GetUser), ctx, userID)
}

// GetWallet mocks base method.
func (m *MockCircleClient) GetWallet(ctx context.Context, walletID string) (*interfaces.CircleWallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWallet", ctx, walletID)
	ret0, _ := ret[0].(*interfaces.CircleWallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWallet indicates an expected call of GetWallet.
func (mr *MockCircleClientMockRecorder) GetWallet(ctx, walletID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWallet", reflect.TypeOf((*MockCircleClient)(nil).GetWallet), ctx, walletID)
}

// InitiateTransaction mocks base method.
func (m *MockCircleClient) InitiateTransaction(ctx context.Context, params interfaces.TransactionParams) (*interfaces.CircleTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitiateTransaction", ctx, params)
	ret0, _ := ret[0].(*interfaces.CircleTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitiateTransaction indicates an expected call of InitiateTransaction.
func (mr *MockCircleClientMockRecorder) InitiateTransaction(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiateTransaction", reflect.TypeOf((*MockCircleClient)(nil).InitiateTransaction), ctx, params)
}

// MockStripeClient is a mock of StripeClient interface.
type MockStripeClient struct {
	ctrl     *gomock.Controller
	recorder *MockStripeClientMockRecorder
	isgomock struct{}
}

// MockStripeClientMockRecorder is the mock recorder for MockStripeClient.
type MockStripeClientMockRecorder struct {
	mock *MockStripeClient
}

// NewMockStripeClient creates a new mock instance.
func NewMockStripeClient(ctrl *gomock.Controller) *MockStripeClient {
	mock := &MockStripeClient{ctrl: ctrl}
	mock.recorder = &MockStripeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStripeClient) EXPECT() *MockStripeClientMockRecorder {
	return m.recorder
}

// CancelSubscription mocks base method.
func (m *MockStripeClient) CancelSubscription(ctx context.Context, subscriptionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelSubscription", ctx, subscriptionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelSubscription indicates an expected call of CancelSubscription.
func (mr *MockStripeClientMockRecorder) CancelSubscription(ctx, subscriptionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelSubscription", reflect.TypeOf((*MockStripeClient)(nil).CancelSubscription), ctx, subscriptionID)
}

// CreateCustomer mocks base method.
func (m *MockStripeClient) CreateCustomer(ctx context.Context, email string) (*interfaces.StripeCustomer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomer", ctx, email)
	ret0, _ := ret[0].(*interfaces.StripeCustomer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomer indicates an expected call of CreateCustomer.
func (mr *MockStripeClientMockRecorder) CreateCustomer(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomer", reflect.TypeOf((*MockStripeClient)(nil).CreateCustomer), ctx, email)
}

// CreatePaymentIntent mocks base method.
func (m *MockStripeClient) CreatePaymentIntent(ctx context.Context, amount int64, currency string) (*interfaces.StripePaymentIntent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePaymentIntent", ctx, amount, currency)
	ret0, _ := ret[0].(*interfaces.StripePaymentIntent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePaymentIntent indicates an expected call of CreatePaymentIntent.
func (mr *MockStripeClientMockRecorder) CreatePaymentIntent(ctx, amount, currency any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePaymentIntent", reflect.TypeOf((*MockStripeClient)(nil).CreatePaymentIntent), ctx, amount, currency)
}

// CreateSubscription mocks base method.
func (m *MockStripeClient) CreateSubscription(ctx context.Context, customerID, priceID string) (*interfaces.StripeSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscription", ctx, customerID, priceID)
	ret0, _ := ret[0].(*interfaces.StripeSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubscription indicates an expected call of CreateSubscription.
func (mr *MockStripeClientMockRecorder) CreateSubscription(ctx, customerID, priceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscription", reflect.TypeOf((*MockStripeClient)(nil).CreateSubscription), ctx, customerID, priceID)
}

// MockResendClient is a mock of ResendClient interface.
type MockResendClient struct {
	ctrl     *gomock.Controller
	recorder *MockResendClientMockRecorder
	isgomock struct{}
}

// MockResendClientMockRecorder is the mock recorder for MockResendClient.
type MockResendClientMockRecorder struct {
	mock *MockResendClient
}

// NewMockResendClient creates a new mock instance.
func NewMockResendClient(ctrl *gomock.Controller) *MockResendClient {
	mock := &MockResendClient{ctrl: ctrl}
	mock.recorder = &MockResendClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResendClient) EXPECT() *MockResendClientMockRecorder {
	return m.recorder
}

// SendBatch mocks base method.
func (m *MockResendClient) SendBatch(ctx context.Context, emails []interfaces.EmailParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendBatch", ctx, emails)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendBatch indicates an expected call of SendBatch.
func (mr *MockResendClientMockRecorder) SendBatch(ctx, emails any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendBatch", reflect.TypeOf((*MockResendClient)(nil).SendBatch), ctx, emails)
}

// SendEmail mocks base method.
func (m *MockResendClient) SendEmail(ctx context.Context, params interfaces.EmailParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockResendClientMockRecorder) SendEmail(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockResendClient)(nil).SendEmail), ctx, params)
}

// MockWeb3AuthClient is a mock of Web3AuthClient interface.
type MockWeb3AuthClient struct {
	ctrl     *gomock.Controller
	recorder *MockWeb3AuthClientMockRecorder
	isgomock struct{}
}

// MockWeb3AuthClientMockRecorder is the mock recorder for MockWeb3AuthClient.
type MockWeb3AuthClientMockRecorder struct {
	mock *MockWeb3AuthClient
}

// NewMockWeb3AuthClient creates a new mock instance.
func NewMockWeb3AuthClient(ctrl *gomock.Controller) *MockWeb3AuthClient {
	mock := &MockWeb3AuthClient{ctrl: ctrl}
	mock.recorder = &MockWeb3AuthClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWeb3AuthClient) EXPECT() *MockWeb3AuthClientMockRecorder {
	return m.recorder
}

// GetUserInfo mocks base method.
func (m *MockWeb3AuthClient) GetUserInfo(ctx context.Context, userID string) (*interfaces.Web3AuthUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", ctx, userID)
	ret0, _ := ret[0].(*interfaces.Web3AuthUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockWeb3AuthClientMockRecorder) GetUserInfo(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockWeb3AuthClient)(nil).GetUserInfo), ctx, userID)
}

// VerifyToken mocks base method.
func (m *MockWeb3AuthClient) VerifyToken(ctx context.Context, token string) (*interfaces.Web3AuthUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", ctx, token)
	ret0, _ := ret[0].(*interfaces.Web3AuthUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockWeb3AuthClientMockRecorder) VerifyToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockWeb3AuthClient)(nil).VerifyToken), ctx, token)
}
