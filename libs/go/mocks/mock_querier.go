// Code generated by MockGen. DO NOT EDIT.
// Source: libs/go/db/querier.go
//
// Generated by this command:
//
//	mockgen -source=libs/go/db/querier.go -destination=libs/go/mocks/mock_querier.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	json "encoding/json"
	reflect "reflect"

	db "github.com/cyphera/cyphera-api/libs/go/db"
	uuid "github.com/google/uuid"
	pgtype "github.com/jackc/pgx/v5/pgtype"
	gomock "go.uber.org/mock/gomock"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
	isgomock struct{}
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// ActivateFiatCurrency mocks base method.
func (m *MockQuerier) ActivateFiatCurrency(ctx context.Context, code string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateFiatCurrency", ctx, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActivateFiatCurrency indicates an expected call of ActivateFiatCurrency.
func (mr *MockQuerierMockRecorder) ActivateFiatCurrency(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateFiatCurrency", reflect.TypeOf((*MockQuerier)(nil).ActivateFiatCurrency), ctx, code)
}

// ActivateNetwork mocks base method.
func (m *MockQuerier) ActivateNetwork(ctx context.Context, id uuid.UUID) (db.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateNetwork", ctx, id)
	ret0, _ := ret[0].(db.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActivateNetwork indicates an expected call of ActivateNetwork.
func (mr *MockQuerierMockRecorder) ActivateNetwork(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateNetwork", reflect.TypeOf((*MockQuerier)(nil).ActivateNetwork), ctx, id)
}

// ActivateProduct mocks base method.
func (m *MockQuerier) ActivateProduct(ctx context.Context, id uuid.UUID) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateProduct", ctx, id)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActivateProduct indicates an expected call of ActivateProduct.
func (mr *MockQuerierMockRecorder) ActivateProduct(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateProduct", reflect.TypeOf((*MockQuerier)(nil).ActivateProduct), ctx, id)
}

// ActivateProductToken mocks base method.
func (m *MockQuerier) ActivateProductToken(ctx context.Context, id uuid.UUID) (db.ProductsToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateProductToken", ctx, id)
	ret0, _ := ret[0].(db.ProductsToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActivateProductToken indicates an expected call of ActivateProductToken.
func (mr *MockQuerierMockRecorder) ActivateProductToken(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateProductToken", reflect.TypeOf((*MockQuerier)(nil).ActivateProductToken), ctx, id)
}

// ActivateSubscriptionLineItem mocks base method.
func (m *MockQuerier) ActivateSubscriptionLineItem(ctx context.Context, id uuid.UUID) (db.SubscriptionLineItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateSubscriptionLineItem", ctx, id)
	ret0, _ := ret[0].(db.SubscriptionLineItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActivateSubscriptionLineItem indicates an expected call of ActivateSubscriptionLineItem.
func (mr *MockQuerierMockRecorder) ActivateSubscriptionLineItem(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateSubscriptionLineItem", reflect.TypeOf((*MockQuerier)(nil).ActivateSubscriptionLineItem), ctx, id)
}

// ActivateToken mocks base method.
func (m *MockQuerier) ActivateToken(ctx context.Context, id uuid.UUID) (db.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateToken", ctx, id)
	ret0, _ := ret[0].(db.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActivateToken indicates an expected call of ActivateToken.
func (mr *MockQuerierMockRecorder) ActivateToken(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateToken", reflect.TypeOf((*MockQuerier)(nil).ActivateToken), ctx, id)
}

// AddCustomerToWorkspace mocks base method.
func (m *MockQuerier) AddCustomerToWorkspace(ctx context.Context, arg db.AddCustomerToWorkspaceParams) (db.WorkspaceCustomer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCustomerToWorkspace", ctx, arg)
	ret0, _ := ret[0].(db.WorkspaceCustomer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCustomerToWorkspace indicates an expected call of AddCustomerToWorkspace.
func (mr *MockQuerierMockRecorder) AddCustomerToWorkspace(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCustomerToWorkspace", reflect.TypeOf((*MockQuerier)(nil).AddCustomerToWorkspace), ctx, arg)
}

// AddWorkspaceSupportedCurrency mocks base method.
func (m *MockQuerier) AddWorkspaceSupportedCurrency(ctx context.Context, arg db.AddWorkspaceSupportedCurrencyParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWorkspaceSupportedCurrency", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddWorkspaceSupportedCurrency indicates an expected call of AddWorkspaceSupportedCurrency.
func (mr *MockQuerierMockRecorder) AddWorkspaceSupportedCurrency(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWorkspaceSupportedCurrency", reflect.TypeOf((*MockQuerier)(nil).AddWorkspaceSupportedCurrency), ctx, arg)
}

// ApplyProrationToInvoice mocks base method.
func (m *MockQuerier) ApplyProrationToInvoice(ctx context.Context, arg db.ApplyProrationToInvoiceParams) (db.SubscriptionProration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyProrationToInvoice", ctx, arg)
	ret0, _ := ret[0].(db.SubscriptionProration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyProrationToInvoice indicates an expected call of ApplyProrationToInvoice.
func (mr *MockQuerierMockRecorder) ApplyProrationToInvoice(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyProrationToInvoice", reflect.TypeOf((*MockQuerier)(nil).ApplyProrationToInvoice), ctx, arg)
}

// ApplyProrationToPayment mocks base method.
func (m *MockQuerier) ApplyProrationToPayment(ctx context.Context, arg db.ApplyProrationToPaymentParams) (db.SubscriptionProration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyProrationToPayment", ctx, arg)
	ret0, _ := ret[0].(db.SubscriptionProration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyProrationToPayment indicates an expected call of ApplyProrationToPayment.
func (mr *MockQuerierMockRecorder) ApplyProrationToPayment(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyProrationToPayment", reflect.TypeOf((*MockQuerier)(nil).ApplyProrationToPayment), ctx, arg)
}

// BatchCreateSubscriptionLineItems mocks base method.
func (m *MockQuerier) BatchCreateSubscriptionLineItems(ctx context.Context, arg []db.BatchCreateSubscriptionLineItemsParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreateSubscriptionLineItems", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchCreateSubscriptionLineItems indicates an expected call of BatchCreateSubscriptionLineItems.
func (mr *MockQuerierMockRecorder) BatchCreateSubscriptionLineItems(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateSubscriptionLineItems", reflect.TypeOf((*MockQuerier)(nil).BatchCreateSubscriptionLineItems), ctx, arg)
}

// BulkCreateInvoiceLineItemsFromSubscription mocks base method.
func (m *MockQuerier) BulkCreateInvoiceLineItemsFromSubscription(ctx context.Context, arg []db.BulkCreateInvoiceLineItemsFromSubscriptionParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkCreateInvoiceLineItemsFromSubscription", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkCreateInvoiceLineItemsFromSubscription indicates an expected call of BulkCreateInvoiceLineItemsFromSubscription.
func (mr *MockQuerierMockRecorder) BulkCreateInvoiceLineItemsFromSubscription(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkCreateInvoiceLineItemsFromSubscription", reflect.TypeOf((*MockQuerier)(nil).BulkCreateInvoiceLineItemsFromSubscription), ctx, arg)
}

// BulkUpdateCustomerSyncStatus mocks base method.
func (m *MockQuerier) BulkUpdateCustomerSyncStatus(ctx context.Context, arg db.BulkUpdateCustomerSyncStatusParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkUpdateCustomerSyncStatus", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkUpdateCustomerSyncStatus indicates an expected call of BulkUpdateCustomerSyncStatus.
func (mr *MockQuerierMockRecorder) BulkUpdateCustomerSyncStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkUpdateCustomerSyncStatus", reflect.TypeOf((*MockQuerier)(nil).BulkUpdateCustomerSyncStatus), ctx, arg)
}

// BulkUpdateInvoiceSyncStatus mocks base method.
func (m *MockQuerier) BulkUpdateInvoiceSyncStatus(ctx context.Context, arg db.BulkUpdateInvoiceSyncStatusParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkUpdateInvoiceSyncStatus", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkUpdateInvoiceSyncStatus indicates an expected call of BulkUpdateInvoiceSyncStatus.
func (mr *MockQuerierMockRecorder) BulkUpdateInvoiceSyncStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkUpdateInvoiceSyncStatus", reflect.TypeOf((*MockQuerier)(nil).BulkUpdateInvoiceSyncStatus), ctx, arg)
}

// BulkUpdateProductSyncStatus mocks base method.
func (m *MockQuerier) BulkUpdateProductSyncStatus(ctx context.Context, arg db.BulkUpdateProductSyncStatusParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkUpdateProductSyncStatus", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkUpdateProductSyncStatus indicates an expected call of BulkUpdateProductSyncStatus.
func (mr *MockQuerierMockRecorder) BulkUpdateProductSyncStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkUpdateProductSyncStatus", reflect.TypeOf((*MockQuerier)(nil).BulkUpdateProductSyncStatus), ctx, arg)
}

// BulkUpdateSubscriptionSyncStatus mocks base method.
func (m *MockQuerier) BulkUpdateSubscriptionSyncStatus(ctx context.Context, arg db.BulkUpdateSubscriptionSyncStatusParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkUpdateSubscriptionSyncStatus", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkUpdateSubscriptionSyncStatus indicates an expected call of BulkUpdateSubscriptionSyncStatus.
func (mr *MockQuerierMockRecorder) BulkUpdateSubscriptionSyncStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkUpdateSubscriptionSyncStatus", reflect.TypeOf((*MockQuerier)(nil).BulkUpdateSubscriptionSyncStatus), ctx, arg)
}

// CalculateSubscriptionTotal mocks base method.
func (m *MockQuerier) CalculateSubscriptionTotal(ctx context.Context, subscriptionID uuid.UUID) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateSubscriptionTotal", ctx, subscriptionID)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateSubscriptionTotal indicates an expected call of CalculateSubscriptionTotal.
func (mr *MockQuerierMockRecorder) CalculateSubscriptionTotal(ctx, subscriptionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateSubscriptionTotal", reflect.TypeOf((*MockQuerier)(nil).CalculateSubscriptionTotal), ctx, subscriptionID)
}

// CancelScheduledChange mocks base method.
func (m *MockQuerier) CancelScheduledChange(ctx context.Context, id uuid.UUID) (db.SubscriptionScheduleChange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelScheduledChange", ctx, id)
	ret0, _ := ret[0].(db.SubscriptionScheduleChange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelScheduledChange indicates an expected call of CancelScheduledChange.
func (mr *MockQuerierMockRecorder) CancelScheduledChange(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelScheduledChange", reflect.TypeOf((*MockQuerier)(nil).CancelScheduledChange), ctx, id)
}

// CancelSubscription mocks base method.
func (m *MockQuerier) CancelSubscription(ctx context.Context, id uuid.UUID) (db.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelSubscription", ctx, id)
	ret0, _ := ret[0].(db.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelSubscription indicates an expected call of CancelSubscription.
func (mr *MockQuerierMockRecorder) CancelSubscription(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelSubscription", reflect.TypeOf((*MockQuerier)(nil).CancelSubscription), ctx, id)
}

// CancelSubscriptionImmediately mocks base method.
func (m *MockQuerier) CancelSubscriptionImmediately(ctx context.Context, arg db.CancelSubscriptionImmediatelyParams) (db.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelSubscriptionImmediately", ctx, arg)
	ret0, _ := ret[0].(db.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelSubscriptionImmediately indicates an expected call of CancelSubscriptionImmediately.
func (mr *MockQuerierMockRecorder) CancelSubscriptionImmediately(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelSubscriptionImmediately", reflect.TypeOf((*MockQuerier)(nil).CancelSubscriptionImmediately), ctx, arg)
}

// CheckExistingDunningCampaign mocks base method.
func (m *MockQuerier) CheckExistingDunningCampaign(ctx context.Context, arg db.CheckExistingDunningCampaignParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExistingDunningCampaign", ctx, arg)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckExistingDunningCampaign indicates an expected call of CheckExistingDunningCampaign.
func (mr *MockQuerierMockRecorder) CheckExistingDunningCampaign(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExistingDunningCampaign", reflect.TypeOf((*MockQuerier)(nil).CheckExistingDunningCampaign), ctx, arg)
}

// CheckGasSponsorshipEligibility mocks base method.
func (m *MockQuerier) CheckGasSponsorshipEligibility(ctx context.Context, workspaceID uuid.UUID) (db.CheckGasSponsorshipEligibilityRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckGasSponsorshipEligibility", ctx, workspaceID)
	ret0, _ := ret[0].(db.CheckGasSponsorshipEligibilityRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckGasSponsorshipEligibility indicates an expected call of CheckGasSponsorshipEligibility.
func (mr *MockQuerierMockRecorder) CheckGasSponsorshipEligibility(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckGasSponsorshipEligibility", reflect.TypeOf((*MockQuerier)(nil).CheckGasSponsorshipEligibility), ctx, workspaceID)
}

// CheckInvoiceExistsForPeriod mocks base method.
func (m *MockQuerier) CheckInvoiceExistsForPeriod(ctx context.Context, arg db.CheckInvoiceExistsForPeriodParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckInvoiceExistsForPeriod", ctx, arg)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckInvoiceExistsForPeriod indicates an expected call of CheckInvoiceExistsForPeriod.
func (mr *MockQuerierMockRecorder) CheckInvoiceExistsForPeriod(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckInvoiceExistsForPeriod", reflect.TypeOf((*MockQuerier)(nil).CheckInvoiceExistsForPeriod), ctx, arg)
}

// CheckSlugExists mocks base method.
func (m *MockQuerier) CheckSlugExists(ctx context.Context, slug string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSlugExists", ctx, slug)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckSlugExists indicates an expected call of CheckSlugExists.
func (mr *MockQuerierMockRecorder) CheckSlugExists(ctx, slug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSlugExists", reflect.TypeOf((*MockQuerier)(nil).CheckSlugExists), ctx, slug)
}

// CheckWorkspaceHasPaymentProvider mocks base method.
func (m *MockQuerier) CheckWorkspaceHasPaymentProvider(ctx context.Context, arg db.CheckWorkspaceHasPaymentProviderParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckWorkspaceHasPaymentProvider", ctx, arg)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckWorkspaceHasPaymentProvider indicates an expected call of CheckWorkspaceHasPaymentProvider.
func (mr *MockQuerierMockRecorder) CheckWorkspaceHasPaymentProvider(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckWorkspaceHasPaymentProvider", reflect.TypeOf((*MockQuerier)(nil).CheckWorkspaceHasPaymentProvider), ctx, arg)
}

// CompleteSubscription mocks base method.
func (m *MockQuerier) CompleteSubscription(ctx context.Context, id uuid.UUID) (db.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteSubscription", ctx, id)
	ret0, _ := ret[0].(db.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteSubscription indicates an expected call of CompleteSubscription.
func (mr *MockQuerierMockRecorder) CompleteSubscription(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteSubscription", reflect.TypeOf((*MockQuerier)(nil).CompleteSubscription), ctx, id)
}

// CountActiveSubscriptions mocks base method.
func (m *MockQuerier) CountActiveSubscriptions(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountActiveSubscriptions", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountActiveSubscriptions indicates an expected call of CountActiveSubscriptions.
func (mr *MockQuerierMockRecorder) CountActiveSubscriptions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountActiveSubscriptions", reflect.TypeOf((*MockQuerier)(nil).CountActiveSubscriptions), ctx)
}

// CountCustomerWallets mocks base method.
func (m *MockQuerier) CountCustomerWallets(ctx context.Context, customerID uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountCustomerWallets", ctx, customerID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountCustomerWallets indicates an expected call of CountCustomerWallets.
func (mr *MockQuerierMockRecorder) CountCustomerWallets(ctx, customerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountCustomerWallets", reflect.TypeOf((*MockQuerier)(nil).CountCustomerWallets), ctx, customerID)
}

// CountCustomers mocks base method.
func (m *MockQuerier) CountCustomers(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountCustomers", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountCustomers indicates an expected call of CountCustomers.
func (mr *MockQuerierMockRecorder) CountCustomers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountCustomers", reflect.TypeOf((*MockQuerier)(nil).CountCustomers), ctx)
}

// CountDelegations mocks base method.
func (m *MockQuerier) CountDelegations(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountDelegations", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountDelegations indicates an expected call of CountDelegations.
func (mr *MockQuerierMockRecorder) CountDelegations(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountDelegations", reflect.TypeOf((*MockQuerier)(nil).CountDelegations), ctx)
}

// CountDelegationsByDelegator mocks base method.
func (m *MockQuerier) CountDelegationsByDelegator(ctx context.Context, delegator string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountDelegationsByDelegator", ctx, delegator)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountDelegationsByDelegator indicates an expected call of CountDelegationsByDelegator.
func (mr *MockQuerierMockRecorder) CountDelegationsByDelegator(ctx, delegator any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountDelegationsByDelegator", reflect.TypeOf((*MockQuerier)(nil).CountDelegationsByDelegator), ctx, delegator)
}

// CountFailedSubscriptionAttempts mocks base method.
func (m *MockQuerier) CountFailedSubscriptionAttempts(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountFailedSubscriptionAttempts", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountFailedSubscriptionAttempts indicates an expected call of CountFailedSubscriptionAttempts.
func (mr *MockQuerierMockRecorder) CountFailedSubscriptionAttempts(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountFailedSubscriptionAttempts", reflect.TypeOf((*MockQuerier)(nil).CountFailedSubscriptionAttempts), ctx)
}

// CountFailedSubscriptionAttemptsByErrorType mocks base method.
func (m *MockQuerier) CountFailedSubscriptionAttemptsByErrorType(ctx context.Context, errorType db.SubscriptionEventType) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountFailedSubscriptionAttemptsByErrorType", ctx, errorType)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountFailedSubscriptionAttemptsByErrorType indicates an expected call of CountFailedSubscriptionAttemptsByErrorType.
func (mr *MockQuerierMockRecorder) CountFailedSubscriptionAttemptsByErrorType(ctx, errorType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountFailedSubscriptionAttemptsByErrorType", reflect.TypeOf((*MockQuerier)(nil).CountFailedSubscriptionAttemptsByErrorType), ctx, errorType)
}

// CountInvoicesByProvider mocks base method.
func (m *MockQuerier) CountInvoicesByProvider(ctx context.Context, arg db.CountInvoicesByProviderParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountInvoicesByProvider", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountInvoicesByProvider indicates an expected call of CountInvoicesByProvider.
func (mr *MockQuerierMockRecorder) CountInvoicesByProvider(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountInvoicesByProvider", reflect.TypeOf((*MockQuerier)(nil).CountInvoicesByProvider), ctx, arg)
}

// CountInvoicesByStatus mocks base method.
func (m *MockQuerier) CountInvoicesByStatus(ctx context.Context, arg db.CountInvoicesByStatusParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountInvoicesByStatus", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountInvoicesByStatus indicates an expected call of CountInvoicesByStatus.
func (mr *MockQuerierMockRecorder) CountInvoicesByStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountInvoicesByStatus", reflect.TypeOf((*MockQuerier)(nil).CountInvoicesByStatus), ctx, arg)
}

// CountInvoicesByWorkspace mocks base method.
func (m *MockQuerier) CountInvoicesByWorkspace(ctx context.Context, workspaceID uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountInvoicesByWorkspace", ctx, workspaceID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountInvoicesByWorkspace indicates an expected call of CountInvoicesByWorkspace.
func (mr *MockQuerierMockRecorder) CountInvoicesByWorkspace(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountInvoicesByWorkspace", reflect.TypeOf((*MockQuerier)(nil).CountInvoicesByWorkspace), ctx, workspaceID)
}

// CountPaymentsByWorkspace mocks base method.
func (m *MockQuerier) CountPaymentsByWorkspace(ctx context.Context, workspaceID uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountPaymentsByWorkspace", ctx, workspaceID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountPaymentsByWorkspace indicates an expected call of CountPaymentsByWorkspace.
func (mr *MockQuerierMockRecorder) CountPaymentsByWorkspace(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountPaymentsByWorkspace", reflect.TypeOf((*MockQuerier)(nil).CountPaymentsByWorkspace), ctx, workspaceID)
}

// CountProductAddons mocks base method.
func (m *MockQuerier) CountProductAddons(ctx context.Context, baseProductID uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountProductAddons", ctx, baseProductID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountProductAddons indicates an expected call of CountProductAddons.
func (mr *MockQuerierMockRecorder) CountProductAddons(ctx, baseProductID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountProductAddons", reflect.TypeOf((*MockQuerier)(nil).CountProductAddons), ctx, baseProductID)
}

// CountProducts mocks base method.
func (m *MockQuerier) CountProducts(ctx context.Context, workspaceID uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountProducts", ctx, workspaceID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountProducts indicates an expected call of CountProducts.
func (mr *MockQuerierMockRecorder) CountProducts(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountProducts", reflect.TypeOf((*MockQuerier)(nil).CountProducts), ctx, workspaceID)
}

// CountProviderAccountsByProvider mocks base method.
func (m *MockQuerier) CountProviderAccountsByProvider(ctx context.Context, providerName string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountProviderAccountsByProvider", ctx, providerName)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountProviderAccountsByProvider indicates an expected call of CountProviderAccountsByProvider.
func (mr *MockQuerierMockRecorder) CountProviderAccountsByProvider(ctx, providerName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountProviderAccountsByProvider", reflect.TypeOf((*MockQuerier)(nil).CountProviderAccountsByProvider), ctx, providerName)
}

// CountProviderAccountsByWorkspace mocks base method.
func (m *MockQuerier) CountProviderAccountsByWorkspace(ctx context.Context, workspaceID uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountProviderAccountsByWorkspace", ctx, workspaceID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountProviderAccountsByWorkspace indicates an expected call of CountProviderAccountsByWorkspace.
func (mr *MockQuerierMockRecorder) CountProviderAccountsByWorkspace(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountProviderAccountsByWorkspace", reflect.TypeOf((*MockQuerier)(nil).CountProviderAccountsByWorkspace), ctx, workspaceID)
}

// CountSubscriptionEventDetails mocks base method.
func (m *MockQuerier) CountSubscriptionEventDetails(ctx context.Context, workspaceID uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountSubscriptionEventDetails", ctx, workspaceID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountSubscriptionEventDetails indicates an expected call of CountSubscriptionEventDetails.
func (mr *MockQuerierMockRecorder) CountSubscriptionEventDetails(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountSubscriptionEventDetails", reflect.TypeOf((*MockQuerier)(nil).CountSubscriptionEventDetails), ctx, workspaceID)
}

// CountSubscriptionEvents mocks base method.
func (m *MockQuerier) CountSubscriptionEvents(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountSubscriptionEvents", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountSubscriptionEvents indicates an expected call of CountSubscriptionEvents.
func (mr *MockQuerierMockRecorder) CountSubscriptionEvents(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountSubscriptionEvents", reflect.TypeOf((*MockQuerier)(nil).CountSubscriptionEvents), ctx)
}

// CountSubscriptionEventsBySubscription mocks base method.
func (m *MockQuerier) CountSubscriptionEventsBySubscription(ctx context.Context, subscriptionID uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountSubscriptionEventsBySubscription", ctx, subscriptionID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountSubscriptionEventsBySubscription indicates an expected call of CountSubscriptionEventsBySubscription.
func (mr *MockQuerierMockRecorder) CountSubscriptionEventsBySubscription(ctx, subscriptionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountSubscriptionEventsBySubscription", reflect.TypeOf((*MockQuerier)(nil).CountSubscriptionEventsBySubscription), ctx, subscriptionID)
}

// CountSubscriptionEventsByType mocks base method.
func (m *MockQuerier) CountSubscriptionEventsByType(ctx context.Context, eventType db.SubscriptionEventType) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountSubscriptionEventsByType", ctx, eventType)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountSubscriptionEventsByType indicates an expected call of CountSubscriptionEventsByType.
func (mr *MockQuerierMockRecorder) CountSubscriptionEventsByType(ctx, eventType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountSubscriptionEventsByType", reflect.TypeOf((*MockQuerier)(nil).CountSubscriptionEventsByType), ctx, eventType)
}

// CountSubscriptionLineItems mocks base method.
func (m *MockQuerier) CountSubscriptionLineItems(ctx context.Context, subscriptionID uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountSubscriptionLineItems", ctx, subscriptionID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountSubscriptionLineItems indicates an expected call of CountSubscriptionLineItems.
func (mr *MockQuerierMockRecorder) CountSubscriptionLineItems(ctx, subscriptionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountSubscriptionLineItems", reflect.TypeOf((*MockQuerier)(nil).CountSubscriptionLineItems), ctx, subscriptionID)
}

// CountSubscriptions mocks base method.
func (m *MockQuerier) CountSubscriptions(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountSubscriptions", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountSubscriptions indicates an expected call of CountSubscriptions.
func (mr *MockQuerierMockRecorder) CountSubscriptions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountSubscriptions", reflect.TypeOf((*MockQuerier)(nil).CountSubscriptions), ctx)
}

// CountSubscriptionsByStatus mocks base method.
func (m *MockQuerier) CountSubscriptionsByStatus(ctx context.Context, status db.SubscriptionStatus) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountSubscriptionsByStatus", ctx, status)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountSubscriptionsByStatus indicates an expected call of CountSubscriptionsByStatus.
func (mr *MockQuerierMockRecorder) CountSubscriptionsByStatus(ctx, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountSubscriptionsByStatus", reflect.TypeOf((*MockQuerier)(nil).CountSubscriptionsByStatus), ctx, status)
}

// CountSuccessfulAttempts mocks base method.
func (m *MockQuerier) CountSuccessfulAttempts(ctx context.Context, campaignID uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountSuccessfulAttempts", ctx, campaignID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountSuccessfulAttempts indicates an expected call of CountSuccessfulAttempts.
func (mr *MockQuerierMockRecorder) CountSuccessfulAttempts(ctx, campaignID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountSuccessfulAttempts", reflect.TypeOf((*MockQuerier)(nil).CountSuccessfulAttempts), ctx, campaignID)
}

// CountSyncEventsByEntityType mocks base method.
func (m *MockQuerier) CountSyncEventsByEntityType(ctx context.Context, arg db.CountSyncEventsByEntityTypeParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountSyncEventsByEntityType", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountSyncEventsByEntityType indicates an expected call of CountSyncEventsByEntityType.
func (mr *MockQuerierMockRecorder) CountSyncEventsByEntityType(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountSyncEventsByEntityType", reflect.TypeOf((*MockQuerier)(nil).CountSyncEventsByEntityType), ctx, arg)
}

// CountSyncEventsBySession mocks base method.
func (m *MockQuerier) CountSyncEventsBySession(ctx context.Context, sessionID uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountSyncEventsBySession", ctx, sessionID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountSyncEventsBySession indicates an expected call of CountSyncEventsBySession.
func (mr *MockQuerierMockRecorder) CountSyncEventsBySession(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountSyncEventsBySession", reflect.TypeOf((*MockQuerier)(nil).CountSyncEventsBySession), ctx, sessionID)
}

// CountSyncEventsBySessionAndType mocks base method.
func (m *MockQuerier) CountSyncEventsBySessionAndType(ctx context.Context, arg db.CountSyncEventsBySessionAndTypeParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountSyncEventsBySessionAndType", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountSyncEventsBySessionAndType indicates an expected call of CountSyncEventsBySessionAndType.
func (mr *MockQuerierMockRecorder) CountSyncEventsBySessionAndType(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountSyncEventsBySessionAndType", reflect.TypeOf((*MockQuerier)(nil).CountSyncEventsBySessionAndType), ctx, arg)
}

// CountSyncSessions mocks base method.
func (m *MockQuerier) CountSyncSessions(ctx context.Context, workspaceID uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountSyncSessions", ctx, workspaceID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountSyncSessions indicates an expected call of CountSyncSessions.
func (mr *MockQuerierMockRecorder) CountSyncSessions(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountSyncSessions", reflect.TypeOf((*MockQuerier)(nil).CountSyncSessions), ctx, workspaceID)
}

// CountSyncSessionsByProvider mocks base method.
func (m *MockQuerier) CountSyncSessionsByProvider(ctx context.Context, arg db.CountSyncSessionsByProviderParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountSyncSessionsByProvider", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountSyncSessionsByProvider indicates an expected call of CountSyncSessionsByProvider.
func (mr *MockQuerierMockRecorder) CountSyncSessionsByProvider(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountSyncSessionsByProvider", reflect.TypeOf((*MockQuerier)(nil).CountSyncSessionsByProvider), ctx, arg)
}

// CountVerifiedCustomerWallets mocks base method.
func (m *MockQuerier) CountVerifiedCustomerWallets(ctx context.Context, customerID uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountVerifiedCustomerWallets", ctx, customerID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountVerifiedCustomerWallets indicates an expected call of CountVerifiedCustomerWallets.
func (mr *MockQuerierMockRecorder) CountVerifiedCustomerWallets(ctx, customerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountVerifiedCustomerWallets", reflect.TypeOf((*MockQuerier)(nil).CountVerifiedCustomerWallets), ctx, customerID)
}

// CountWebhookEventsByProvider mocks base method.
func (m *MockQuerier) CountWebhookEventsByProvider(ctx context.Context, arg db.CountWebhookEventsByProviderParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountWebhookEventsByProvider", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountWebhookEventsByProvider indicates an expected call of CountWebhookEventsByProvider.
func (mr *MockQuerierMockRecorder) CountWebhookEventsByProvider(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountWebhookEventsByProvider", reflect.TypeOf((*MockQuerier)(nil).CountWebhookEventsByProvider), ctx, arg)
}

// CountWorkspaceCustomers mocks base method.
func (m *MockQuerier) CountWorkspaceCustomers(ctx context.Context, workspaceID uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountWorkspaceCustomers", ctx, workspaceID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountWorkspaceCustomers indicates an expected call of CountWorkspaceCustomers.
func (mr *MockQuerierMockRecorder) CountWorkspaceCustomers(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountWorkspaceCustomers", reflect.TypeOf((*MockQuerier)(nil).CountWorkspaceCustomers), ctx, workspaceID)
}

// CountWorkspacePaymentConfigurations mocks base method.
func (m *MockQuerier) CountWorkspacePaymentConfigurations(ctx context.Context, workspaceID uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountWorkspacePaymentConfigurations", ctx, workspaceID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountWorkspacePaymentConfigurations indicates an expected call of CountWorkspacePaymentConfigurations.
func (mr *MockQuerierMockRecorder) CountWorkspacePaymentConfigurations(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountWorkspacePaymentConfigurations", reflect.TypeOf((*MockQuerier)(nil).CountWorkspacePaymentConfigurations), ctx, workspaceID)
}

// CreateAPIKey mocks base method.
func (m *MockQuerier) CreateAPIKey(ctx context.Context, arg db.CreateAPIKeyParams) (db.ApiKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAPIKey", ctx, arg)
	ret0, _ := ret[0].(db.ApiKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAPIKey indicates an expected call of CreateAPIKey.
func (mr *MockQuerierMockRecorder) CreateAPIKey(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAPIKey", reflect.TypeOf((*MockQuerier)(nil).CreateAPIKey), ctx, arg)
}

// CreateAccount mocks base method.
func (m *MockQuerier) CreateAccount(ctx context.Context, arg db.CreateAccountParams) (db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx, arg)
	ret0, _ := ret[0].(db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockQuerierMockRecorder) CreateAccount(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockQuerier)(nil).CreateAccount), ctx, arg)
}

// CreateCircleUser mocks base method.
func (m *MockQuerier) CreateCircleUser(ctx context.Context, arg db.CreateCircleUserParams) (db.CircleUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCircleUser", ctx, arg)
	ret0, _ := ret[0].(db.CircleUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCircleUser indicates an expected call of CreateCircleUser.
func (mr *MockQuerierMockRecorder) CreateCircleUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCircleUser", reflect.TypeOf((*MockQuerier)(nil).CreateCircleUser), ctx, arg)
}

// CreateCircleWalletEntry mocks base method.
func (m *MockQuerier) CreateCircleWalletEntry(ctx context.Context, arg db.CreateCircleWalletEntryParams) (db.CircleWallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCircleWalletEntry", ctx, arg)
	ret0, _ := ret[0].(db.CircleWallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCircleWalletEntry indicates an expected call of CreateCircleWalletEntry.
func (mr *MockQuerierMockRecorder) CreateCircleWalletEntry(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCircleWalletEntry", reflect.TypeOf((*MockQuerier)(nil).CreateCircleWalletEntry), ctx, arg)
}

// CreateCustomer mocks base method.
func (m *MockQuerier) CreateCustomer(ctx context.Context, arg db.CreateCustomerParams) (db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomer", ctx, arg)
	ret0, _ := ret[0].(db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomer indicates an expected call of CreateCustomer.
func (mr *MockQuerierMockRecorder) CreateCustomer(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomer", reflect.TypeOf((*MockQuerier)(nil).CreateCustomer), ctx, arg)
}

// CreateCustomerWallet mocks base method.
func (m *MockQuerier) CreateCustomerWallet(ctx context.Context, arg db.CreateCustomerWalletParams) (db.CustomerWallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomerWallet", ctx, arg)
	ret0, _ := ret[0].(db.CustomerWallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomerWallet indicates an expected call of CreateCustomerWallet.
func (mr *MockQuerierMockRecorder) CreateCustomerWallet(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomerWallet", reflect.TypeOf((*MockQuerier)(nil).CreateCustomerWallet), ctx, arg)
}

// CreateCustomerWithSync mocks base method.
func (m *MockQuerier) CreateCustomerWithSync(ctx context.Context, arg db.CreateCustomerWithSyncParams) (db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomerWithSync", ctx, arg)
	ret0, _ := ret[0].(db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomerWithSync indicates an expected call of CreateCustomerWithSync.
func (mr *MockQuerierMockRecorder) CreateCustomerWithSync(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomerWithSync", reflect.TypeOf((*MockQuerier)(nil).CreateCustomerWithSync), ctx, arg)
}

// CreateCustomerWithWeb3Auth mocks base method.
func (m *MockQuerier) CreateCustomerWithWeb3Auth(ctx context.Context, arg db.CreateCustomerWithWeb3AuthParams) (db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomerWithWeb3Auth", ctx, arg)
	ret0, _ := ret[0].(db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomerWithWeb3Auth indicates an expected call of CreateCustomerWithWeb3Auth.
func (mr *MockQuerierMockRecorder) CreateCustomerWithWeb3Auth(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomerWithWeb3Auth", reflect.TypeOf((*MockQuerier)(nil).CreateCustomerWithWeb3Auth), ctx, arg)
}

// CreateDashboardMetric mocks base method.
func (m *MockQuerier) CreateDashboardMetric(ctx context.Context, arg db.CreateDashboardMetricParams) (db.DashboardMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDashboardMetric", ctx, arg)
	ret0, _ := ret[0].(db.DashboardMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDashboardMetric indicates an expected call of CreateDashboardMetric.
func (mr *MockQuerierMockRecorder) CreateDashboardMetric(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDashboardMetric", reflect.TypeOf((*MockQuerier)(nil).CreateDashboardMetric), ctx, arg)
}

// CreateDelegationData mocks base method.
func (m *MockQuerier) CreateDelegationData(ctx context.Context, arg db.CreateDelegationDataParams) (db.DelegationDatum, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDelegationData", ctx, arg)
	ret0, _ := ret[0].(db.DelegationDatum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDelegationData indicates an expected call of CreateDelegationData.
func (mr *MockQuerierMockRecorder) CreateDelegationData(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDelegationData", reflect.TypeOf((*MockQuerier)(nil).CreateDelegationData), ctx, arg)
}

// CreateDunningAttempt mocks base method.
func (m *MockQuerier) CreateDunningAttempt(ctx context.Context, arg db.CreateDunningAttemptParams) (db.DunningAttempt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDunningAttempt", ctx, arg)
	ret0, _ := ret[0].(db.DunningAttempt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDunningAttempt indicates an expected call of CreateDunningAttempt.
func (mr *MockQuerierMockRecorder) CreateDunningAttempt(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDunningAttempt", reflect.TypeOf((*MockQuerier)(nil).CreateDunningAttempt), ctx, arg)
}

// CreateDunningCampaign mocks base method.
func (m *MockQuerier) CreateDunningCampaign(ctx context.Context, arg db.CreateDunningCampaignParams) (db.DunningCampaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDunningCampaign", ctx, arg)
	ret0, _ := ret[0].(db.DunningCampaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDunningCampaign indicates an expected call of CreateDunningCampaign.
func (mr *MockQuerierMockRecorder) CreateDunningCampaign(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDunningCampaign", reflect.TypeOf((*MockQuerier)(nil).CreateDunningCampaign), ctx, arg)
}

// CreateDunningConfiguration mocks base method.
func (m *MockQuerier) CreateDunningConfiguration(ctx context.Context, arg db.CreateDunningConfigurationParams) (db.DunningConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDunningConfiguration", ctx, arg)
	ret0, _ := ret[0].(db.DunningConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDunningConfiguration indicates an expected call of CreateDunningConfiguration.
func (mr *MockQuerierMockRecorder) CreateDunningConfiguration(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDunningConfiguration", reflect.TypeOf((*MockQuerier)(nil).CreateDunningConfiguration), ctx, arg)
}

// CreateDunningEmailTemplate mocks base method.
func (m *MockQuerier) CreateDunningEmailTemplate(ctx context.Context, arg db.CreateDunningEmailTemplateParams) (db.DunningEmailTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDunningEmailTemplate", ctx, arg)
	ret0, _ := ret[0].(db.DunningEmailTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDunningEmailTemplate indicates an expected call of CreateDunningEmailTemplate.
func (mr *MockQuerierMockRecorder) CreateDunningEmailTemplate(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDunningEmailTemplate", reflect.TypeOf((*MockQuerier)(nil).CreateDunningEmailTemplate), ctx, arg)
}

// CreateFailedRedemptionEvent mocks base method.
func (m *MockQuerier) CreateFailedRedemptionEvent(ctx context.Context, arg db.CreateFailedRedemptionEventParams) (db.SubscriptionEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFailedRedemptionEvent", ctx, arg)
	ret0, _ := ret[0].(db.SubscriptionEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFailedRedemptionEvent indicates an expected call of CreateFailedRedemptionEvent.
func (mr *MockQuerierMockRecorder) CreateFailedRedemptionEvent(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFailedRedemptionEvent", reflect.TypeOf((*MockQuerier)(nil).CreateFailedRedemptionEvent), ctx, arg)
}

// CreateFailedSubscriptionAttempt mocks base method.
func (m *MockQuerier) CreateFailedSubscriptionAttempt(ctx context.Context, arg db.CreateFailedSubscriptionAttemptParams) (db.FailedSubscriptionAttempt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFailedSubscriptionAttempt", ctx, arg)
	ret0, _ := ret[0].(db.FailedSubscriptionAttempt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFailedSubscriptionAttempt indicates an expected call of CreateFailedSubscriptionAttempt.
func (mr *MockQuerierMockRecorder) CreateFailedSubscriptionAttempt(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFailedSubscriptionAttempt", reflect.TypeOf((*MockQuerier)(nil).CreateFailedSubscriptionAttempt), ctx, arg)
}

// CreateGasFeePayment mocks base method.
func (m *MockQuerier) CreateGasFeePayment(ctx context.Context, arg db.CreateGasFeePaymentParams) (db.GasFeePayment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGasFeePayment", ctx, arg)
	ret0, _ := ret[0].(db.GasFeePayment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGasFeePayment indicates an expected call of CreateGasFeePayment.
func (mr *MockQuerierMockRecorder) CreateGasFeePayment(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGasFeePayment", reflect.TypeOf((*MockQuerier)(nil).CreateGasFeePayment), ctx, arg)
}

// CreateGasSponsorshipConfig mocks base method.
func (m *MockQuerier) CreateGasSponsorshipConfig(ctx context.Context, arg db.CreateGasSponsorshipConfigParams) (db.GasSponsorshipConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGasSponsorshipConfig", ctx, arg)
	ret0, _ := ret[0].(db.GasSponsorshipConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGasSponsorshipConfig indicates an expected call of CreateGasSponsorshipConfig.
func (mr *MockQuerierMockRecorder) CreateGasSponsorshipConfig(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGasSponsorshipConfig", reflect.TypeOf((*MockQuerier)(nil).CreateGasSponsorshipConfig), ctx, arg)
}

// CreateInvoice mocks base method.
func (m *MockQuerier) CreateInvoice(ctx context.Context, arg db.CreateInvoiceParams) (db.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvoice", ctx, arg)
	ret0, _ := ret[0].(db.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInvoice indicates an expected call of CreateInvoice.
func (mr *MockQuerierMockRecorder) CreateInvoice(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvoice", reflect.TypeOf((*MockQuerier)(nil).CreateInvoice), ctx, arg)
}

// CreateInvoiceActivity mocks base method.
func (m *MockQuerier) CreateInvoiceActivity(ctx context.Context, arg db.CreateInvoiceActivityParams) (db.InvoiceActivity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvoiceActivity", ctx, arg)
	ret0, _ := ret[0].(db.InvoiceActivity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInvoiceActivity indicates an expected call of CreateInvoiceActivity.
func (mr *MockQuerierMockRecorder) CreateInvoiceActivity(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvoiceActivity", reflect.TypeOf((*MockQuerier)(nil).CreateInvoiceActivity), ctx, arg)
}

// CreateInvoiceLineItem mocks base method.
func (m *MockQuerier) CreateInvoiceLineItem(ctx context.Context, arg db.CreateInvoiceLineItemParams) (db.InvoiceLineItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvoiceLineItem", ctx, arg)
	ret0, _ := ret[0].(db.InvoiceLineItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInvoiceLineItem indicates an expected call of CreateInvoiceLineItem.
func (mr *MockQuerierMockRecorder) CreateInvoiceLineItem(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvoiceLineItem", reflect.TypeOf((*MockQuerier)(nil).CreateInvoiceLineItem), ctx, arg)
}

// CreateInvoiceLineItemBatch mocks base method.
func (m *MockQuerier) CreateInvoiceLineItemBatch(ctx context.Context, arg []db.CreateInvoiceLineItemBatchParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvoiceLineItemBatch", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInvoiceLineItemBatch indicates an expected call of CreateInvoiceLineItemBatch.
func (mr *MockQuerierMockRecorder) CreateInvoiceLineItemBatch(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvoiceLineItemBatch", reflect.TypeOf((*MockQuerier)(nil).CreateInvoiceLineItemBatch), ctx, arg)
}

// CreateInvoiceLineItemFromSubscription mocks base method.
func (m *MockQuerier) CreateInvoiceLineItemFromSubscription(ctx context.Context, arg db.CreateInvoiceLineItemFromSubscriptionParams) (db.InvoiceLineItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvoiceLineItemFromSubscription", ctx, arg)
	ret0, _ := ret[0].(db.InvoiceLineItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInvoiceLineItemFromSubscription indicates an expected call of CreateInvoiceLineItemFromSubscription.
func (mr *MockQuerierMockRecorder) CreateInvoiceLineItemFromSubscription(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvoiceLineItemFromSubscription", reflect.TypeOf((*MockQuerier)(nil).CreateInvoiceLineItemFromSubscription), ctx, arg)
}

// CreateInvoiceWithDetails mocks base method.
func (m *MockQuerier) CreateInvoiceWithDetails(ctx context.Context, arg db.CreateInvoiceWithDetailsParams) (db.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvoiceWithDetails", ctx, arg)
	ret0, _ := ret[0].(db.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInvoiceWithDetails indicates an expected call of CreateInvoiceWithDetails.
func (mr *MockQuerierMockRecorder) CreateInvoiceWithDetails(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvoiceWithDetails", reflect.TypeOf((*MockQuerier)(nil).CreateInvoiceWithDetails), ctx, arg)
}

// CreateNetwork mocks base method.
func (m *MockQuerier) CreateNetwork(ctx context.Context, arg db.CreateNetworkParams) (db.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetwork", ctx, arg)
	ret0, _ := ret[0].(db.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNetwork indicates an expected call of CreateNetwork.
func (mr *MockQuerierMockRecorder) CreateNetwork(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetwork", reflect.TypeOf((*MockQuerier)(nil).CreateNetwork), ctx, arg)
}

// CreateOrUpdateDunningAnalytics mocks base method.
func (m *MockQuerier) CreateOrUpdateDunningAnalytics(ctx context.Context, arg db.CreateOrUpdateDunningAnalyticsParams) (db.DunningAnalytic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateDunningAnalytics", ctx, arg)
	ret0, _ := ret[0].(db.DunningAnalytic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateDunningAnalytics indicates an expected call of CreateOrUpdateDunningAnalytics.
func (mr *MockQuerierMockRecorder) CreateOrUpdateDunningAnalytics(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateDunningAnalytics", reflect.TypeOf((*MockQuerier)(nil).CreateOrUpdateDunningAnalytics), ctx, arg)
}

// CreatePayment mocks base method.
func (m *MockQuerier) CreatePayment(ctx context.Context, arg db.CreatePaymentParams) (db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayment", ctx, arg)
	ret0, _ := ret[0].(db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePayment indicates an expected call of CreatePayment.
func (mr *MockQuerierMockRecorder) CreatePayment(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayment", reflect.TypeOf((*MockQuerier)(nil).CreatePayment), ctx, arg)
}

// CreatePaymentBatch mocks base method.
func (m *MockQuerier) CreatePaymentBatch(ctx context.Context, arg []db.CreatePaymentBatchParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePaymentBatch", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePaymentBatch indicates an expected call of CreatePaymentBatch.
func (mr *MockQuerierMockRecorder) CreatePaymentBatch(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePaymentBatch", reflect.TypeOf((*MockQuerier)(nil).CreatePaymentBatch), ctx, arg)
}

// CreatePaymentLink mocks base method.
func (m *MockQuerier) CreatePaymentLink(ctx context.Context, arg db.CreatePaymentLinkParams) (db.PaymentLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePaymentLink", ctx, arg)
	ret0, _ := ret[0].(db.PaymentLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePaymentLink indicates an expected call of CreatePaymentLink.
func (mr *MockQuerierMockRecorder) CreatePaymentLink(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePaymentLink", reflect.TypeOf((*MockQuerier)(nil).CreatePaymentLink), ctx, arg)
}

// CreateProduct mocks base method.
func (m *MockQuerier) CreateProduct(ctx context.Context, arg db.CreateProductParams) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", ctx, arg)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockQuerierMockRecorder) CreateProduct(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockQuerier)(nil).CreateProduct), ctx, arg)
}

// CreateProductAddonRelationship mocks base method.
func (m *MockQuerier) CreateProductAddonRelationship(ctx context.Context, arg db.CreateProductAddonRelationshipParams) (db.ProductAddonRelationship, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProductAddonRelationship", ctx, arg)
	ret0, _ := ret[0].(db.ProductAddonRelationship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProductAddonRelationship indicates an expected call of CreateProductAddonRelationship.
func (mr *MockQuerierMockRecorder) CreateProductAddonRelationship(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProductAddonRelationship", reflect.TypeOf((*MockQuerier)(nil).CreateProductAddonRelationship), ctx, arg)
}

// CreateProductToken mocks base method.
func (m *MockQuerier) CreateProductToken(ctx context.Context, arg db.CreateProductTokenParams) (db.ProductsToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProductToken", ctx, arg)
	ret0, _ := ret[0].(db.ProductsToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProductToken indicates an expected call of CreateProductToken.
func (mr *MockQuerierMockRecorder) CreateProductToken(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProductToken", reflect.TypeOf((*MockQuerier)(nil).CreateProductToken), ctx, arg)
}

// CreateProductWithSync mocks base method.
func (m *MockQuerier) CreateProductWithSync(ctx context.Context, arg db.CreateProductWithSyncParams) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProductWithSync", ctx, arg)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProductWithSync indicates an expected call of CreateProductWithSync.
func (mr *MockQuerierMockRecorder) CreateProductWithSync(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProductWithSync", reflect.TypeOf((*MockQuerier)(nil).CreateProductWithSync), ctx, arg)
}

// CreateProrationRecord mocks base method.
func (m *MockQuerier) CreateProrationRecord(ctx context.Context, arg db.CreateProrationRecordParams) (db.SubscriptionProration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProrationRecord", ctx, arg)
	ret0, _ := ret[0].(db.SubscriptionProration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProrationRecord indicates an expected call of CreateProrationRecord.
func (mr *MockQuerierMockRecorder) CreateProrationRecord(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProrationRecord", reflect.TypeOf((*MockQuerier)(nil).CreateProrationRecord), ctx, arg)
}

// CreateRedemptionEvent mocks base method.
func (m *MockQuerier) CreateRedemptionEvent(ctx context.Context, arg db.CreateRedemptionEventParams) (db.SubscriptionEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRedemptionEvent", ctx, arg)
	ret0, _ := ret[0].(db.SubscriptionEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRedemptionEvent indicates an expected call of CreateRedemptionEvent.
func (mr *MockQuerierMockRecorder) CreateRedemptionEvent(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRedemptionEvent", reflect.TypeOf((*MockQuerier)(nil).CreateRedemptionEvent), ctx, arg)
}

// CreateScheduleChange mocks base method.
func (m *MockQuerier) CreateScheduleChange(ctx context.Context, arg db.CreateScheduleChangeParams) (db.SubscriptionScheduleChange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateScheduleChange", ctx, arg)
	ret0, _ := ret[0].(db.SubscriptionScheduleChange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateScheduleChange indicates an expected call of CreateScheduleChange.
func (mr *MockQuerierMockRecorder) CreateScheduleChange(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScheduleChange", reflect.TypeOf((*MockQuerier)(nil).CreateScheduleChange), ctx, arg)
}

// CreateSubscription mocks base method.
func (m *MockQuerier) CreateSubscription(ctx context.Context, arg db.CreateSubscriptionParams) (db.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscription", ctx, arg)
	ret0, _ := ret[0].(db.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubscription indicates an expected call of CreateSubscription.
func (mr *MockQuerierMockRecorder) CreateSubscription(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscription", reflect.TypeOf((*MockQuerier)(nil).CreateSubscription), ctx, arg)
}

// CreateSubscriptionEvent mocks base method.
func (m *MockQuerier) CreateSubscriptionEvent(ctx context.Context, arg db.CreateSubscriptionEventParams) (db.SubscriptionEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscriptionEvent", ctx, arg)
	ret0, _ := ret[0].(db.SubscriptionEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubscriptionEvent indicates an expected call of CreateSubscriptionEvent.
func (mr *MockQuerierMockRecorder) CreateSubscriptionEvent(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscriptionEvent", reflect.TypeOf((*MockQuerier)(nil).CreateSubscriptionEvent), ctx, arg)
}

// CreateSubscriptionLineItem mocks base method.
func (m *MockQuerier) CreateSubscriptionLineItem(ctx context.Context, arg db.CreateSubscriptionLineItemParams) (db.SubscriptionLineItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscriptionLineItem", ctx, arg)
	ret0, _ := ret[0].(db.SubscriptionLineItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubscriptionLineItem indicates an expected call of CreateSubscriptionLineItem.
func (mr *MockQuerierMockRecorder) CreateSubscriptionLineItem(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscriptionLineItem", reflect.TypeOf((*MockQuerier)(nil).CreateSubscriptionLineItem), ctx, arg)
}

// CreateSubscriptionWithSync mocks base method.
func (m *MockQuerier) CreateSubscriptionWithSync(ctx context.Context, arg db.CreateSubscriptionWithSyncParams) (db.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscriptionWithSync", ctx, arg)
	ret0, _ := ret[0].(db.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubscriptionWithSync indicates an expected call of CreateSubscriptionWithSync.
func (mr *MockQuerierMockRecorder) CreateSubscriptionWithSync(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscriptionWithSync", reflect.TypeOf((*MockQuerier)(nil).CreateSubscriptionWithSync), ctx, arg)
}

// CreateSyncEvent mocks base method.
func (m *MockQuerier) CreateSyncEvent(ctx context.Context, arg db.CreateSyncEventParams) (db.PaymentSyncEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSyncEvent", ctx, arg)
	ret0, _ := ret[0].(db.PaymentSyncEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSyncEvent indicates an expected call of CreateSyncEvent.
func (mr *MockQuerierMockRecorder) CreateSyncEvent(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSyncEvent", reflect.TypeOf((*MockQuerier)(nil).CreateSyncEvent), ctx, arg)
}

// CreateSyncSession mocks base method.
func (m *MockQuerier) CreateSyncSession(ctx context.Context, arg db.CreateSyncSessionParams) (db.PaymentSyncSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSyncSession", ctx, arg)
	ret0, _ := ret[0].(db.PaymentSyncSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSyncSession indicates an expected call of CreateSyncSession.
func (mr *MockQuerierMockRecorder) CreateSyncSession(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSyncSession", reflect.TypeOf((*MockQuerier)(nil).CreateSyncSession), ctx, arg)
}

// CreateToken mocks base method.
func (m *MockQuerier) CreateToken(ctx context.Context, arg db.CreateTokenParams) (db.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", ctx, arg)
	ret0, _ := ret[0].(db.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockQuerierMockRecorder) CreateToken(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockQuerier)(nil).CreateToken), ctx, arg)
}

// CreateUser mocks base method.
func (m *MockQuerier) CreateUser(ctx context.Context, arg db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, arg)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockQuerierMockRecorder) CreateUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockQuerier)(nil).CreateUser), ctx, arg)
}

// CreateWallet mocks base method.
func (m *MockQuerier) CreateWallet(ctx context.Context, arg db.CreateWalletParams) (db.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", ctx, arg)
	ret0, _ := ret[0].(db.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWallet indicates an expected call of CreateWallet.
func (mr *MockQuerierMockRecorder) CreateWallet(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockQuerier)(nil).CreateWallet), ctx, arg)
}

// CreateWebhookEvent mocks base method.
func (m *MockQuerier) CreateWebhookEvent(ctx context.Context, arg db.CreateWebhookEventParams) (db.PaymentSyncEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWebhookEvent", ctx, arg)
	ret0, _ := ret[0].(db.PaymentSyncEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWebhookEvent indicates an expected call of CreateWebhookEvent.
func (mr *MockQuerierMockRecorder) CreateWebhookEvent(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWebhookEvent", reflect.TypeOf((*MockQuerier)(nil).CreateWebhookEvent), ctx, arg)
}

// CreateWorkspace mocks base method.
func (m *MockQuerier) CreateWorkspace(ctx context.Context, arg db.CreateWorkspaceParams) (db.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkspace", ctx, arg)
	ret0, _ := ret[0].(db.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkspace indicates an expected call of CreateWorkspace.
func (mr *MockQuerierMockRecorder) CreateWorkspace(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkspace", reflect.TypeOf((*MockQuerier)(nil).CreateWorkspace), ctx, arg)
}

// CreateWorkspacePaymentConfiguration mocks base method.
func (m *MockQuerier) CreateWorkspacePaymentConfiguration(ctx context.Context, arg db.CreateWorkspacePaymentConfigurationParams) (db.WorkspacePaymentConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkspacePaymentConfiguration", ctx, arg)
	ret0, _ := ret[0].(db.WorkspacePaymentConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkspacePaymentConfiguration indicates an expected call of CreateWorkspacePaymentConfiguration.
func (mr *MockQuerierMockRecorder) CreateWorkspacePaymentConfiguration(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkspacePaymentConfiguration", reflect.TypeOf((*MockQuerier)(nil).CreateWorkspacePaymentConfiguration), ctx, arg)
}

// CreateWorkspaceProviderAccount mocks base method.
func (m *MockQuerier) CreateWorkspaceProviderAccount(ctx context.Context, arg db.CreateWorkspaceProviderAccountParams) (db.WorkspaceProviderAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkspaceProviderAccount", ctx, arg)
	ret0, _ := ret[0].(db.WorkspaceProviderAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkspaceProviderAccount indicates an expected call of CreateWorkspaceProviderAccount.
func (mr *MockQuerierMockRecorder) CreateWorkspaceProviderAccount(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkspaceProviderAccount", reflect.TypeOf((*MockQuerier)(nil).CreateWorkspaceProviderAccount), ctx, arg)
}

// DeactivateAllProductTokens mocks base method.
func (m *MockQuerier) DeactivateAllProductTokens(ctx context.Context, productID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateAllProductTokens", ctx, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeactivateAllProductTokens indicates an expected call of DeactivateAllProductTokens.
func (mr *MockQuerierMockRecorder) DeactivateAllProductTokens(ctx, productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateAllProductTokens", reflect.TypeOf((*MockQuerier)(nil).DeactivateAllProductTokens), ctx, productID)
}

// DeactivateAllProductTokensForNetwork mocks base method.
func (m *MockQuerier) DeactivateAllProductTokensForNetwork(ctx context.Context, arg db.DeactivateAllProductTokensForNetworkParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateAllProductTokensForNetwork", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeactivateAllProductTokensForNetwork indicates an expected call of DeactivateAllProductTokensForNetwork.
func (mr *MockQuerierMockRecorder) DeactivateAllProductTokensForNetwork(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateAllProductTokensForNetwork", reflect.TypeOf((*MockQuerier)(nil).DeactivateAllProductTokensForNetwork), ctx, arg)
}

// DeactivateFiatCurrency mocks base method.
func (m *MockQuerier) DeactivateFiatCurrency(ctx context.Context, code string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateFiatCurrency", ctx, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeactivateFiatCurrency indicates an expected call of DeactivateFiatCurrency.
func (mr *MockQuerierMockRecorder) DeactivateFiatCurrency(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateFiatCurrency", reflect.TypeOf((*MockQuerier)(nil).DeactivateFiatCurrency), ctx, code)
}

// DeactivateNetwork mocks base method.
func (m *MockQuerier) DeactivateNetwork(ctx context.Context, id uuid.UUID) (db.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateNetwork", ctx, id)
	ret0, _ := ret[0].(db.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeactivateNetwork indicates an expected call of DeactivateNetwork.
func (mr *MockQuerierMockRecorder) DeactivateNetwork(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateNetwork", reflect.TypeOf((*MockQuerier)(nil).DeactivateNetwork), ctx, id)
}

// DeactivatePaymentLink mocks base method.
func (m *MockQuerier) DeactivatePaymentLink(ctx context.Context, arg db.DeactivatePaymentLinkParams) (db.PaymentLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivatePaymentLink", ctx, arg)
	ret0, _ := ret[0].(db.PaymentLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeactivatePaymentLink indicates an expected call of DeactivatePaymentLink.
func (mr *MockQuerierMockRecorder) DeactivatePaymentLink(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivatePaymentLink", reflect.TypeOf((*MockQuerier)(nil).DeactivatePaymentLink), ctx, arg)
}

// DeactivateProduct mocks base method.
func (m *MockQuerier) DeactivateProduct(ctx context.Context, id uuid.UUID) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateProduct", ctx, id)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeactivateProduct indicates an expected call of DeactivateProduct.
func (mr *MockQuerierMockRecorder) DeactivateProduct(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateProduct", reflect.TypeOf((*MockQuerier)(nil).DeactivateProduct), ctx, id)
}

// DeactivateProductToken mocks base method.
func (m *MockQuerier) DeactivateProductToken(ctx context.Context, id uuid.UUID) (db.ProductsToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateProductToken", ctx, id)
	ret0, _ := ret[0].(db.ProductsToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeactivateProductToken indicates an expected call of DeactivateProductToken.
func (mr *MockQuerierMockRecorder) DeactivateProductToken(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateProductToken", reflect.TypeOf((*MockQuerier)(nil).DeactivateProductToken), ctx, id)
}

// DeactivateSubscriptionLineItem mocks base method.
func (m *MockQuerier) DeactivateSubscriptionLineItem(ctx context.Context, id uuid.UUID) (db.SubscriptionLineItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateSubscriptionLineItem", ctx, id)
	ret0, _ := ret[0].(db.SubscriptionLineItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeactivateSubscriptionLineItem indicates an expected call of DeactivateSubscriptionLineItem.
func (mr *MockQuerierMockRecorder) DeactivateSubscriptionLineItem(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateSubscriptionLineItem", reflect.TypeOf((*MockQuerier)(nil).DeactivateSubscriptionLineItem), ctx, id)
}

// DeactivateTemplatesByType mocks base method.
func (m *MockQuerier) DeactivateTemplatesByType(ctx context.Context, arg db.DeactivateTemplatesByTypeParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateTemplatesByType", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeactivateTemplatesByType indicates an expected call of DeactivateTemplatesByType.
func (mr *MockQuerierMockRecorder) DeactivateTemplatesByType(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateTemplatesByType", reflect.TypeOf((*MockQuerier)(nil).DeactivateTemplatesByType), ctx, arg)
}

// DeactivateToken mocks base method.
func (m *MockQuerier) DeactivateToken(ctx context.Context, id uuid.UUID) (db.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateToken", ctx, id)
	ret0, _ := ret[0].(db.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeactivateToken indicates an expected call of DeactivateToken.
func (mr *MockQuerierMockRecorder) DeactivateToken(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateToken", reflect.TypeOf((*MockQuerier)(nil).DeactivateToken), ctx, id)
}

// DeactivateWorkspacePaymentConfiguration mocks base method.
func (m *MockQuerier) DeactivateWorkspacePaymentConfiguration(ctx context.Context, arg db.DeactivateWorkspacePaymentConfigurationParams) (db.WorkspacePaymentConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateWorkspacePaymentConfiguration", ctx, arg)
	ret0, _ := ret[0].(db.WorkspacePaymentConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeactivateWorkspacePaymentConfiguration indicates an expected call of DeactivateWorkspacePaymentConfiguration.
func (mr *MockQuerierMockRecorder) DeactivateWorkspacePaymentConfiguration(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateWorkspacePaymentConfiguration", reflect.TypeOf((*MockQuerier)(nil).DeactivateWorkspacePaymentConfiguration), ctx, arg)
}

// DeactivateWorkspaceProviderAccount mocks base method.
func (m *MockQuerier) DeactivateWorkspaceProviderAccount(ctx context.Context, arg db.DeactivateWorkspaceProviderAccountParams) (db.WorkspaceProviderAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateWorkspaceProviderAccount", ctx, arg)
	ret0, _ := ret[0].(db.WorkspaceProviderAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeactivateWorkspaceProviderAccount indicates an expected call of DeactivateWorkspaceProviderAccount.
func (mr *MockQuerierMockRecorder) DeactivateWorkspaceProviderAccount(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateWorkspaceProviderAccount", reflect.TypeOf((*MockQuerier)(nil).DeactivateWorkspaceProviderAccount), ctx, arg)
}

// DeleteAPIKey mocks base method.
func (m *MockQuerier) DeleteAPIKey(ctx context.Context, arg db.DeleteAPIKeyParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAPIKey", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAPIKey indicates an expected call of DeleteAPIKey.
func (mr *MockQuerierMockRecorder) DeleteAPIKey(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAPIKey", reflect.TypeOf((*MockQuerier)(nil).DeleteAPIKey), ctx, arg)
}

// DeleteAccount mocks base method.
func (m *MockQuerier) DeleteAccount(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockQuerierMockRecorder) DeleteAccount(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockQuerier)(nil).DeleteAccount), ctx, id)
}

// DeleteAllAddonsForProduct mocks base method.
func (m *MockQuerier) DeleteAllAddonsForProduct(ctx context.Context, baseProductID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllAddonsForProduct", ctx, baseProductID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllAddonsForProduct indicates an expected call of DeleteAllAddonsForProduct.
func (mr *MockQuerierMockRecorder) DeleteAllAddonsForProduct(ctx, baseProductID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllAddonsForProduct", reflect.TypeOf((*MockQuerier)(nil).DeleteAllAddonsForProduct), ctx, baseProductID)
}

// DeleteAllSubscriptionLineItems mocks base method.
func (m *MockQuerier) DeleteAllSubscriptionLineItems(ctx context.Context, subscriptionID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSubscriptionLineItems", ctx, subscriptionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllSubscriptionLineItems indicates an expected call of DeleteAllSubscriptionLineItems.
func (mr *MockQuerierMockRecorder) DeleteAllSubscriptionLineItems(ctx, subscriptionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSubscriptionLineItems", reflect.TypeOf((*MockQuerier)(nil).DeleteAllSubscriptionLineItems), ctx, subscriptionID)
}

// DeleteCircleUser mocks base method.
func (m *MockQuerier) DeleteCircleUser(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCircleUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCircleUser indicates an expected call of DeleteCircleUser.
func (mr *MockQuerierMockRecorder) DeleteCircleUser(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCircleUser", reflect.TypeOf((*MockQuerier)(nil).DeleteCircleUser), ctx, id)
}

// DeleteCircleUserByWorkspaceID mocks base method.
func (m *MockQuerier) DeleteCircleUserByWorkspaceID(ctx context.Context, workspaceID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCircleUserByWorkspaceID", ctx, workspaceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCircleUserByWorkspaceID indicates an expected call of DeleteCircleUserByWorkspaceID.
func (mr *MockQuerierMockRecorder) DeleteCircleUserByWorkspaceID(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCircleUserByWorkspaceID", reflect.TypeOf((*MockQuerier)(nil).DeleteCircleUserByWorkspaceID), ctx, workspaceID)
}

// DeleteCustomer mocks base method.
func (m *MockQuerier) DeleteCustomer(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomer", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCustomer indicates an expected call of DeleteCustomer.
func (mr *MockQuerierMockRecorder) DeleteCustomer(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomer", reflect.TypeOf((*MockQuerier)(nil).DeleteCustomer), ctx, id)
}

// DeleteCustomerWallet mocks base method.
func (m *MockQuerier) DeleteCustomerWallet(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomerWallet", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCustomerWallet indicates an expected call of DeleteCustomerWallet.
func (mr *MockQuerierMockRecorder) DeleteCustomerWallet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomerWallet", reflect.TypeOf((*MockQuerier)(nil).DeleteCustomerWallet), ctx, id)
}

// DeleteCustomerWalletsByCustomer mocks base method.
func (m *MockQuerier) DeleteCustomerWalletsByCustomer(ctx context.Context, customerID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomerWalletsByCustomer", ctx, customerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCustomerWalletsByCustomer indicates an expected call of DeleteCustomerWalletsByCustomer.
func (mr *MockQuerierMockRecorder) DeleteCustomerWalletsByCustomer(ctx, customerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomerWalletsByCustomer", reflect.TypeOf((*MockQuerier)(nil).DeleteCustomerWalletsByCustomer), ctx, customerID)
}

// DeleteDelegationData mocks base method.
func (m *MockQuerier) DeleteDelegationData(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDelegationData", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDelegationData indicates an expected call of DeleteDelegationData.
func (mr *MockQuerierMockRecorder) DeleteDelegationData(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDelegationData", reflect.TypeOf((*MockQuerier)(nil).DeleteDelegationData), ctx, id)
}

// DeleteDunningConfiguration mocks base method.
func (m *MockQuerier) DeleteDunningConfiguration(ctx context.Context, id uuid.UUID) (db.DunningConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDunningConfiguration", ctx, id)
	ret0, _ := ret[0].(db.DunningConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDunningConfiguration indicates an expected call of DeleteDunningConfiguration.
func (mr *MockQuerierMockRecorder) DeleteDunningConfiguration(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDunningConfiguration", reflect.TypeOf((*MockQuerier)(nil).DeleteDunningConfiguration), ctx, id)
}

// DeleteDunningEmailTemplate mocks base method.
func (m *MockQuerier) DeleteDunningEmailTemplate(ctx context.Context, id uuid.UUID) (db.DunningEmailTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDunningEmailTemplate", ctx, id)
	ret0, _ := ret[0].(db.DunningEmailTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDunningEmailTemplate indicates an expected call of DeleteDunningEmailTemplate.
func (mr *MockQuerierMockRecorder) DeleteDunningEmailTemplate(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDunningEmailTemplate", reflect.TypeOf((*MockQuerier)(nil).DeleteDunningEmailTemplate), ctx, id)
}

// DeleteFailedSubscriptionAttempt mocks base method.
func (m *MockQuerier) DeleteFailedSubscriptionAttempt(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFailedSubscriptionAttempt", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFailedSubscriptionAttempt indicates an expected call of DeleteFailedSubscriptionAttempt.
func (mr *MockQuerierMockRecorder) DeleteFailedSubscriptionAttempt(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFailedSubscriptionAttempt", reflect.TypeOf((*MockQuerier)(nil).DeleteFailedSubscriptionAttempt), ctx, id)
}

// DeleteInvoice mocks base method.
func (m *MockQuerier) DeleteInvoice(ctx context.Context, arg db.DeleteInvoiceParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInvoice", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInvoice indicates an expected call of DeleteInvoice.
func (mr *MockQuerierMockRecorder) DeleteInvoice(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInvoice", reflect.TypeOf((*MockQuerier)(nil).DeleteInvoice), ctx, arg)
}

// DeleteInvoiceLineItem mocks base method.
func (m *MockQuerier) DeleteInvoiceLineItem(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInvoiceLineItem", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInvoiceLineItem indicates an expected call of DeleteInvoiceLineItem.
func (mr *MockQuerierMockRecorder) DeleteInvoiceLineItem(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInvoiceLineItem", reflect.TypeOf((*MockQuerier)(nil).DeleteInvoiceLineItem), ctx, id)
}

// DeleteInvoiceLineItems mocks base method.
func (m *MockQuerier) DeleteInvoiceLineItems(ctx context.Context, invoiceID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInvoiceLineItems", ctx, invoiceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInvoiceLineItems indicates an expected call of DeleteInvoiceLineItems.
func (mr *MockQuerierMockRecorder) DeleteInvoiceLineItems(ctx, invoiceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInvoiceLineItems", reflect.TypeOf((*MockQuerier)(nil).DeleteInvoiceLineItems), ctx, invoiceID)
}

// DeleteNetwork mocks base method.
func (m *MockQuerier) DeleteNetwork(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetwork", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetwork indicates an expected call of DeleteNetwork.
func (mr *MockQuerierMockRecorder) DeleteNetwork(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetwork", reflect.TypeOf((*MockQuerier)(nil).DeleteNetwork), ctx, id)
}

// DeleteOldMetrics mocks base method.
func (m *MockQuerier) DeleteOldMetrics(ctx context.Context, arg db.DeleteOldMetricsParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOldMetrics", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOldMetrics indicates an expected call of DeleteOldMetrics.
func (mr *MockQuerierMockRecorder) DeleteOldMetrics(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOldMetrics", reflect.TypeOf((*MockQuerier)(nil).DeleteOldMetrics), ctx, arg)
}

// DeletePaymentLink mocks base method.
func (m *MockQuerier) DeletePaymentLink(ctx context.Context, arg db.DeletePaymentLinkParams) (db.PaymentLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePaymentLink", ctx, arg)
	ret0, _ := ret[0].(db.PaymentLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePaymentLink indicates an expected call of DeletePaymentLink.
func (mr *MockQuerierMockRecorder) DeletePaymentLink(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePaymentLink", reflect.TypeOf((*MockQuerier)(nil).DeletePaymentLink), ctx, arg)
}

// DeleteProduct mocks base method.
func (m *MockQuerier) DeleteProduct(ctx context.Context, arg db.DeleteProductParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockQuerierMockRecorder) DeleteProduct(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockQuerier)(nil).DeleteProduct), ctx, arg)
}

// DeleteProductAddonRelationship mocks base method.
func (m *MockQuerier) DeleteProductAddonRelationship(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductAddonRelationship", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductAddonRelationship indicates an expected call of DeleteProductAddonRelationship.
func (mr *MockQuerierMockRecorder) DeleteProductAddonRelationship(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductAddonRelationship", reflect.TypeOf((*MockQuerier)(nil).DeleteProductAddonRelationship), ctx, id)
}

// DeleteProductAddonRelationshipByProducts mocks base method.
func (m *MockQuerier) DeleteProductAddonRelationshipByProducts(ctx context.Context, arg db.DeleteProductAddonRelationshipByProductsParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductAddonRelationshipByProducts", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductAddonRelationshipByProducts indicates an expected call of DeleteProductAddonRelationshipByProducts.
func (mr *MockQuerierMockRecorder) DeleteProductAddonRelationshipByProducts(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductAddonRelationshipByProducts", reflect.TypeOf((*MockQuerier)(nil).DeleteProductAddonRelationshipByProducts), ctx, arg)
}

// DeleteProductToken mocks base method.
func (m *MockQuerier) DeleteProductToken(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductToken", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductToken indicates an expected call of DeleteProductToken.
func (mr *MockQuerierMockRecorder) DeleteProductToken(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductToken", reflect.TypeOf((*MockQuerier)(nil).DeleteProductToken), ctx, id)
}

// DeleteProductTokenByIds mocks base method.
func (m *MockQuerier) DeleteProductTokenByIds(ctx context.Context, arg db.DeleteProductTokenByIdsParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductTokenByIds", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductTokenByIds indicates an expected call of DeleteProductTokenByIds.
func (mr *MockQuerierMockRecorder) DeleteProductTokenByIds(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductTokenByIds", reflect.TypeOf((*MockQuerier)(nil).DeleteProductTokenByIds), ctx, arg)
}

// DeleteProductTokensByProduct mocks base method.
func (m *MockQuerier) DeleteProductTokensByProduct(ctx context.Context, productID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductTokensByProduct", ctx, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductTokensByProduct indicates an expected call of DeleteProductTokensByProduct.
func (mr *MockQuerierMockRecorder) DeleteProductTokensByProduct(ctx, productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductTokensByProduct", reflect.TypeOf((*MockQuerier)(nil).DeleteProductTokensByProduct), ctx, productID)
}

// DeleteSubscription mocks base method.
func (m *MockQuerier) DeleteSubscription(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscription", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubscription indicates an expected call of DeleteSubscription.
func (mr *MockQuerierMockRecorder) DeleteSubscription(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscription", reflect.TypeOf((*MockQuerier)(nil).DeleteSubscription), ctx, id)
}

// DeleteSubscriptionLineItem mocks base method.
func (m *MockQuerier) DeleteSubscriptionLineItem(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscriptionLineItem", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubscriptionLineItem indicates an expected call of DeleteSubscriptionLineItem.
func (mr *MockQuerierMockRecorder) DeleteSubscriptionLineItem(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscriptionLineItem", reflect.TypeOf((*MockQuerier)(nil).DeleteSubscriptionLineItem), ctx, id)
}

// DeleteSyncEventsBySession mocks base method.
func (m *MockQuerier) DeleteSyncEventsBySession(ctx context.Context, sessionID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSyncEventsBySession", ctx, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSyncEventsBySession indicates an expected call of DeleteSyncEventsBySession.
func (mr *MockQuerierMockRecorder) DeleteSyncEventsBySession(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSyncEventsBySession", reflect.TypeOf((*MockQuerier)(nil).DeleteSyncEventsBySession), ctx, sessionID)
}

// DeleteSyncSession mocks base method.
func (m *MockQuerier) DeleteSyncSession(ctx context.Context, arg db.DeleteSyncSessionParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSyncSession", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSyncSession indicates an expected call of DeleteSyncSession.
func (mr *MockQuerierMockRecorder) DeleteSyncSession(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSyncSession", reflect.TypeOf((*MockQuerier)(nil).DeleteSyncSession), ctx, arg)
}

// DeleteToken mocks base method.
func (m *MockQuerier) DeleteToken(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteToken", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteToken indicates an expected call of DeleteToken.
func (mr *MockQuerierMockRecorder) DeleteToken(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteToken", reflect.TypeOf((*MockQuerier)(nil).DeleteToken), ctx, id)
}

// DeleteUser mocks base method.
func (m *MockQuerier) DeleteUser(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockQuerierMockRecorder) DeleteUser(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockQuerier)(nil).DeleteUser), ctx, id)
}

// DeleteWorkspace mocks base method.
func (m *MockQuerier) DeleteWorkspace(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkspace", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorkspace indicates an expected call of DeleteWorkspace.
func (mr *MockQuerierMockRecorder) DeleteWorkspace(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkspace", reflect.TypeOf((*MockQuerier)(nil).DeleteWorkspace), ctx, id)
}

// DeleteWorkspacePaymentConfiguration mocks base method.
func (m *MockQuerier) DeleteWorkspacePaymentConfiguration(ctx context.Context, arg db.DeleteWorkspacePaymentConfigurationParams) (db.WorkspacePaymentConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkspacePaymentConfiguration", ctx, arg)
	ret0, _ := ret[0].(db.WorkspacePaymentConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkspacePaymentConfiguration indicates an expected call of DeleteWorkspacePaymentConfiguration.
func (mr *MockQuerierMockRecorder) DeleteWorkspacePaymentConfiguration(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkspacePaymentConfiguration", reflect.TypeOf((*MockQuerier)(nil).DeleteWorkspacePaymentConfiguration), ctx, arg)
}

// DeleteWorkspaceProviderAccount mocks base method.
func (m *MockQuerier) DeleteWorkspaceProviderAccount(ctx context.Context, arg db.DeleteWorkspaceProviderAccountParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkspaceProviderAccount", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorkspaceProviderAccount indicates an expected call of DeleteWorkspaceProviderAccount.
func (mr *MockQuerierMockRecorder) DeleteWorkspaceProviderAccount(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkspaceProviderAccount", reflect.TypeOf((*MockQuerier)(nil).DeleteWorkspaceProviderAccount), ctx, arg)
}

// ExpirePaymentLinks mocks base method.
func (m *MockQuerier) ExpirePaymentLinks(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpirePaymentLinks", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExpirePaymentLinks indicates an expected call of ExpirePaymentLinks.
func (mr *MockQuerierMockRecorder) ExpirePaymentLinks(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpirePaymentLinks", reflect.TypeOf((*MockQuerier)(nil).ExpirePaymentLinks), ctx)
}

// FailDunningCampaign mocks base method.
func (m *MockQuerier) FailDunningCampaign(ctx context.Context, arg db.FailDunningCampaignParams) (db.DunningCampaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FailDunningCampaign", ctx, arg)
	ret0, _ := ret[0].(db.DunningCampaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FailDunningCampaign indicates an expected call of FailDunningCampaign.
func (mr *MockQuerierMockRecorder) FailDunningCampaign(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FailDunningCampaign", reflect.TypeOf((*MockQuerier)(nil).FailDunningCampaign), ctx, arg)
}

// GetAPIKey mocks base method.
func (m *MockQuerier) GetAPIKey(ctx context.Context, arg db.GetAPIKeyParams) (db.ApiKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIKey", ctx, arg)
	ret0, _ := ret[0].(db.ApiKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIKey indicates an expected call of GetAPIKey.
func (mr *MockQuerierMockRecorder) GetAPIKey(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIKey", reflect.TypeOf((*MockQuerier)(nil).GetAPIKey), ctx, arg)
}

// GetAPIKeyByKey mocks base method.
func (m *MockQuerier) GetAPIKeyByKey(ctx context.Context, keyHash string) (db.ApiKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIKeyByKey", ctx, keyHash)
	ret0, _ := ret[0].(db.ApiKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIKeyByKey indicates an expected call of GetAPIKeyByKey.
func (mr *MockQuerierMockRecorder) GetAPIKeyByKey(ctx, keyHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIKeyByKey", reflect.TypeOf((*MockQuerier)(nil).GetAPIKeyByKey), ctx, keyHash)
}

// GetAccount mocks base method.
func (m *MockQuerier) GetAccount(ctx context.Context, id uuid.UUID) (db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", ctx, id)
	ret0, _ := ret[0].(db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockQuerierMockRecorder) GetAccount(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockQuerier)(nil).GetAccount), ctx, id)
}

// GetAccountByID mocks base method.
func (m *MockQuerier) GetAccountByID(ctx context.Context, id uuid.UUID) (db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByID", ctx, id)
	ret0, _ := ret[0].(db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByID indicates an expected call of GetAccountByID.
func (mr *MockQuerierMockRecorder) GetAccountByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByID", reflect.TypeOf((*MockQuerier)(nil).GetAccountByID), ctx, id)
}

// GetAccountByWorkspaceID mocks base method.
func (m *MockQuerier) GetAccountByWorkspaceID(ctx context.Context, id uuid.UUID) (db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByWorkspaceID", ctx, id)
	ret0, _ := ret[0].(db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByWorkspaceID indicates an expected call of GetAccountByWorkspaceID.
func (mr *MockQuerierMockRecorder) GetAccountByWorkspaceID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByWorkspaceID", reflect.TypeOf((*MockQuerier)(nil).GetAccountByWorkspaceID), ctx, id)
}

// GetAccountOwner mocks base method.
func (m *MockQuerier) GetAccountOwner(ctx context.Context, accountID uuid.UUID) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountOwner", ctx, accountID)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountOwner indicates an expected call of GetAccountOwner.
func (mr *MockQuerierMockRecorder) GetAccountOwner(ctx, accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountOwner", reflect.TypeOf((*MockQuerier)(nil).GetAccountOwner), ctx, accountID)
}

// GetAccountUsers mocks base method.
func (m *MockQuerier) GetAccountUsers(ctx context.Context, accountID uuid.UUID) ([]db.GetAccountUsersRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountUsers", ctx, accountID)
	ret0, _ := ret[0].([]db.GetAccountUsersRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountUsers indicates an expected call of GetAccountUsers.
func (mr *MockQuerierMockRecorder) GetAccountUsers(ctx, accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountUsers", reflect.TypeOf((*MockQuerier)(nil).GetAccountUsers), ctx, accountID)
}

// GetActiveAPIKeysCount mocks base method.
func (m *MockQuerier) GetActiveAPIKeysCount(ctx context.Context, workspaceID uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveAPIKeysCount", ctx, workspaceID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveAPIKeysCount indicates an expected call of GetActiveAPIKeysCount.
func (mr *MockQuerierMockRecorder) GetActiveAPIKeysCount(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveAPIKeysCount", reflect.TypeOf((*MockQuerier)(nil).GetActiveAPIKeysCount), ctx, workspaceID)
}

// GetActiveDunningCampaignForPayment mocks base method.
func (m *MockQuerier) GetActiveDunningCampaignForPayment(ctx context.Context, paymentID pgtype.UUID) (db.DunningCampaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveDunningCampaignForPayment", ctx, paymentID)
	ret0, _ := ret[0].(db.DunningCampaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveDunningCampaignForPayment indicates an expected call of GetActiveDunningCampaignForPayment.
func (mr *MockQuerierMockRecorder) GetActiveDunningCampaignForPayment(ctx, paymentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveDunningCampaignForPayment", reflect.TypeOf((*MockQuerier)(nil).GetActiveDunningCampaignForPayment), ctx, paymentID)
}

// GetActiveDunningCampaignForSubscription mocks base method.
func (m *MockQuerier) GetActiveDunningCampaignForSubscription(ctx context.Context, subscriptionID pgtype.UUID) (db.DunningCampaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveDunningCampaignForSubscription", ctx, subscriptionID)
	ret0, _ := ret[0].(db.DunningCampaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveDunningCampaignForSubscription indicates an expected call of GetActiveDunningCampaignForSubscription.
func (mr *MockQuerierMockRecorder) GetActiveDunningCampaignForSubscription(ctx, subscriptionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveDunningCampaignForSubscription", reflect.TypeOf((*MockQuerier)(nil).GetActiveDunningCampaignForSubscription), ctx, subscriptionID)
}

// GetActiveGasSponsorships mocks base method.
func (m *MockQuerier) GetActiveGasSponsorships(ctx context.Context) ([]db.GasSponsorshipConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveGasSponsorships", ctx)
	ret0, _ := ret[0].([]db.GasSponsorshipConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveGasSponsorships indicates an expected call of GetActiveGasSponsorships.
func (mr *MockQuerierMockRecorder) GetActiveGasSponsorships(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveGasSponsorships", reflect.TypeOf((*MockQuerier)(nil).GetActiveGasSponsorships), ctx)
}

// GetActivePaymentLinkBySlug mocks base method.
func (m *MockQuerier) GetActivePaymentLinkBySlug(ctx context.Context, slug string) (db.PaymentLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActivePaymentLinkBySlug", ctx, slug)
	ret0, _ := ret[0].(db.PaymentLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActivePaymentLinkBySlug indicates an expected call of GetActivePaymentLinkBySlug.
func (mr *MockQuerierMockRecorder) GetActivePaymentLinkBySlug(ctx, slug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActivePaymentLinkBySlug", reflect.TypeOf((*MockQuerier)(nil).GetActivePaymentLinkBySlug), ctx, slug)
}

// GetActiveProductTokensByNetwork mocks base method.
func (m *MockQuerier) GetActiveProductTokensByNetwork(ctx context.Context, arg db.GetActiveProductTokensByNetworkParams) ([]db.GetActiveProductTokensByNetworkRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveProductTokensByNetwork", ctx, arg)
	ret0, _ := ret[0].([]db.GetActiveProductTokensByNetworkRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveProductTokensByNetwork indicates an expected call of GetActiveProductTokensByNetwork.
func (mr *MockQuerierMockRecorder) GetActiveProductTokensByNetwork(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveProductTokensByNetwork", reflect.TypeOf((*MockQuerier)(nil).GetActiveProductTokensByNetwork), ctx, arg)
}

// GetActiveProductTokensByProduct mocks base method.
func (m *MockQuerier) GetActiveProductTokensByProduct(ctx context.Context, productID uuid.UUID) ([]db.GetActiveProductTokensByProductRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveProductTokensByProduct", ctx, productID)
	ret0, _ := ret[0].([]db.GetActiveProductTokensByProductRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveProductTokensByProduct indicates an expected call of GetActiveProductTokensByProduct.
func (mr *MockQuerierMockRecorder) GetActiveProductTokensByProduct(ctx, productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveProductTokensByProduct", reflect.TypeOf((*MockQuerier)(nil).GetActiveProductTokensByProduct), ctx, productID)
}

// GetActiveProductsByWalletID mocks base method.
func (m *MockQuerier) GetActiveProductsByWalletID(ctx context.Context, walletID uuid.UUID) ([]db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveProductsByWalletID", ctx, walletID)
	ret0, _ := ret[0].([]db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveProductsByWalletID indicates an expected call of GetActiveProductsByWalletID.
func (mr *MockQuerierMockRecorder) GetActiveProductsByWalletID(ctx, walletID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveProductsByWalletID", reflect.TypeOf((*MockQuerier)(nil).GetActiveProductsByWalletID), ctx, walletID)
}

// GetActiveSyncSessionsByProvider mocks base method.
func (m *MockQuerier) GetActiveSyncSessionsByProvider(ctx context.Context, arg db.GetActiveSyncSessionsByProviderParams) ([]db.PaymentSyncSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveSyncSessionsByProvider", ctx, arg)
	ret0, _ := ret[0].([]db.PaymentSyncSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveSyncSessionsByProvider indicates an expected call of GetActiveSyncSessionsByProvider.
func (mr *MockQuerierMockRecorder) GetActiveSyncSessionsByProvider(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveSyncSessionsByProvider", reflect.TypeOf((*MockQuerier)(nil).GetActiveSyncSessionsByProvider), ctx, arg)
}

// GetAddonProducts mocks base method.
func (m *MockQuerier) GetAddonProducts(ctx context.Context, workspaceID uuid.UUID) ([]db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddonProducts", ctx, workspaceID)
	ret0, _ := ret[0].([]db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddonProducts indicates an expected call of GetAddonProducts.
func (mr *MockQuerierMockRecorder) GetAddonProducts(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddonProducts", reflect.TypeOf((*MockQuerier)(nil).GetAddonProducts), ctx, workspaceID)
}

// GetAllAPIKeys mocks base method.
func (m *MockQuerier) GetAllAPIKeys(ctx context.Context) ([]db.ApiKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAPIKeys", ctx)
	ret0, _ := ret[0].([]db.ApiKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAPIKeys indicates an expected call of GetAllAPIKeys.
func (mr *MockQuerierMockRecorder) GetAllAPIKeys(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAPIKeys", reflect.TypeOf((*MockQuerier)(nil).GetAllAPIKeys), ctx)
}

// GetAllAccounts mocks base method.
func (m *MockQuerier) GetAllAccounts(ctx context.Context) ([]db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAccounts", ctx)
	ret0, _ := ret[0].([]db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAccounts indicates an expected call of GetAllAccounts.
func (mr *MockQuerierMockRecorder) GetAllAccounts(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAccounts", reflect.TypeOf((*MockQuerier)(nil).GetAllAccounts), ctx)
}

// GetAllActiveAPIKeys mocks base method.
func (m *MockQuerier) GetAllActiveAPIKeys(ctx context.Context) ([]db.ApiKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllActiveAPIKeys", ctx)
	ret0, _ := ret[0].([]db.ApiKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllActiveAPIKeys indicates an expected call of GetAllActiveAPIKeys.
func (mr *MockQuerierMockRecorder) GetAllActiveAPIKeys(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllActiveAPIKeys", reflect.TypeOf((*MockQuerier)(nil).GetAllActiveAPIKeys), ctx)
}

// GetAllCustomers mocks base method.
func (m *MockQuerier) GetAllCustomers(ctx context.Context) ([]db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCustomers", ctx)
	ret0, _ := ret[0].([]db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCustomers indicates an expected call of GetAllCustomers.
func (mr *MockQuerierMockRecorder) GetAllCustomers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCustomers", reflect.TypeOf((*MockQuerier)(nil).GetAllCustomers), ctx)
}

// GetAllWorkspaces mocks base method.
func (m *MockQuerier) GetAllWorkspaces(ctx context.Context) ([]db.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllWorkspaces", ctx)
	ret0, _ := ret[0].([]db.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllWorkspaces indicates an expected call of GetAllWorkspaces.
func (mr *MockQuerierMockRecorder) GetAllWorkspaces(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllWorkspaces", reflect.TypeOf((*MockQuerier)(nil).GetAllWorkspaces), ctx)
}

// GetAttemptsByType mocks base method.
func (m *MockQuerier) GetAttemptsByType(ctx context.Context, campaignID uuid.UUID) ([]db.GetAttemptsByTypeRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttemptsByType", ctx, campaignID)
	ret0, _ := ret[0].([]db.GetAttemptsByTypeRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttemptsByType indicates an expected call of GetAttemptsByType.
func (mr *MockQuerierMockRecorder) GetAttemptsByType(ctx, campaignID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttemptsByType", reflect.TypeOf((*MockQuerier)(nil).GetAttemptsByType), ctx, campaignID)
}

// GetBaseProducts mocks base method.
func (m *MockQuerier) GetBaseProducts(ctx context.Context, workspaceID uuid.UUID) ([]db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaseProducts", ctx, workspaceID)
	ret0, _ := ret[0].([]db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBaseProducts indicates an expected call of GetBaseProducts.
func (mr *MockQuerierMockRecorder) GetBaseProducts(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaseProducts", reflect.TypeOf((*MockQuerier)(nil).GetBaseProducts), ctx, workspaceID)
}

// GetBusinessCustomers mocks base method.
func (m *MockQuerier) GetBusinessCustomers(ctx context.Context, arg db.GetBusinessCustomersParams) ([]db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBusinessCustomers", ctx, arg)
	ret0, _ := ret[0].([]db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBusinessCustomers indicates an expected call of GetBusinessCustomers.
func (mr *MockQuerierMockRecorder) GetBusinessCustomers(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBusinessCustomers", reflect.TypeOf((*MockQuerier)(nil).GetBusinessCustomers), ctx, arg)
}

// GetCampaignsNeedingFinalAction mocks base method.
func (m *MockQuerier) GetCampaignsNeedingFinalAction(ctx context.Context) ([]db.GetCampaignsNeedingFinalActionRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCampaignsNeedingFinalAction", ctx)
	ret0, _ := ret[0].([]db.GetCampaignsNeedingFinalActionRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCampaignsNeedingFinalAction indicates an expected call of GetCampaignsNeedingFinalAction.
func (mr *MockQuerierMockRecorder) GetCampaignsNeedingFinalAction(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCampaignsNeedingFinalAction", reflect.TypeOf((*MockQuerier)(nil).GetCampaignsNeedingFinalAction), ctx)
}

// GetCircleUserByID mocks base method.
func (m *MockQuerier) GetCircleUserByID(ctx context.Context, id uuid.UUID) (db.CircleUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCircleUserByID", ctx, id)
	ret0, _ := ret[0].(db.CircleUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCircleUserByID indicates an expected call of GetCircleUserByID.
func (mr *MockQuerierMockRecorder) GetCircleUserByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCircleUserByID", reflect.TypeOf((*MockQuerier)(nil).GetCircleUserByID), ctx, id)
}

// GetCircleUserByWorkspaceID mocks base method.
func (m *MockQuerier) GetCircleUserByWorkspaceID(ctx context.Context, workspaceID uuid.UUID) (db.CircleUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCircleUserByWorkspaceID", ctx, workspaceID)
	ret0, _ := ret[0].(db.CircleUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCircleUserByWorkspaceID indicates an expected call of GetCircleUserByWorkspaceID.
func (mr *MockQuerierMockRecorder) GetCircleUserByWorkspaceID(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCircleUserByWorkspaceID", reflect.TypeOf((*MockQuerier)(nil).GetCircleUserByWorkspaceID), ctx, workspaceID)
}

// GetCircleUserWithWallets mocks base method.
func (m *MockQuerier) GetCircleUserWithWallets(ctx context.Context, id uuid.UUID) (db.GetCircleUserWithWalletsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCircleUserWithWallets", ctx, id)
	ret0, _ := ret[0].(db.GetCircleUserWithWalletsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCircleUserWithWallets indicates an expected call of GetCircleUserWithWallets.
func (mr *MockQuerierMockRecorder) GetCircleUserWithWallets(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCircleUserWithWallets", reflect.TypeOf((*MockQuerier)(nil).GetCircleUserWithWallets), ctx, id)
}

// GetCircleUserWithWalletsByWorkspaceID mocks base method.
func (m *MockQuerier) GetCircleUserWithWalletsByWorkspaceID(ctx context.Context, workspaceID uuid.UUID) (db.GetCircleUserWithWalletsByWorkspaceIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCircleUserWithWalletsByWorkspaceID", ctx, workspaceID)
	ret0, _ := ret[0].(db.GetCircleUserWithWalletsByWorkspaceIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCircleUserWithWalletsByWorkspaceID indicates an expected call of GetCircleUserWithWalletsByWorkspaceID.
func (mr *MockQuerierMockRecorder) GetCircleUserWithWalletsByWorkspaceID(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCircleUserWithWalletsByWorkspaceID", reflect.TypeOf((*MockQuerier)(nil).GetCircleUserWithWalletsByWorkspaceID), ctx, workspaceID)
}

// GetCircleWalletByCircleWalletID mocks base method.
func (m *MockQuerier) GetCircleWalletByCircleWalletID(ctx context.Context, circleWalletID string) (db.GetCircleWalletByCircleWalletIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCircleWalletByCircleWalletID", ctx, circleWalletID)
	ret0, _ := ret[0].(db.GetCircleWalletByCircleWalletIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCircleWalletByCircleWalletID indicates an expected call of GetCircleWalletByCircleWalletID.
func (mr *MockQuerierMockRecorder) GetCircleWalletByCircleWalletID(ctx, circleWalletID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCircleWalletByCircleWalletID", reflect.TypeOf((*MockQuerier)(nil).GetCircleWalletByCircleWalletID), ctx, circleWalletID)
}

// GetCurrentMRR mocks base method.
func (m *MockQuerier) GetCurrentMRR(ctx context.Context, arg db.GetCurrentMRRParams) (db.GetCurrentMRRRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentMRR", ctx, arg)
	ret0, _ := ret[0].(db.GetCurrentMRRRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentMRR indicates an expected call of GetCurrentMRR.
func (mr *MockQuerierMockRecorder) GetCurrentMRR(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentMRR", reflect.TypeOf((*MockQuerier)(nil).GetCurrentMRR), ctx, arg)
}

// GetCustomer mocks base method.
func (m *MockQuerier) GetCustomer(ctx context.Context, id uuid.UUID) (db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomer", ctx, id)
	ret0, _ := ret[0].(db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomer indicates an expected call of GetCustomer.
func (mr *MockQuerierMockRecorder) GetCustomer(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomer", reflect.TypeOf((*MockQuerier)(nil).GetCustomer), ctx, id)
}

// GetCustomerByEmail mocks base method.
func (m *MockQuerier) GetCustomerByEmail(ctx context.Context, email pgtype.Text) (db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerByEmail", ctx, email)
	ret0, _ := ret[0].(db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerByEmail indicates an expected call of GetCustomerByEmail.
func (mr *MockQuerierMockRecorder) GetCustomerByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerByEmail", reflect.TypeOf((*MockQuerier)(nil).GetCustomerByEmail), ctx, email)
}

// GetCustomerByExternalID mocks base method.
func (m *MockQuerier) GetCustomerByExternalID(ctx context.Context, externalID pgtype.Text) (db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerByExternalID", ctx, externalID)
	ret0, _ := ret[0].(db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerByExternalID indicates an expected call of GetCustomerByExternalID.
func (mr *MockQuerierMockRecorder) GetCustomerByExternalID(ctx, externalID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerByExternalID", reflect.TypeOf((*MockQuerier)(nil).GetCustomerByExternalID), ctx, externalID)
}

// GetCustomerByExternalIDAndProvider mocks base method.
func (m *MockQuerier) GetCustomerByExternalIDAndProvider(ctx context.Context, arg db.GetCustomerByExternalIDAndProviderParams) (db.GetCustomerByExternalIDAndProviderRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerByExternalIDAndProvider", ctx, arg)
	ret0, _ := ret[0].(db.GetCustomerByExternalIDAndProviderRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerByExternalIDAndProvider indicates an expected call of GetCustomerByExternalIDAndProvider.
func (mr *MockQuerierMockRecorder) GetCustomerByExternalIDAndProvider(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerByExternalIDAndProvider", reflect.TypeOf((*MockQuerier)(nil).GetCustomerByExternalIDAndProvider), ctx, arg)
}

// GetCustomerByNumID mocks base method.
func (m *MockQuerier) GetCustomerByNumID(ctx context.Context, numID int64) (db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerByNumID", ctx, numID)
	ret0, _ := ret[0].(db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerByNumID indicates an expected call of GetCustomerByNumID.
func (mr *MockQuerierMockRecorder) GetCustomerByNumID(ctx, numID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerByNumID", reflect.TypeOf((*MockQuerier)(nil).GetCustomerByNumID), ctx, numID)
}

// GetCustomerByTaxId mocks base method.
func (m *MockQuerier) GetCustomerByTaxId(ctx context.Context, arg db.GetCustomerByTaxIdParams) (db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerByTaxId", ctx, arg)
	ret0, _ := ret[0].(db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerByTaxId indicates an expected call of GetCustomerByTaxId.
func (mr *MockQuerierMockRecorder) GetCustomerByTaxId(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerByTaxId", reflect.TypeOf((*MockQuerier)(nil).GetCustomerByTaxId), ctx, arg)
}

// GetCustomerByWeb3AuthID mocks base method.
func (m *MockQuerier) GetCustomerByWeb3AuthID(ctx context.Context, web3authID pgtype.Text) (db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerByWeb3AuthID", ctx, web3authID)
	ret0, _ := ret[0].(db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerByWeb3AuthID indicates an expected call of GetCustomerByWeb3AuthID.
func (mr *MockQuerierMockRecorder) GetCustomerByWeb3AuthID(ctx, web3authID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerByWeb3AuthID", reflect.TypeOf((*MockQuerier)(nil).GetCustomerByWeb3AuthID), ctx, web3authID)
}

// GetCustomerGasPayments mocks base method.
func (m *MockQuerier) GetCustomerGasPayments(ctx context.Context, arg db.GetCustomerGasPaymentsParams) ([]db.GetCustomerGasPaymentsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerGasPayments", ctx, arg)
	ret0, _ := ret[0].([]db.GetCustomerGasPaymentsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerGasPayments indicates an expected call of GetCustomerGasPayments.
func (mr *MockQuerierMockRecorder) GetCustomerGasPayments(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerGasPayments", reflect.TypeOf((*MockQuerier)(nil).GetCustomerGasPayments), ctx, arg)
}

// GetCustomerIdForWallet mocks base method.
func (m *MockQuerier) GetCustomerIdForWallet(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerIdForWallet", ctx, id)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerIdForWallet indicates an expected call of GetCustomerIdForWallet.
func (mr *MockQuerierMockRecorder) GetCustomerIdForWallet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerIdForWallet", reflect.TypeOf((*MockQuerier)(nil).GetCustomerIdForWallet), ctx, id)
}

// GetCustomerMetricsTrend mocks base method.
func (m *MockQuerier) GetCustomerMetricsTrend(ctx context.Context, arg db.GetCustomerMetricsTrendParams) ([]db.GetCustomerMetricsTrendRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerMetricsTrend", ctx, arg)
	ret0, _ := ret[0].([]db.GetCustomerMetricsTrendRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerMetricsTrend indicates an expected call of GetCustomerMetricsTrend.
func (mr *MockQuerierMockRecorder) GetCustomerMetricsTrend(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerMetricsTrend", reflect.TypeOf((*MockQuerier)(nil).GetCustomerMetricsTrend), ctx, arg)
}

// GetCustomerWallet mocks base method.
func (m *MockQuerier) GetCustomerWallet(ctx context.Context, id uuid.UUID) (db.CustomerWallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerWallet", ctx, id)
	ret0, _ := ret[0].(db.CustomerWallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerWallet indicates an expected call of GetCustomerWallet.
func (mr *MockQuerierMockRecorder) GetCustomerWallet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerWallet", reflect.TypeOf((*MockQuerier)(nil).GetCustomerWallet), ctx, id)
}

// GetCustomerWalletByAddress mocks base method.
func (m *MockQuerier) GetCustomerWalletByAddress(ctx context.Context, arg db.GetCustomerWalletByAddressParams) (db.CustomerWallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerWalletByAddress", ctx, arg)
	ret0, _ := ret[0].(db.CustomerWallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerWalletByAddress indicates an expected call of GetCustomerWalletByAddress.
func (mr *MockQuerierMockRecorder) GetCustomerWalletByAddress(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerWalletByAddress", reflect.TypeOf((*MockQuerier)(nil).GetCustomerWalletByAddress), ctx, arg)
}

// GetCustomersByBillingCountry mocks base method.
func (m *MockQuerier) GetCustomersByBillingCountry(ctx context.Context, arg db.GetCustomersByBillingCountryParams) ([]db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomersByBillingCountry", ctx, arg)
	ret0, _ := ret[0].([]db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomersByBillingCountry indicates an expected call of GetCustomersByBillingCountry.
func (mr *MockQuerierMockRecorder) GetCustomersByBillingCountry(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomersByBillingCountry", reflect.TypeOf((*MockQuerier)(nil).GetCustomersByBillingCountry), ctx, arg)
}

// GetCustomersByExternalIDs mocks base method.
func (m *MockQuerier) GetCustomersByExternalIDs(ctx context.Context, dollar_1 []string) ([]db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomersByExternalIDs", ctx, dollar_1)
	ret0, _ := ret[0].([]db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomersByExternalIDs indicates an expected call of GetCustomersByExternalIDs.
func (mr *MockQuerierMockRecorder) GetCustomersByExternalIDs(ctx, dollar_1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomersByExternalIDs", reflect.TypeOf((*MockQuerier)(nil).GetCustomersByExternalIDs), ctx, dollar_1)
}

// GetCustomersByPaymentProvider mocks base method.
func (m *MockQuerier) GetCustomersByPaymentProvider(ctx context.Context, paymentProvider pgtype.Text) ([]db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomersByPaymentProvider", ctx, paymentProvider)
	ret0, _ := ret[0].([]db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomersByPaymentProvider indicates an expected call of GetCustomersByPaymentProvider.
func (mr *MockQuerierMockRecorder) GetCustomersByPaymentProvider(ctx, paymentProvider any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomersByPaymentProvider", reflect.TypeOf((*MockQuerier)(nil).GetCustomersByPaymentProvider), ctx, paymentProvider)
}

// GetCustomersByPaymentSyncStatus mocks base method.
func (m *MockQuerier) GetCustomersByPaymentSyncStatus(ctx context.Context, paymentSyncStatus pgtype.Text) ([]db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomersByPaymentSyncStatus", ctx, paymentSyncStatus)
	ret0, _ := ret[0].([]db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomersByPaymentSyncStatus indicates an expected call of GetCustomersByPaymentSyncStatus.
func (mr *MockQuerierMockRecorder) GetCustomersByPaymentSyncStatus(ctx, paymentSyncStatus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomersByPaymentSyncStatus", reflect.TypeOf((*MockQuerier)(nil).GetCustomersByPaymentSyncStatus), ctx, paymentSyncStatus)
}

// GetCustomersByWalletAddress mocks base method.
func (m *MockQuerier) GetCustomersByWalletAddress(ctx context.Context, walletAddress string) ([]db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomersByWalletAddress", ctx, walletAddress)
	ret0, _ := ret[0].([]db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomersByWalletAddress indicates an expected call of GetCustomersByWalletAddress.
func (mr *MockQuerierMockRecorder) GetCustomersByWalletAddress(ctx, walletAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomersByWalletAddress", reflect.TypeOf((*MockQuerier)(nil).GetCustomersByWalletAddress), ctx, walletAddress)
}

// GetCustomersNeedingSync mocks base method.
func (m *MockQuerier) GetCustomersNeedingSync(ctx context.Context) ([]db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomersNeedingSync", ctx)
	ret0, _ := ret[0].([]db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomersNeedingSync indicates an expected call of GetCustomersNeedingSync.
func (mr *MockQuerierMockRecorder) GetCustomersNeedingSync(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomersNeedingSync", reflect.TypeOf((*MockQuerier)(nil).GetCustomersNeedingSync), ctx)
}

// GetCustomersSyncedByProvider mocks base method.
func (m *MockQuerier) GetCustomersSyncedByProvider(ctx context.Context, paymentProvider pgtype.Text) ([]db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomersSyncedByProvider", ctx, paymentProvider)
	ret0, _ := ret[0].([]db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomersSyncedByProvider indicates an expected call of GetCustomersSyncedByProvider.
func (mr *MockQuerierMockRecorder) GetCustomersSyncedByProvider(ctx, paymentProvider any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomersSyncedByProvider", reflect.TypeOf((*MockQuerier)(nil).GetCustomersSyncedByProvider), ctx, paymentProvider)
}

// GetCustomersWithSyncConflicts mocks base method.
func (m *MockQuerier) GetCustomersWithSyncConflicts(ctx context.Context) ([]db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomersWithSyncConflicts", ctx)
	ret0, _ := ret[0].([]db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomersWithSyncConflicts indicates an expected call of GetCustomersWithSyncConflicts.
func (mr *MockQuerierMockRecorder) GetCustomersWithSyncConflicts(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomersWithSyncConflicts", reflect.TypeOf((*MockQuerier)(nil).GetCustomersWithSyncConflicts), ctx)
}

// GetCustomersWithVerifiedTaxId mocks base method.
func (m *MockQuerier) GetCustomersWithVerifiedTaxId(ctx context.Context, arg db.GetCustomersWithVerifiedTaxIdParams) ([]db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomersWithVerifiedTaxId", ctx, arg)
	ret0, _ := ret[0].([]db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomersWithVerifiedTaxId indicates an expected call of GetCustomersWithVerifiedTaxId.
func (mr *MockQuerierMockRecorder) GetCustomersWithVerifiedTaxId(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomersWithVerifiedTaxId", reflect.TypeOf((*MockQuerier)(nil).GetCustomersWithVerifiedTaxId), ctx, arg)
}

// GetDLQProcessingStats mocks base method.
func (m *MockQuerier) GetDLQProcessingStats(ctx context.Context, arg db.GetDLQProcessingStatsParams) (db.GetDLQProcessingStatsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDLQProcessingStats", ctx, arg)
	ret0, _ := ret[0].(db.GetDLQProcessingStatsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDLQProcessingStats indicates an expected call of GetDLQProcessingStats.
func (mr *MockQuerierMockRecorder) GetDLQProcessingStats(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDLQProcessingStats", reflect.TypeOf((*MockQuerier)(nil).GetDLQProcessingStats), ctx, arg)
}

// GetDailyMetrics mocks base method.
func (m *MockQuerier) GetDailyMetrics(ctx context.Context, arg db.GetDailyMetricsParams) ([]db.DashboardMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDailyMetrics", ctx, arg)
	ret0, _ := ret[0].([]db.DashboardMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDailyMetrics indicates an expected call of GetDailyMetrics.
func (mr *MockQuerierMockRecorder) GetDailyMetrics(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDailyMetrics", reflect.TypeOf((*MockQuerier)(nil).GetDailyMetrics), ctx, arg)
}

// GetDashboardMetric mocks base method.
func (m *MockQuerier) GetDashboardMetric(ctx context.Context, arg db.GetDashboardMetricParams) (db.DashboardMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDashboardMetric", ctx, arg)
	ret0, _ := ret[0].(db.DashboardMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDashboardMetric indicates an expected call of GetDashboardMetric.
func (mr *MockQuerierMockRecorder) GetDashboardMetric(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDashboardMetric", reflect.TypeOf((*MockQuerier)(nil).GetDashboardMetric), ctx, arg)
}

// GetDashboardMetricsByDateRange mocks base method.
func (m *MockQuerier) GetDashboardMetricsByDateRange(ctx context.Context, arg db.GetDashboardMetricsByDateRangeParams) ([]db.DashboardMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDashboardMetricsByDateRange", ctx, arg)
	ret0, _ := ret[0].([]db.DashboardMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDashboardMetricsByDateRange indicates an expected call of GetDashboardMetricsByDateRange.
func (mr *MockQuerierMockRecorder) GetDashboardMetricsByDateRange(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDashboardMetricsByDateRange", reflect.TypeOf((*MockQuerier)(nil).GetDashboardMetricsByDateRange), ctx, arg)
}

// GetDefaultDunningConfiguration mocks base method.
func (m *MockQuerier) GetDefaultDunningConfiguration(ctx context.Context, workspaceID uuid.UUID) (db.DunningConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultDunningConfiguration", ctx, workspaceID)
	ret0, _ := ret[0].(db.DunningConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultDunningConfiguration indicates an expected call of GetDefaultDunningConfiguration.
func (mr *MockQuerierMockRecorder) GetDefaultDunningConfiguration(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultDunningConfiguration", reflect.TypeOf((*MockQuerier)(nil).GetDefaultDunningConfiguration), ctx, workspaceID)
}

// GetDelegationData mocks base method.
func (m *MockQuerier) GetDelegationData(ctx context.Context, id uuid.UUID) (db.DelegationDatum, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegationData", ctx, id)
	ret0, _ := ret[0].(db.DelegationDatum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelegationData indicates an expected call of GetDelegationData.
func (mr *MockQuerierMockRecorder) GetDelegationData(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegationData", reflect.TypeOf((*MockQuerier)(nil).GetDelegationData), ctx, id)
}

// GetDelegationDataBySignature mocks base method.
func (m *MockQuerier) GetDelegationDataBySignature(ctx context.Context, signature string) (db.DelegationDatum, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegationDataBySignature", ctx, signature)
	ret0, _ := ret[0].(db.DelegationDatum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelegationDataBySignature indicates an expected call of GetDelegationDataBySignature.
func (mr *MockQuerierMockRecorder) GetDelegationDataBySignature(ctx, signature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegationDataBySignature", reflect.TypeOf((*MockQuerier)(nil).GetDelegationDataBySignature), ctx, signature)
}

// GetDelegationsByDelegate mocks base method.
func (m *MockQuerier) GetDelegationsByDelegate(ctx context.Context, delegate string) ([]db.DelegationDatum, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegationsByDelegate", ctx, delegate)
	ret0, _ := ret[0].([]db.DelegationDatum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelegationsByDelegate indicates an expected call of GetDelegationsByDelegate.
func (mr *MockQuerierMockRecorder) GetDelegationsByDelegate(ctx, delegate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegationsByDelegate", reflect.TypeOf((*MockQuerier)(nil).GetDelegationsByDelegate), ctx, delegate)
}

// GetDelegationsByDelegator mocks base method.
func (m *MockQuerier) GetDelegationsByDelegator(ctx context.Context, delegator string) ([]db.DelegationDatum, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegationsByDelegator", ctx, delegator)
	ret0, _ := ret[0].([]db.DelegationDatum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelegationsByDelegator indicates an expected call of GetDelegationsByDelegator.
func (mr *MockQuerierMockRecorder) GetDelegationsByDelegator(ctx, delegator any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegationsByDelegator", reflect.TypeOf((*MockQuerier)(nil).GetDelegationsByDelegator), ctx, delegator)
}

// GetDueScheduledChanges mocks base method.
func (m *MockQuerier) GetDueScheduledChanges(ctx context.Context, scheduledFor pgtype.Timestamptz) ([]db.SubscriptionScheduleChange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDueScheduledChanges", ctx, scheduledFor)
	ret0, _ := ret[0].([]db.SubscriptionScheduleChange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDueScheduledChanges indicates an expected call of GetDueScheduledChanges.
func (mr *MockQuerierMockRecorder) GetDueScheduledChanges(ctx, scheduledFor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDueScheduledChanges", reflect.TypeOf((*MockQuerier)(nil).GetDueScheduledChanges), ctx, scheduledFor)
}

// GetDunningAnalytics mocks base method.
func (m *MockQuerier) GetDunningAnalytics(ctx context.Context, arg db.GetDunningAnalyticsParams) (db.DunningAnalytic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDunningAnalytics", ctx, arg)
	ret0, _ := ret[0].(db.DunningAnalytic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDunningAnalytics indicates an expected call of GetDunningAnalytics.
func (mr *MockQuerierMockRecorder) GetDunningAnalytics(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDunningAnalytics", reflect.TypeOf((*MockQuerier)(nil).GetDunningAnalytics), ctx, arg)
}

// GetDunningAnalyticsSummary mocks base method.
func (m *MockQuerier) GetDunningAnalyticsSummary(ctx context.Context, arg db.GetDunningAnalyticsSummaryParams) (db.GetDunningAnalyticsSummaryRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDunningAnalyticsSummary", ctx, arg)
	ret0, _ := ret[0].(db.GetDunningAnalyticsSummaryRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDunningAnalyticsSummary indicates an expected call of GetDunningAnalyticsSummary.
func (mr *MockQuerierMockRecorder) GetDunningAnalyticsSummary(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDunningAnalyticsSummary", reflect.TypeOf((*MockQuerier)(nil).GetDunningAnalyticsSummary), ctx, arg)
}

// GetDunningAttempt mocks base method.
func (m *MockQuerier) GetDunningAttempt(ctx context.Context, id uuid.UUID) (db.DunningAttempt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDunningAttempt", ctx, id)
	ret0, _ := ret[0].(db.DunningAttempt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDunningAttempt indicates an expected call of GetDunningAttempt.
func (mr *MockQuerierMockRecorder) GetDunningAttempt(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDunningAttempt", reflect.TypeOf((*MockQuerier)(nil).GetDunningAttempt), ctx, id)
}

// GetDunningCampaign mocks base method.
func (m *MockQuerier) GetDunningCampaign(ctx context.Context, id uuid.UUID) (db.GetDunningCampaignRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDunningCampaign", ctx, id)
	ret0, _ := ret[0].(db.GetDunningCampaignRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDunningCampaign indicates an expected call of GetDunningCampaign.
func (mr *MockQuerierMockRecorder) GetDunningCampaign(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDunningCampaign", reflect.TypeOf((*MockQuerier)(nil).GetDunningCampaign), ctx, id)
}

// GetDunningCampaignStats mocks base method.
func (m *MockQuerier) GetDunningCampaignStats(ctx context.Context, arg db.GetDunningCampaignStatsParams) (db.GetDunningCampaignStatsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDunningCampaignStats", ctx, arg)
	ret0, _ := ret[0].(db.GetDunningCampaignStatsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDunningCampaignStats indicates an expected call of GetDunningCampaignStats.
func (mr *MockQuerierMockRecorder) GetDunningCampaignStats(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDunningCampaignStats", reflect.TypeOf((*MockQuerier)(nil).GetDunningCampaignStats), ctx, arg)
}

// GetDunningConfiguration mocks base method.
func (m *MockQuerier) GetDunningConfiguration(ctx context.Context, id uuid.UUID) (db.DunningConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDunningConfiguration", ctx, id)
	ret0, _ := ret[0].(db.DunningConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDunningConfiguration indicates an expected call of GetDunningConfiguration.
func (mr *MockQuerierMockRecorder) GetDunningConfiguration(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDunningConfiguration", reflect.TypeOf((*MockQuerier)(nil).GetDunningConfiguration), ctx, id)
}

// GetDunningEmailTemplate mocks base method.
func (m *MockQuerier) GetDunningEmailTemplate(ctx context.Context, id uuid.UUID) (db.DunningEmailTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDunningEmailTemplate", ctx, id)
	ret0, _ := ret[0].(db.DunningEmailTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDunningEmailTemplate indicates an expected call of GetDunningEmailTemplate.
func (mr *MockQuerierMockRecorder) GetDunningEmailTemplate(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDunningEmailTemplate", reflect.TypeOf((*MockQuerier)(nil).GetDunningEmailTemplate), ctx, id)
}

// GetDunningEmailTemplateByType mocks base method.
func (m *MockQuerier) GetDunningEmailTemplateByType(ctx context.Context, arg db.GetDunningEmailTemplateByTypeParams) (db.DunningEmailTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDunningEmailTemplateByType", ctx, arg)
	ret0, _ := ret[0].(db.DunningEmailTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDunningEmailTemplateByType indicates an expected call of GetDunningEmailTemplateByType.
func (mr *MockQuerierMockRecorder) GetDunningEmailTemplateByType(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDunningEmailTemplateByType", reflect.TypeOf((*MockQuerier)(nil).GetDunningEmailTemplateByType), ctx, arg)
}

// GetDunningPerformanceByAttempt mocks base method.
func (m *MockQuerier) GetDunningPerformanceByAttempt(ctx context.Context, arg db.GetDunningPerformanceByAttemptParams) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDunningPerformanceByAttempt", ctx, arg)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDunningPerformanceByAttempt indicates an expected call of GetDunningPerformanceByAttempt.
func (mr *MockQuerierMockRecorder) GetDunningPerformanceByAttempt(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDunningPerformanceByAttempt", reflect.TypeOf((*MockQuerier)(nil).GetDunningPerformanceByAttempt), ctx, arg)
}

// GetDuplicateWebhookEvents mocks base method.
func (m *MockQuerier) GetDuplicateWebhookEvents(ctx context.Context, arg db.GetDuplicateWebhookEventsParams) ([]db.GetDuplicateWebhookEventsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDuplicateWebhookEvents", ctx, arg)
	ret0, _ := ret[0].([]db.GetDuplicateWebhookEventsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDuplicateWebhookEvents indicates an expected call of GetDuplicateWebhookEvents.
func (mr *MockQuerierMockRecorder) GetDuplicateWebhookEvents(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDuplicateWebhookEvents", reflect.TypeOf((*MockQuerier)(nil).GetDuplicateWebhookEvents), ctx, arg)
}

// GetEntitiesBySyncStatusAndProvider mocks base method.
func (m *MockQuerier) GetEntitiesBySyncStatusAndProvider(ctx context.Context, arg db.GetEntitiesBySyncStatusAndProviderParams) ([]db.GetEntitiesBySyncStatusAndProviderRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntitiesBySyncStatusAndProvider", ctx, arg)
	ret0, _ := ret[0].([]db.GetEntitiesBySyncStatusAndProviderRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntitiesBySyncStatusAndProvider indicates an expected call of GetEntitiesBySyncStatusAndProvider.
func (mr *MockQuerierMockRecorder) GetEntitiesBySyncStatusAndProvider(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntitiesBySyncStatusAndProvider", reflect.TypeOf((*MockQuerier)(nil).GetEntitiesBySyncStatusAndProvider), ctx, arg)
}

// GetEntityByExternalIDWithWorkspace mocks base method.
func (m *MockQuerier) GetEntityByExternalIDWithWorkspace(ctx context.Context, arg db.GetEntityByExternalIDWithWorkspaceParams) (db.GetEntityByExternalIDWithWorkspaceRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityByExternalIDWithWorkspace", ctx, arg)
	ret0, _ := ret[0].(db.GetEntityByExternalIDWithWorkspaceRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityByExternalIDWithWorkspace indicates an expected call of GetEntityByExternalIDWithWorkspace.
func (mr *MockQuerierMockRecorder) GetEntityByExternalIDWithWorkspace(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityByExternalIDWithWorkspace", reflect.TypeOf((*MockQuerier)(nil).GetEntityByExternalIDWithWorkspace), ctx, arg)
}

// GetExpiredAPIKeys mocks base method.
func (m *MockQuerier) GetExpiredAPIKeys(ctx context.Context) ([]db.ApiKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpiredAPIKeys", ctx)
	ret0, _ := ret[0].([]db.ApiKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpiredAPIKeys indicates an expected call of GetExpiredAPIKeys.
func (mr *MockQuerierMockRecorder) GetExpiredAPIKeys(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpiredAPIKeys", reflect.TypeOf((*MockQuerier)(nil).GetExpiredAPIKeys), ctx)
}

// GetFailedPaymentCount mocks base method.
func (m *MockQuerier) GetFailedPaymentCount(ctx context.Context, arg db.GetFailedPaymentCountParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFailedPaymentCount", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFailedPaymentCount indicates an expected call of GetFailedPaymentCount.
func (mr *MockQuerierMockRecorder) GetFailedPaymentCount(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFailedPaymentCount", reflect.TypeOf((*MockQuerier)(nil).GetFailedPaymentCount), ctx, arg)
}

// GetFailedSubscriptionAttempt mocks base method.
func (m *MockQuerier) GetFailedSubscriptionAttempt(ctx context.Context, id uuid.UUID) (db.FailedSubscriptionAttempt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFailedSubscriptionAttempt", ctx, id)
	ret0, _ := ret[0].(db.FailedSubscriptionAttempt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFailedSubscriptionAttempt indicates an expected call of GetFailedSubscriptionAttempt.
func (mr *MockQuerierMockRecorder) GetFailedSubscriptionAttempt(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFailedSubscriptionAttempt", reflect.TypeOf((*MockQuerier)(nil).GetFailedSubscriptionAttempt), ctx, id)
}

// GetFailedSyncSessionsForRecovery mocks base method.
func (m *MockQuerier) GetFailedSyncSessionsForRecovery(ctx context.Context, arg db.GetFailedSyncSessionsForRecoveryParams) ([]db.GetFailedSyncSessionsForRecoveryRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFailedSyncSessionsForRecovery", ctx, arg)
	ret0, _ := ret[0].([]db.GetFailedSyncSessionsForRecoveryRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFailedSyncSessionsForRecovery indicates an expected call of GetFailedSyncSessionsForRecovery.
func (mr *MockQuerierMockRecorder) GetFailedSyncSessionsForRecovery(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFailedSyncSessionsForRecovery", reflect.TypeOf((*MockQuerier)(nil).GetFailedSyncSessionsForRecovery), ctx, arg)
}

// GetFailedWebhooksForRetry mocks base method.
func (m *MockQuerier) GetFailedWebhooksForRetry(ctx context.Context, arg db.GetFailedWebhooksForRetryParams) ([]db.GetFailedWebhooksForRetryRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFailedWebhooksForRetry", ctx, arg)
	ret0, _ := ret[0].([]db.GetFailedWebhooksForRetryRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFailedWebhooksForRetry indicates an expected call of GetFailedWebhooksForRetry.
func (mr *MockQuerierMockRecorder) GetFailedWebhooksForRetry(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFailedWebhooksForRetry", reflect.TypeOf((*MockQuerier)(nil).GetFailedWebhooksForRetry), ctx, arg)
}

// GetFiatCurrency mocks base method.
func (m *MockQuerier) GetFiatCurrency(ctx context.Context, code string) (db.FiatCurrency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFiatCurrency", ctx, code)
	ret0, _ := ret[0].(db.FiatCurrency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFiatCurrency indicates an expected call of GetFiatCurrency.
func (mr *MockQuerierMockRecorder) GetFiatCurrency(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFiatCurrency", reflect.TypeOf((*MockQuerier)(nil).GetFiatCurrency), ctx, code)
}

// GetFiatCurrencyByCode mocks base method.
func (m *MockQuerier) GetFiatCurrencyByCode(ctx context.Context, code string) (db.FiatCurrency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFiatCurrencyByCode", ctx, code)
	ret0, _ := ret[0].(db.FiatCurrency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFiatCurrencyByCode indicates an expected call of GetFiatCurrencyByCode.
func (mr *MockQuerierMockRecorder) GetFiatCurrencyByCode(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFiatCurrencyByCode", reflect.TypeOf((*MockQuerier)(nil).GetFiatCurrencyByCode), ctx, code)
}

// GetGasFeeMetrics mocks base method.
func (m *MockQuerier) GetGasFeeMetrics(ctx context.Context, arg db.GetGasFeeMetricsParams) (db.GetGasFeeMetricsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGasFeeMetrics", ctx, arg)
	ret0, _ := ret[0].(db.GetGasFeeMetricsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGasFeeMetrics indicates an expected call of GetGasFeeMetrics.
func (mr *MockQuerierMockRecorder) GetGasFeeMetrics(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGasFeeMetrics", reflect.TypeOf((*MockQuerier)(nil).GetGasFeeMetrics), ctx, arg)
}

// GetGasFeePayment mocks base method.
func (m *MockQuerier) GetGasFeePayment(ctx context.Context, id uuid.UUID) (db.GasFeePayment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGasFeePayment", ctx, id)
	ret0, _ := ret[0].(db.GasFeePayment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGasFeePayment indicates an expected call of GetGasFeePayment.
func (mr *MockQuerierMockRecorder) GetGasFeePayment(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGasFeePayment", reflect.TypeOf((*MockQuerier)(nil).GetGasFeePayment), ctx, id)
}

// GetGasFeePaymentByPaymentId mocks base method.
func (m *MockQuerier) GetGasFeePaymentByPaymentId(ctx context.Context, paymentID uuid.UUID) (db.GasFeePayment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGasFeePaymentByPaymentId", ctx, paymentID)
	ret0, _ := ret[0].(db.GasFeePayment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGasFeePaymentByPaymentId indicates an expected call of GetGasFeePaymentByPaymentId.
func (mr *MockQuerierMockRecorder) GetGasFeePaymentByPaymentId(ctx, paymentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGasFeePaymentByPaymentId", reflect.TypeOf((*MockQuerier)(nil).GetGasFeePaymentByPaymentId), ctx, paymentID)
}

// GetGasFeePaymentsBySponsor mocks base method.
func (m *MockQuerier) GetGasFeePaymentsBySponsor(ctx context.Context, arg db.GetGasFeePaymentsBySponsorParams) ([]db.GasFeePayment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGasFeePaymentsBySponsor", ctx, arg)
	ret0, _ := ret[0].([]db.GasFeePayment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGasFeePaymentsBySponsor indicates an expected call of GetGasFeePaymentsBySponsor.
func (mr *MockQuerierMockRecorder) GetGasFeePaymentsBySponsor(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGasFeePaymentsBySponsor", reflect.TypeOf((*MockQuerier)(nil).GetGasFeePaymentsBySponsor), ctx, arg)
}

// GetGasFeePaymentsByWorkspace mocks base method.
func (m *MockQuerier) GetGasFeePaymentsByWorkspace(ctx context.Context, arg db.GetGasFeePaymentsByWorkspaceParams) ([]db.GetGasFeePaymentsByWorkspaceRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGasFeePaymentsByWorkspace", ctx, arg)
	ret0, _ := ret[0].([]db.GetGasFeePaymentsByWorkspaceRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGasFeePaymentsByWorkspace indicates an expected call of GetGasFeePaymentsByWorkspace.
func (mr *MockQuerierMockRecorder) GetGasFeePaymentsByWorkspace(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGasFeePaymentsByWorkspace", reflect.TypeOf((*MockQuerier)(nil).GetGasFeePaymentsByWorkspace), ctx, arg)
}

// GetGasFeesByNetwork mocks base method.
func (m *MockQuerier) GetGasFeesByNetwork(ctx context.Context, arg db.GetGasFeesByNetworkParams) ([]db.GetGasFeesByNetworkRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGasFeesByNetwork", ctx, arg)
	ret0, _ := ret[0].([]db.GetGasFeesByNetworkRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGasFeesByNetwork indicates an expected call of GetGasFeesByNetwork.
func (mr *MockQuerierMockRecorder) GetGasFeesByNetwork(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGasFeesByNetwork", reflect.TypeOf((*MockQuerier)(nil).GetGasFeesByNetwork), ctx, arg)
}

// GetGasLineItemsByInvoice mocks base method.
func (m *MockQuerier) GetGasLineItemsByInvoice(ctx context.Context, invoiceID uuid.UUID) ([]db.GetGasLineItemsByInvoiceRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGasLineItemsByInvoice", ctx, invoiceID)
	ret0, _ := ret[0].([]db.GetGasLineItemsByInvoiceRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGasLineItemsByInvoice indicates an expected call of GetGasLineItemsByInvoice.
func (mr *MockQuerierMockRecorder) GetGasLineItemsByInvoice(ctx, invoiceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGasLineItemsByInvoice", reflect.TypeOf((*MockQuerier)(nil).GetGasLineItemsByInvoice), ctx, invoiceID)
}

// GetGasSponsorshipConfig mocks base method.
func (m *MockQuerier) GetGasSponsorshipConfig(ctx context.Context, workspaceID uuid.UUID) (db.GasSponsorshipConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGasSponsorshipConfig", ctx, workspaceID)
	ret0, _ := ret[0].(db.GasSponsorshipConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGasSponsorshipConfig indicates an expected call of GetGasSponsorshipConfig.
func (mr *MockQuerierMockRecorder) GetGasSponsorshipConfig(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGasSponsorshipConfig", reflect.TypeOf((*MockQuerier)(nil).GetGasSponsorshipConfig), ctx, workspaceID)
}

// GetGasSponsorshipStats mocks base method.
func (m *MockQuerier) GetGasSponsorshipStats(ctx context.Context, arg db.GetGasSponsorshipStatsParams) (db.GetGasSponsorshipStatsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGasSponsorshipStats", ctx, arg)
	ret0, _ := ret[0].(db.GetGasSponsorshipStatsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGasSponsorshipStats indicates an expected call of GetGasSponsorshipStats.
func (mr *MockQuerierMockRecorder) GetGasSponsorshipStats(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGasSponsorshipStats", reflect.TypeOf((*MockQuerier)(nil).GetGasSponsorshipStats), ctx, arg)
}

// GetGasSponsorshipsByCustomer mocks base method.
func (m *MockQuerier) GetGasSponsorshipsByCustomer(ctx context.Context, arg db.GetGasSponsorshipsByCustomerParams) (db.GetGasSponsorshipsByCustomerRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGasSponsorshipsByCustomer", ctx, arg)
	ret0, _ := ret[0].(db.GetGasSponsorshipsByCustomerRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGasSponsorshipsByCustomer indicates an expected call of GetGasSponsorshipsByCustomer.
func (mr *MockQuerierMockRecorder) GetGasSponsorshipsByCustomer(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGasSponsorshipsByCustomer", reflect.TypeOf((*MockQuerier)(nil).GetGasSponsorshipsByCustomer), ctx, arg)
}

// GetGasSponsorshipsByProduct mocks base method.
func (m *MockQuerier) GetGasSponsorshipsByProduct(ctx context.Context, arg db.GetGasSponsorshipsByProductParams) (db.GetGasSponsorshipsByProductRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGasSponsorshipsByProduct", ctx, arg)
	ret0, _ := ret[0].(db.GetGasSponsorshipsByProductRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGasSponsorshipsByProduct indicates an expected call of GetGasSponsorshipsByProduct.
func (mr *MockQuerierMockRecorder) GetGasSponsorshipsByProduct(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGasSponsorshipsByProduct", reflect.TypeOf((*MockQuerier)(nil).GetGasSponsorshipsByProduct), ctx, arg)
}

// GetGasToken mocks base method.
func (m *MockQuerier) GetGasToken(ctx context.Context, networkID uuid.UUID) (db.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGasToken", ctx, networkID)
	ret0, _ := ret[0].(db.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGasToken indicates an expected call of GetGasToken.
func (mr *MockQuerierMockRecorder) GetGasToken(ctx, networkID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGasToken", reflect.TypeOf((*MockQuerier)(nil).GetGasToken), ctx, networkID)
}

// GetHourlyMetrics mocks base method.
func (m *MockQuerier) GetHourlyMetrics(ctx context.Context, arg db.GetHourlyMetricsParams) ([]db.DashboardMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHourlyMetrics", ctx, arg)
	ret0, _ := ret[0].([]db.DashboardMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHourlyMetrics indicates an expected call of GetHourlyMetrics.
func (mr *MockQuerierMockRecorder) GetHourlyMetrics(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHourlyMetrics", reflect.TypeOf((*MockQuerier)(nil).GetHourlyMetrics), ctx, arg)
}

// GetInvoiceActivities mocks base method.
func (m *MockQuerier) GetInvoiceActivities(ctx context.Context, arg db.GetInvoiceActivitiesParams) ([]db.InvoiceActivity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoiceActivities", ctx, arg)
	ret0, _ := ret[0].([]db.InvoiceActivity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoiceActivities indicates an expected call of GetInvoiceActivities.
func (mr *MockQuerierMockRecorder) GetInvoiceActivities(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoiceActivities", reflect.TypeOf((*MockQuerier)(nil).GetInvoiceActivities), ctx, arg)
}

// GetInvoiceActivitiesByType mocks base method.
func (m *MockQuerier) GetInvoiceActivitiesByType(ctx context.Context, arg db.GetInvoiceActivitiesByTypeParams) ([]db.InvoiceActivity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoiceActivitiesByType", ctx, arg)
	ret0, _ := ret[0].([]db.InvoiceActivity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoiceActivitiesByType indicates an expected call of GetInvoiceActivitiesByType.
func (mr *MockQuerierMockRecorder) GetInvoiceActivitiesByType(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoiceActivitiesByType", reflect.TypeOf((*MockQuerier)(nil).GetInvoiceActivitiesByType), ctx, arg)
}

// GetInvoiceActivityCount mocks base method.
func (m *MockQuerier) GetInvoiceActivityCount(ctx context.Context, invoiceID uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoiceActivityCount", ctx, invoiceID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoiceActivityCount indicates an expected call of GetInvoiceActivityCount.
func (mr *MockQuerierMockRecorder) GetInvoiceActivityCount(ctx, invoiceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoiceActivityCount", reflect.TypeOf((*MockQuerier)(nil).GetInvoiceActivityCount), ctx, invoiceID)
}

// GetInvoiceByExternalID mocks base method.
func (m *MockQuerier) GetInvoiceByExternalID(ctx context.Context, arg db.GetInvoiceByExternalIDParams) (db.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoiceByExternalID", ctx, arg)
	ret0, _ := ret[0].(db.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoiceByExternalID indicates an expected call of GetInvoiceByExternalID.
func (mr *MockQuerierMockRecorder) GetInvoiceByExternalID(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoiceByExternalID", reflect.TypeOf((*MockQuerier)(nil).GetInvoiceByExternalID), ctx, arg)
}

// GetInvoiceByID mocks base method.
func (m *MockQuerier) GetInvoiceByID(ctx context.Context, arg db.GetInvoiceByIDParams) (db.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoiceByID", ctx, arg)
	ret0, _ := ret[0].(db.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoiceByID indicates an expected call of GetInvoiceByID.
func (mr *MockQuerierMockRecorder) GetInvoiceByID(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoiceByID", reflect.TypeOf((*MockQuerier)(nil).GetInvoiceByID), ctx, arg)
}

// GetInvoiceByNumber mocks base method.
func (m *MockQuerier) GetInvoiceByNumber(ctx context.Context, arg db.GetInvoiceByNumberParams) (db.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoiceByNumber", ctx, arg)
	ret0, _ := ret[0].(db.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoiceByNumber indicates an expected call of GetInvoiceByNumber.
func (mr *MockQuerierMockRecorder) GetInvoiceByNumber(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoiceByNumber", reflect.TypeOf((*MockQuerier)(nil).GetInvoiceByNumber), ctx, arg)
}

// GetInvoiceCryptoAmounts mocks base method.
func (m *MockQuerier) GetInvoiceCryptoAmounts(ctx context.Context, invoiceID uuid.UUID) ([]db.GetInvoiceCryptoAmountsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoiceCryptoAmounts", ctx, invoiceID)
	ret0, _ := ret[0].([]db.GetInvoiceCryptoAmountsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoiceCryptoAmounts indicates an expected call of GetInvoiceCryptoAmounts.
func (mr *MockQuerierMockRecorder) GetInvoiceCryptoAmounts(ctx, invoiceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoiceCryptoAmounts", reflect.TypeOf((*MockQuerier)(nil).GetInvoiceCryptoAmounts), ctx, invoiceID)
}

// GetInvoiceLineItem mocks base method.
func (m *MockQuerier) GetInvoiceLineItem(ctx context.Context, id uuid.UUID) (db.InvoiceLineItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoiceLineItem", ctx, id)
	ret0, _ := ret[0].(db.InvoiceLineItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoiceLineItem indicates an expected call of GetInvoiceLineItem.
func (mr *MockQuerierMockRecorder) GetInvoiceLineItem(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoiceLineItem", reflect.TypeOf((*MockQuerier)(nil).GetInvoiceLineItem), ctx, id)
}

// GetInvoiceLineItems mocks base method.
func (m *MockQuerier) GetInvoiceLineItems(ctx context.Context, invoiceID uuid.UUID) ([]db.InvoiceLineItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoiceLineItems", ctx, invoiceID)
	ret0, _ := ret[0].([]db.InvoiceLineItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoiceLineItems indicates an expected call of GetInvoiceLineItems.
func (mr *MockQuerierMockRecorder) GetInvoiceLineItems(ctx, invoiceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoiceLineItems", reflect.TypeOf((*MockQuerier)(nil).GetInvoiceLineItems), ctx, invoiceID)
}

// GetInvoiceLineItemsBySubscription mocks base method.
func (m *MockQuerier) GetInvoiceLineItemsBySubscription(ctx context.Context, arg db.GetInvoiceLineItemsBySubscriptionParams) ([]db.InvoiceLineItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoiceLineItemsBySubscription", ctx, arg)
	ret0, _ := ret[0].([]db.InvoiceLineItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoiceLineItemsBySubscription indicates an expected call of GetInvoiceLineItemsBySubscription.
func (mr *MockQuerierMockRecorder) GetInvoiceLineItemsBySubscription(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoiceLineItemsBySubscription", reflect.TypeOf((*MockQuerier)(nil).GetInvoiceLineItemsBySubscription), ctx, arg)
}

// GetInvoiceLineItemsByType mocks base method.
func (m *MockQuerier) GetInvoiceLineItemsByType(ctx context.Context, arg db.GetInvoiceLineItemsByTypeParams) ([]db.InvoiceLineItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoiceLineItemsByType", ctx, arg)
	ret0, _ := ret[0].([]db.InvoiceLineItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoiceLineItemsByType indicates an expected call of GetInvoiceLineItemsByType.
func (mr *MockQuerierMockRecorder) GetInvoiceLineItemsByType(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoiceLineItemsByType", reflect.TypeOf((*MockQuerier)(nil).GetInvoiceLineItemsByType), ctx, arg)
}

// GetInvoiceStatsByWorkspace mocks base method.
func (m *MockQuerier) GetInvoiceStatsByWorkspace(ctx context.Context, arg db.GetInvoiceStatsByWorkspaceParams) (db.GetInvoiceStatsByWorkspaceRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoiceStatsByWorkspace", ctx, arg)
	ret0, _ := ret[0].(db.GetInvoiceStatsByWorkspaceRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoiceStatsByWorkspace indicates an expected call of GetInvoiceStatsByWorkspace.
func (mr *MockQuerierMockRecorder) GetInvoiceStatsByWorkspace(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoiceStatsByWorkspace", reflect.TypeOf((*MockQuerier)(nil).GetInvoiceStatsByWorkspace), ctx, arg)
}

// GetInvoiceStatusHistory mocks base method.
func (m *MockQuerier) GetInvoiceStatusHistory(ctx context.Context, invoiceID uuid.UUID) ([]db.GetInvoiceStatusHistoryRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoiceStatusHistory", ctx, invoiceID)
	ret0, _ := ret[0].([]db.GetInvoiceStatusHistoryRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoiceStatusHistory indicates an expected call of GetInvoiceStatusHistory.
func (mr *MockQuerierMockRecorder) GetInvoiceStatusHistory(ctx, invoiceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoiceStatusHistory", reflect.TypeOf((*MockQuerier)(nil).GetInvoiceStatusHistory), ctx, invoiceID)
}

// GetInvoiceSubtotal mocks base method.
func (m *MockQuerier) GetInvoiceSubtotal(ctx context.Context, invoiceID uuid.UUID) (db.GetInvoiceSubtotalRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoiceSubtotal", ctx, invoiceID)
	ret0, _ := ret[0].(db.GetInvoiceSubtotalRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoiceSubtotal indicates an expected call of GetInvoiceSubtotal.
func (mr *MockQuerierMockRecorder) GetInvoiceSubtotal(ctx, invoiceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoiceSubtotal", reflect.TypeOf((*MockQuerier)(nil).GetInvoiceSubtotal), ctx, invoiceID)
}

// GetInvoiceWithLineItems mocks base method.
func (m *MockQuerier) GetInvoiceWithLineItems(ctx context.Context, arg db.GetInvoiceWithLineItemsParams) (db.GetInvoiceWithLineItemsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoiceWithLineItems", ctx, arg)
	ret0, _ := ret[0].(db.GetInvoiceWithLineItemsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoiceWithLineItems indicates an expected call of GetInvoiceWithLineItems.
func (mr *MockQuerierMockRecorder) GetInvoiceWithLineItems(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoiceWithLineItems", reflect.TypeOf((*MockQuerier)(nil).GetInvoiceWithLineItems), ctx, arg)
}

// GetInvoicesByExternalCustomerID mocks base method.
func (m *MockQuerier) GetInvoicesByExternalCustomerID(ctx context.Context, arg db.GetInvoicesByExternalCustomerIDParams) ([]db.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoicesByExternalCustomerID", ctx, arg)
	ret0, _ := ret[0].([]db.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoicesByExternalCustomerID indicates an expected call of GetInvoicesByExternalCustomerID.
func (mr *MockQuerierMockRecorder) GetInvoicesByExternalCustomerID(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoicesByExternalCustomerID", reflect.TypeOf((*MockQuerier)(nil).GetInvoicesByExternalCustomerID), ctx, arg)
}

// GetInvoicesByExternalSubscriptionID mocks base method.
func (m *MockQuerier) GetInvoicesByExternalSubscriptionID(ctx context.Context, arg db.GetInvoicesByExternalSubscriptionIDParams) ([]db.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoicesByExternalSubscriptionID", ctx, arg)
	ret0, _ := ret[0].([]db.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoicesByExternalSubscriptionID indicates an expected call of GetInvoicesByExternalSubscriptionID.
func (mr *MockQuerierMockRecorder) GetInvoicesByExternalSubscriptionID(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoicesByExternalSubscriptionID", reflect.TypeOf((*MockQuerier)(nil).GetInvoicesByExternalSubscriptionID), ctx, arg)
}

// GetInvoicesByPaymentLink mocks base method.
func (m *MockQuerier) GetInvoicesByPaymentLink(ctx context.Context, arg db.GetInvoicesByPaymentLinkParams) ([]db.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoicesByPaymentLink", ctx, arg)
	ret0, _ := ret[0].([]db.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoicesByPaymentLink indicates an expected call of GetInvoicesByPaymentLink.
func (mr *MockQuerierMockRecorder) GetInvoicesByPaymentLink(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoicesByPaymentLink", reflect.TypeOf((*MockQuerier)(nil).GetInvoicesByPaymentLink), ctx, arg)
}

// GetLatestAttemptForCampaign mocks base method.
func (m *MockQuerier) GetLatestAttemptForCampaign(ctx context.Context, campaignID uuid.UUID) (db.DunningAttempt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestAttemptForCampaign", ctx, campaignID)
	ret0, _ := ret[0].(db.DunningAttempt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestAttemptForCampaign indicates an expected call of GetLatestAttemptForCampaign.
func (mr *MockQuerierMockRecorder) GetLatestAttemptForCampaign(ctx, campaignID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestAttemptForCampaign", reflect.TypeOf((*MockQuerier)(nil).GetLatestAttemptForCampaign), ctx, campaignID)
}

// GetLatestDashboardMetrics mocks base method.
func (m *MockQuerier) GetLatestDashboardMetrics(ctx context.Context, arg db.GetLatestDashboardMetricsParams) (db.DashboardMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestDashboardMetrics", ctx, arg)
	ret0, _ := ret[0].(db.DashboardMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestDashboardMetrics indicates an expected call of GetLatestDashboardMetrics.
func (mr *MockQuerierMockRecorder) GetLatestDashboardMetrics(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestDashboardMetrics", reflect.TypeOf((*MockQuerier)(nil).GetLatestDashboardMetrics), ctx, arg)
}

// GetLatestStateChange mocks base method.
func (m *MockQuerier) GetLatestStateChange(ctx context.Context, subscriptionID uuid.UUID) (db.SubscriptionStateHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestStateChange", ctx, subscriptionID)
	ret0, _ := ret[0].(db.SubscriptionStateHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestStateChange indicates an expected call of GetLatestStateChange.
func (mr *MockQuerierMockRecorder) GetLatestStateChange(ctx, subscriptionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestStateChange", reflect.TypeOf((*MockQuerier)(nil).GetLatestStateChange), ctx, subscriptionID)
}

// GetLatestSubscriptionEvent mocks base method.
func (m *MockQuerier) GetLatestSubscriptionEvent(ctx context.Context, subscriptionID uuid.UUID) (db.SubscriptionEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestSubscriptionEvent", ctx, subscriptionID)
	ret0, _ := ret[0].(db.SubscriptionEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestSubscriptionEvent indicates an expected call of GetLatestSubscriptionEvent.
func (mr *MockQuerierMockRecorder) GetLatestSubscriptionEvent(ctx, subscriptionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestSubscriptionEvent", reflect.TypeOf((*MockQuerier)(nil).GetLatestSubscriptionEvent), ctx, subscriptionID)
}

// GetLatestSubscriptionEventByType mocks base method.
func (m *MockQuerier) GetLatestSubscriptionEventByType(ctx context.Context, arg db.GetLatestSubscriptionEventByTypeParams) ([]db.SubscriptionEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestSubscriptionEventByType", ctx, arg)
	ret0, _ := ret[0].([]db.SubscriptionEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestSubscriptionEventByType indicates an expected call of GetLatestSubscriptionEventByType.
func (mr *MockQuerierMockRecorder) GetLatestSubscriptionEventByType(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestSubscriptionEventByType", reflect.TypeOf((*MockQuerier)(nil).GetLatestSubscriptionEventByType), ctx, arg)
}

// GetLatestSyncEventsByEntityType mocks base method.
func (m *MockQuerier) GetLatestSyncEventsByEntityType(ctx context.Context, sessionID uuid.UUID) ([]db.PaymentSyncEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestSyncEventsByEntityType", ctx, sessionID)
	ret0, _ := ret[0].([]db.PaymentSyncEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestSyncEventsByEntityType indicates an expected call of GetLatestSyncEventsByEntityType.
func (mr *MockQuerierMockRecorder) GetLatestSyncEventsByEntityType(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestSyncEventsByEntityType", reflect.TypeOf((*MockQuerier)(nil).GetLatestSyncEventsByEntityType), ctx, sessionID)
}

// GetLatestSyncSessionByProvider mocks base method.
func (m *MockQuerier) GetLatestSyncSessionByProvider(ctx context.Context, arg db.GetLatestSyncSessionByProviderParams) (db.PaymentSyncSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestSyncSessionByProvider", ctx, arg)
	ret0, _ := ret[0].(db.PaymentSyncSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestSyncSessionByProvider indicates an expected call of GetLatestSyncSessionByProvider.
func (mr *MockQuerierMockRecorder) GetLatestSyncSessionByProvider(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestSyncSessionByProvider", reflect.TypeOf((*MockQuerier)(nil).GetLatestSyncSessionByProvider), ctx, arg)
}

// GetLineItemsByCurrency mocks base method.
func (m *MockQuerier) GetLineItemsByCurrency(ctx context.Context, arg db.GetLineItemsByCurrencyParams) ([]db.InvoiceLineItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLineItemsByCurrency", ctx, arg)
	ret0, _ := ret[0].([]db.InvoiceLineItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLineItemsByCurrency indicates an expected call of GetLineItemsByCurrency.
func (mr *MockQuerierMockRecorder) GetLineItemsByCurrency(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLineItemsByCurrency", reflect.TypeOf((*MockQuerier)(nil).GetLineItemsByCurrency), ctx, arg)
}

// GetLineItemsByProduct mocks base method.
func (m *MockQuerier) GetLineItemsByProduct(ctx context.Context, arg db.GetLineItemsByProductParams) ([]db.InvoiceLineItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLineItemsByProduct", ctx, arg)
	ret0, _ := ret[0].([]db.InvoiceLineItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLineItemsByProduct indicates an expected call of GetLineItemsByProduct.
func (mr *MockQuerierMockRecorder) GetLineItemsByProduct(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLineItemsByProduct", reflect.TypeOf((*MockQuerier)(nil).GetLineItemsByProduct), ctx, arg)
}

// GetMonthlyMetrics mocks base method.
func (m *MockQuerier) GetMonthlyMetrics(ctx context.Context, arg db.GetMonthlyMetricsParams) ([]db.DashboardMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyMetrics", ctx, arg)
	ret0, _ := ret[0].([]db.DashboardMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyMetrics indicates an expected call of GetMonthlyMetrics.
func (mr *MockQuerierMockRecorder) GetMonthlyMetrics(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyMetrics", reflect.TypeOf((*MockQuerier)(nil).GetMonthlyMetrics), ctx, arg)
}

// GetNetwork mocks base method.
func (m *MockQuerier) GetNetwork(ctx context.Context, id uuid.UUID) (db.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetwork", ctx, id)
	ret0, _ := ret[0].(db.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetwork indicates an expected call of GetNetwork.
func (mr *MockQuerierMockRecorder) GetNetwork(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetwork", reflect.TypeOf((*MockQuerier)(nil).GetNetwork), ctx, id)
}

// GetNetworkByChainID mocks base method.
func (m *MockQuerier) GetNetworkByChainID(ctx context.Context, chainID int32) (db.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkByChainID", ctx, chainID)
	ret0, _ := ret[0].(db.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkByChainID indicates an expected call of GetNetworkByChainID.
func (mr *MockQuerierMockRecorder) GetNetworkByChainID(ctx, chainID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkByChainID", reflect.TypeOf((*MockQuerier)(nil).GetNetworkByChainID), ctx, chainID)
}

// GetNetworkByCircleNetworkType mocks base method.
func (m *MockQuerier) GetNetworkByCircleNetworkType(ctx context.Context, circleNetworkType db.CircleNetworkType) (db.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkByCircleNetworkType", ctx, circleNetworkType)
	ret0, _ := ret[0].(db.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkByCircleNetworkType indicates an expected call of GetNetworkByCircleNetworkType.
func (mr *MockQuerierMockRecorder) GetNetworkByCircleNetworkType(ctx, circleNetworkType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkByCircleNetworkType", reflect.TypeOf((*MockQuerier)(nil).GetNetworkByCircleNetworkType), ctx, circleNetworkType)
}

// GetNetworkMetrics mocks base method.
func (m *MockQuerier) GetNetworkMetrics(ctx context.Context, arg db.GetNetworkMetricsParams) (db.GetNetworkMetricsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkMetrics", ctx, arg)
	ret0, _ := ret[0].(db.GetNetworkMetricsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkMetrics indicates an expected call of GetNetworkMetrics.
func (mr *MockQuerierMockRecorder) GetNetworkMetrics(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkMetrics", reflect.TypeOf((*MockQuerier)(nil).GetNetworkMetrics), ctx, arg)
}

// GetNextInvoiceNumber mocks base method.
func (m *MockQuerier) GetNextInvoiceNumber(ctx context.Context, workspaceID uuid.UUID) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextInvoiceNumber", ctx, workspaceID)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextInvoiceNumber indicates an expected call of GetNextInvoiceNumber.
func (mr *MockQuerierMockRecorder) GetNextInvoiceNumber(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextInvoiceNumber", reflect.TypeOf((*MockQuerier)(nil).GetNextInvoiceNumber), ctx, workspaceID)
}

// GetOverdueInvoices mocks base method.
func (m *MockQuerier) GetOverdueInvoices(ctx context.Context, arg db.GetOverdueInvoicesParams) ([]db.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOverdueInvoices", ctx, arg)
	ret0, _ := ret[0].([]db.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOverdueInvoices indicates an expected call of GetOverdueInvoices.
func (mr *MockQuerierMockRecorder) GetOverdueInvoices(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOverdueInvoices", reflect.TypeOf((*MockQuerier)(nil).GetOverdueInvoices), ctx, arg)
}

// GetOverdueSubscriptions mocks base method.
func (m *MockQuerier) GetOverdueSubscriptions(ctx context.Context) ([]db.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOverdueSubscriptions", ctx)
	ret0, _ := ret[0].([]db.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOverdueSubscriptions indicates an expected call of GetOverdueSubscriptions.
func (mr *MockQuerierMockRecorder) GetOverdueSubscriptions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOverdueSubscriptions", reflect.TypeOf((*MockQuerier)(nil).GetOverdueSubscriptions), ctx)
}

// GetPayment mocks base method.
func (m *MockQuerier) GetPayment(ctx context.Context, arg db.GetPaymentParams) (db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayment", ctx, arg)
	ret0, _ := ret[0].(db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayment indicates an expected call of GetPayment.
func (mr *MockQuerierMockRecorder) GetPayment(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayment", reflect.TypeOf((*MockQuerier)(nil).GetPayment), ctx, arg)
}

// GetPaymentBySubscriptionEvent mocks base method.
func (m *MockQuerier) GetPaymentBySubscriptionEvent(ctx context.Context, subscriptionEvent pgtype.UUID) (db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentBySubscriptionEvent", ctx, subscriptionEvent)
	ret0, _ := ret[0].(db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentBySubscriptionEvent indicates an expected call of GetPaymentBySubscriptionEvent.
func (mr *MockQuerierMockRecorder) GetPaymentBySubscriptionEvent(ctx, subscriptionEvent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentBySubscriptionEvent", reflect.TypeOf((*MockQuerier)(nil).GetPaymentBySubscriptionEvent), ctx, subscriptionEvent)
}

// GetPaymentByTransactionHash mocks base method.
func (m *MockQuerier) GetPaymentByTransactionHash(ctx context.Context, transactionHash pgtype.Text) (db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentByTransactionHash", ctx, transactionHash)
	ret0, _ := ret[0].(db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentByTransactionHash indicates an expected call of GetPaymentByTransactionHash.
func (mr *MockQuerierMockRecorder) GetPaymentByTransactionHash(ctx, transactionHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentByTransactionHash", reflect.TypeOf((*MockQuerier)(nil).GetPaymentByTransactionHash), ctx, transactionHash)
}

// GetPaymentLink mocks base method.
func (m *MockQuerier) GetPaymentLink(ctx context.Context, arg db.GetPaymentLinkParams) (db.PaymentLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentLink", ctx, arg)
	ret0, _ := ret[0].(db.PaymentLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentLink indicates an expected call of GetPaymentLink.
func (mr *MockQuerierMockRecorder) GetPaymentLink(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentLink", reflect.TypeOf((*MockQuerier)(nil).GetPaymentLink), ctx, arg)
}

// GetPaymentLinkBySlug mocks base method.
func (m *MockQuerier) GetPaymentLinkBySlug(ctx context.Context, slug string) (db.PaymentLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentLinkBySlug", ctx, slug)
	ret0, _ := ret[0].(db.PaymentLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentLinkBySlug indicates an expected call of GetPaymentLinkBySlug.
func (mr *MockQuerierMockRecorder) GetPaymentLinkBySlug(ctx, slug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentLinkBySlug", reflect.TypeOf((*MockQuerier)(nil).GetPaymentLinkBySlug), ctx, slug)
}

// GetPaymentLinkStats mocks base method.
func (m *MockQuerier) GetPaymentLinkStats(ctx context.Context, workspaceID uuid.UUID) (db.GetPaymentLinkStatsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentLinkStats", ctx, workspaceID)
	ret0, _ := ret[0].(db.GetPaymentLinkStatsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentLinkStats indicates an expected call of GetPaymentLinkStats.
func (mr *MockQuerierMockRecorder) GetPaymentLinkStats(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentLinkStats", reflect.TypeOf((*MockQuerier)(nil).GetPaymentLinkStats), ctx, workspaceID)
}

// GetPaymentLinksByProduct mocks base method.
func (m *MockQuerier) GetPaymentLinksByProduct(ctx context.Context, arg db.GetPaymentLinksByProductParams) ([]db.PaymentLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentLinksByProduct", ctx, arg)
	ret0, _ := ret[0].([]db.PaymentLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentLinksByProduct indicates an expected call of GetPaymentLinksByProduct.
func (mr *MockQuerierMockRecorder) GetPaymentLinksByProduct(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentLinksByProduct", reflect.TypeOf((*MockQuerier)(nil).GetPaymentLinksByProduct), ctx, arg)
}

// GetPaymentLinksByWorkspace mocks base method.
func (m *MockQuerier) GetPaymentLinksByWorkspace(ctx context.Context, arg db.GetPaymentLinksByWorkspaceParams) ([]db.PaymentLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentLinksByWorkspace", ctx, arg)
	ret0, _ := ret[0].([]db.PaymentLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentLinksByWorkspace indicates an expected call of GetPaymentLinksByWorkspace.
func (mr *MockQuerierMockRecorder) GetPaymentLinksByWorkspace(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentLinksByWorkspace", reflect.TypeOf((*MockQuerier)(nil).GetPaymentLinksByWorkspace), ctx, arg)
}

// GetPaymentMetrics mocks base method.
func (m *MockQuerier) GetPaymentMetrics(ctx context.Context, arg db.GetPaymentMetricsParams) (db.GetPaymentMetricsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentMetrics", ctx, arg)
	ret0, _ := ret[0].(db.GetPaymentMetricsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentMetrics indicates an expected call of GetPaymentMetrics.
func (mr *MockQuerierMockRecorder) GetPaymentMetrics(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentMetrics", reflect.TypeOf((*MockQuerier)(nil).GetPaymentMetrics), ctx, arg)
}

// GetPaymentMetricsSummary mocks base method.
func (m *MockQuerier) GetPaymentMetricsSummary(ctx context.Context, arg db.GetPaymentMetricsSummaryParams) (db.GetPaymentMetricsSummaryRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentMetricsSummary", ctx, arg)
	ret0, _ := ret[0].(db.GetPaymentMetricsSummaryRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentMetricsSummary indicates an expected call of GetPaymentMetricsSummary.
func (mr *MockQuerierMockRecorder) GetPaymentMetricsSummary(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentMetricsSummary", reflect.TypeOf((*MockQuerier)(nil).GetPaymentMetricsSummary), ctx, arg)
}

// GetPaymentVolume mocks base method.
func (m *MockQuerier) GetPaymentVolume(ctx context.Context, arg db.GetPaymentVolumeParams) (db.GetPaymentVolumeRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentVolume", ctx, arg)
	ret0, _ := ret[0].(db.GetPaymentVolumeRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentVolume indicates an expected call of GetPaymentVolume.
func (mr *MockQuerierMockRecorder) GetPaymentVolume(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentVolume", reflect.TypeOf((*MockQuerier)(nil).GetPaymentVolume), ctx, arg)
}

// GetPaymentWithGasDetails mocks base method.
func (m *MockQuerier) GetPaymentWithGasDetails(ctx context.Context, arg db.GetPaymentWithGasDetailsParams) (db.GetPaymentWithGasDetailsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentWithGasDetails", ctx, arg)
	ret0, _ := ret[0].(db.GetPaymentWithGasDetailsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentWithGasDetails indicates an expected call of GetPaymentWithGasDetails.
func (mr *MockQuerierMockRecorder) GetPaymentWithGasDetails(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentWithGasDetails", reflect.TypeOf((*MockQuerier)(nil).GetPaymentWithGasDetails), ctx, arg)
}

// GetPaymentsByCustomer mocks base method.
func (m *MockQuerier) GetPaymentsByCustomer(ctx context.Context, arg db.GetPaymentsByCustomerParams) ([]db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentsByCustomer", ctx, arg)
	ret0, _ := ret[0].([]db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentsByCustomer indicates an expected call of GetPaymentsByCustomer.
func (mr *MockQuerierMockRecorder) GetPaymentsByCustomer(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentsByCustomer", reflect.TypeOf((*MockQuerier)(nil).GetPaymentsByCustomer), ctx, arg)
}

// GetPaymentsByCustomerWithGas mocks base method.
func (m *MockQuerier) GetPaymentsByCustomerWithGas(ctx context.Context, arg db.GetPaymentsByCustomerWithGasParams) ([]db.GetPaymentsByCustomerWithGasRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentsByCustomerWithGas", ctx, arg)
	ret0, _ := ret[0].([]db.GetPaymentsByCustomerWithGasRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentsByCustomerWithGas indicates an expected call of GetPaymentsByCustomerWithGas.
func (mr *MockQuerierMockRecorder) GetPaymentsByCustomerWithGas(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentsByCustomerWithGas", reflect.TypeOf((*MockQuerier)(nil).GetPaymentsByCustomerWithGas), ctx, arg)
}

// GetPaymentsByDateRange mocks base method.
func (m *MockQuerier) GetPaymentsByDateRange(ctx context.Context, arg db.GetPaymentsByDateRangeParams) ([]db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentsByDateRange", ctx, arg)
	ret0, _ := ret[0].([]db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentsByDateRange indicates an expected call of GetPaymentsByDateRange.
func (mr *MockQuerierMockRecorder) GetPaymentsByDateRange(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentsByDateRange", reflect.TypeOf((*MockQuerier)(nil).GetPaymentsByDateRange), ctx, arg)
}

// GetPaymentsByExternalId mocks base method.
func (m *MockQuerier) GetPaymentsByExternalId(ctx context.Context, arg db.GetPaymentsByExternalIdParams) (db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentsByExternalId", ctx, arg)
	ret0, _ := ret[0].(db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentsByExternalId indicates an expected call of GetPaymentsByExternalId.
func (mr *MockQuerierMockRecorder) GetPaymentsByExternalId(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentsByExternalId", reflect.TypeOf((*MockQuerier)(nil).GetPaymentsByExternalId), ctx, arg)
}

// GetPaymentsByInvoice mocks base method.
func (m *MockQuerier) GetPaymentsByInvoice(ctx context.Context, arg db.GetPaymentsByInvoiceParams) ([]db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentsByInvoice", ctx, arg)
	ret0, _ := ret[0].([]db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentsByInvoice indicates an expected call of GetPaymentsByInvoice.
func (mr *MockQuerierMockRecorder) GetPaymentsByInvoice(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentsByInvoice", reflect.TypeOf((*MockQuerier)(nil).GetPaymentsByInvoice), ctx, arg)
}

// GetPaymentsByStatus mocks base method.
func (m *MockQuerier) GetPaymentsByStatus(ctx context.Context, arg db.GetPaymentsByStatusParams) ([]db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentsByStatus", ctx, arg)
	ret0, _ := ret[0].([]db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentsByStatus indicates an expected call of GetPaymentsByStatus.
func (mr *MockQuerierMockRecorder) GetPaymentsByStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentsByStatus", reflect.TypeOf((*MockQuerier)(nil).GetPaymentsByStatus), ctx, arg)
}

// GetPaymentsBySubscription mocks base method.
func (m *MockQuerier) GetPaymentsBySubscription(ctx context.Context, arg db.GetPaymentsBySubscriptionParams) ([]db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentsBySubscription", ctx, arg)
	ret0, _ := ret[0].([]db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentsBySubscription indicates an expected call of GetPaymentsBySubscription.
func (mr *MockQuerierMockRecorder) GetPaymentsBySubscription(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentsBySubscription", reflect.TypeOf((*MockQuerier)(nil).GetPaymentsBySubscription), ctx, arg)
}

// GetPaymentsByTransactionHash mocks base method.
func (m *MockQuerier) GetPaymentsByTransactionHash(ctx context.Context, transactionHash pgtype.Text) ([]db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentsByTransactionHash", ctx, transactionHash)
	ret0, _ := ret[0].([]db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentsByTransactionHash indicates an expected call of GetPaymentsByTransactionHash.
func (mr *MockQuerierMockRecorder) GetPaymentsByTransactionHash(ctx, transactionHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentsByTransactionHash", reflect.TypeOf((*MockQuerier)(nil).GetPaymentsByTransactionHash), ctx, transactionHash)
}

// GetPaymentsByWorkspace mocks base method.
func (m *MockQuerier) GetPaymentsByWorkspace(ctx context.Context, arg db.GetPaymentsByWorkspaceParams) ([]db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentsByWorkspace", ctx, arg)
	ret0, _ := ret[0].([]db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentsByWorkspace indicates an expected call of GetPaymentsByWorkspace.
func (mr *MockQuerierMockRecorder) GetPaymentsByWorkspace(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentsByWorkspace", reflect.TypeOf((*MockQuerier)(nil).GetPaymentsByWorkspace), ctx, arg)
}

// GetPendingInvoicesForGeneration mocks base method.
func (m *MockQuerier) GetPendingInvoicesForGeneration(ctx context.Context, nextRedemptionDate pgtype.Timestamptz) ([]db.GetPendingInvoicesForGenerationRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingInvoicesForGeneration", ctx, nextRedemptionDate)
	ret0, _ := ret[0].([]db.GetPendingInvoicesForGenerationRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingInvoicesForGeneration indicates an expected call of GetPendingInvoicesForGeneration.
func (mr *MockQuerierMockRecorder) GetPendingInvoicesForGeneration(ctx, nextRedemptionDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingInvoicesForGeneration", reflect.TypeOf((*MockQuerier)(nil).GetPendingInvoicesForGeneration), ctx, nextRedemptionDate)
}

// GetPrimaryCustomerWallet mocks base method.
func (m *MockQuerier) GetPrimaryCustomerWallet(ctx context.Context, customerID uuid.UUID) (db.CustomerWallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrimaryCustomerWallet", ctx, customerID)
	ret0, _ := ret[0].(db.CustomerWallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrimaryCustomerWallet indicates an expected call of GetPrimaryCustomerWallet.
func (mr *MockQuerierMockRecorder) GetPrimaryCustomerWallet(ctx, customerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrimaryCustomerWallet", reflect.TypeOf((*MockQuerier)(nil).GetPrimaryCustomerWallet), ctx, customerID)
}

// GetProduct mocks base method.
func (m *MockQuerier) GetProduct(ctx context.Context, arg db.GetProductParams) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", ctx, arg)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockQuerierMockRecorder) GetProduct(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockQuerier)(nil).GetProduct), ctx, arg)
}

// GetProductAddonRelationship mocks base method.
func (m *MockQuerier) GetProductAddonRelationship(ctx context.Context, id uuid.UUID) (db.ProductAddonRelationship, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductAddonRelationship", ctx, id)
	ret0, _ := ret[0].(db.ProductAddonRelationship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductAddonRelationship indicates an expected call of GetProductAddonRelationship.
func (mr *MockQuerierMockRecorder) GetProductAddonRelationship(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductAddonRelationship", reflect.TypeOf((*MockQuerier)(nil).GetProductAddonRelationship), ctx, id)
}

// GetProductAddonRelationshipByProducts mocks base method.
func (m *MockQuerier) GetProductAddonRelationshipByProducts(ctx context.Context, arg db.GetProductAddonRelationshipByProductsParams) (db.ProductAddonRelationship, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductAddonRelationshipByProducts", ctx, arg)
	ret0, _ := ret[0].(db.ProductAddonRelationship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductAddonRelationshipByProducts indicates an expected call of GetProductAddonRelationshipByProducts.
func (mr *MockQuerierMockRecorder) GetProductAddonRelationshipByProducts(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductAddonRelationshipByProducts", reflect.TypeOf((*MockQuerier)(nil).GetProductAddonRelationshipByProducts), ctx, arg)
}

// GetProductByExternalID mocks base method.
func (m *MockQuerier) GetProductByExternalID(ctx context.Context, arg db.GetProductByExternalIDParams) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByExternalID", ctx, arg)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByExternalID indicates an expected call of GetProductByExternalID.
func (mr *MockQuerierMockRecorder) GetProductByExternalID(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByExternalID", reflect.TypeOf((*MockQuerier)(nil).GetProductByExternalID), ctx, arg)
}

// GetProductLineItemsByInvoice mocks base method.
func (m *MockQuerier) GetProductLineItemsByInvoice(ctx context.Context, invoiceID uuid.UUID) ([]db.GetProductLineItemsByInvoiceRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductLineItemsByInvoice", ctx, invoiceID)
	ret0, _ := ret[0].([]db.GetProductLineItemsByInvoiceRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductLineItemsByInvoice indicates an expected call of GetProductLineItemsByInvoice.
func (mr *MockQuerierMockRecorder) GetProductLineItemsByInvoice(ctx, invoiceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductLineItemsByInvoice", reflect.TypeOf((*MockQuerier)(nil).GetProductLineItemsByInvoice), ctx, invoiceID)
}

// GetProductNetworks mocks base method.
func (m *MockQuerier) GetProductNetworks(ctx context.Context, productID uuid.UUID) ([]db.GetProductNetworksRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductNetworks", ctx, productID)
	ret0, _ := ret[0].([]db.GetProductNetworksRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductNetworks indicates an expected call of GetProductNetworks.
func (mr *MockQuerierMockRecorder) GetProductNetworks(ctx, productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductNetworks", reflect.TypeOf((*MockQuerier)(nil).GetProductNetworks), ctx, productID)
}

// GetProductToken mocks base method.
func (m *MockQuerier) GetProductToken(ctx context.Context, id uuid.UUID) (db.GetProductTokenRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductToken", ctx, id)
	ret0, _ := ret[0].(db.GetProductTokenRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductToken indicates an expected call of GetProductToken.
func (mr *MockQuerierMockRecorder) GetProductToken(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductToken", reflect.TypeOf((*MockQuerier)(nil).GetProductToken), ctx, id)
}

// GetProductTokenByIds mocks base method.
func (m *MockQuerier) GetProductTokenByIds(ctx context.Context, arg db.GetProductTokenByIdsParams) (db.GetProductTokenByIdsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductTokenByIds", ctx, arg)
	ret0, _ := ret[0].(db.GetProductTokenByIdsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductTokenByIds indicates an expected call of GetProductTokenByIds.
func (mr *MockQuerierMockRecorder) GetProductTokenByIds(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductTokenByIds", reflect.TypeOf((*MockQuerier)(nil).GetProductTokenByIds), ctx, arg)
}

// GetProductTokensByNetwork mocks base method.
func (m *MockQuerier) GetProductTokensByNetwork(ctx context.Context, arg db.GetProductTokensByNetworkParams) ([]db.GetProductTokensByNetworkRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductTokensByNetwork", ctx, arg)
	ret0, _ := ret[0].([]db.GetProductTokensByNetworkRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductTokensByNetwork indicates an expected call of GetProductTokensByNetwork.
func (mr *MockQuerierMockRecorder) GetProductTokensByNetwork(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductTokensByNetwork", reflect.TypeOf((*MockQuerier)(nil).GetProductTokensByNetwork), ctx, arg)
}

// GetProductTokensByProduct mocks base method.
func (m *MockQuerier) GetProductTokensByProduct(ctx context.Context, productID uuid.UUID) ([]db.GetProductTokensByProductRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductTokensByProduct", ctx, productID)
	ret0, _ := ret[0].([]db.GetProductTokensByProductRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductTokensByProduct indicates an expected call of GetProductTokensByProduct.
func (mr *MockQuerierMockRecorder) GetProductTokensByProduct(ctx, productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductTokensByProduct", reflect.TypeOf((*MockQuerier)(nil).GetProductTokensByProduct), ctx, productID)
}

// GetProductWithoutWorkspaceId mocks base method.
func (m *MockQuerier) GetProductWithoutWorkspaceId(ctx context.Context, id uuid.UUID) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductWithoutWorkspaceId", ctx, id)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductWithoutWorkspaceId indicates an expected call of GetProductWithoutWorkspaceId.
func (mr *MockQuerierMockRecorder) GetProductWithoutWorkspaceId(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductWithoutWorkspaceId", reflect.TypeOf((*MockQuerier)(nil).GetProductWithoutWorkspaceId), ctx, id)
}

// GetProductsByGroup mocks base method.
func (m *MockQuerier) GetProductsByGroup(ctx context.Context, arg db.GetProductsByGroupParams) ([]db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsByGroup", ctx, arg)
	ret0, _ := ret[0].([]db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsByGroup indicates an expected call of GetProductsByGroup.
func (mr *MockQuerierMockRecorder) GetProductsByGroup(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsByGroup", reflect.TypeOf((*MockQuerier)(nil).GetProductsByGroup), ctx, arg)
}

// GetProductsByPaymentProvider mocks base method.
func (m *MockQuerier) GetProductsByPaymentProvider(ctx context.Context, arg db.GetProductsByPaymentProviderParams) ([]db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsByPaymentProvider", ctx, arg)
	ret0, _ := ret[0].([]db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsByPaymentProvider indicates an expected call of GetProductsByPaymentProvider.
func (mr *MockQuerierMockRecorder) GetProductsByPaymentProvider(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsByPaymentProvider", reflect.TypeOf((*MockQuerier)(nil).GetProductsByPaymentProvider), ctx, arg)
}

// GetProductsByPaymentSyncStatus mocks base method.
func (m *MockQuerier) GetProductsByPaymentSyncStatus(ctx context.Context, arg db.GetProductsByPaymentSyncStatusParams) ([]db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsByPaymentSyncStatus", ctx, arg)
	ret0, _ := ret[0].([]db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsByPaymentSyncStatus indicates an expected call of GetProductsByPaymentSyncStatus.
func (mr *MockQuerierMockRecorder) GetProductsByPaymentSyncStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsByPaymentSyncStatus", reflect.TypeOf((*MockQuerier)(nil).GetProductsByPaymentSyncStatus), ctx, arg)
}

// GetProductsByType mocks base method.
func (m *MockQuerier) GetProductsByType(ctx context.Context, arg db.GetProductsByTypeParams) ([]db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsByType", ctx, arg)
	ret0, _ := ret[0].([]db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsByType indicates an expected call of GetProductsByType.
func (mr *MockQuerierMockRecorder) GetProductsByType(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsByType", reflect.TypeOf((*MockQuerier)(nil).GetProductsByType), ctx, arg)
}

// GetProductsNeedingSync mocks base method.
func (m *MockQuerier) GetProductsNeedingSync(ctx context.Context, workspaceID uuid.UUID) ([]db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsNeedingSync", ctx, workspaceID)
	ret0, _ := ret[0].([]db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsNeedingSync indicates an expected call of GetProductsNeedingSync.
func (mr *MockQuerierMockRecorder) GetProductsNeedingSync(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsNeedingSync", reflect.TypeOf((*MockQuerier)(nil).GetProductsNeedingSync), ctx, workspaceID)
}

// GetProductsSyncedByProvider mocks base method.
func (m *MockQuerier) GetProductsSyncedByProvider(ctx context.Context, arg db.GetProductsSyncedByProviderParams) ([]db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsSyncedByProvider", ctx, arg)
	ret0, _ := ret[0].([]db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsSyncedByProvider indicates an expected call of GetProductsSyncedByProvider.
func (mr *MockQuerierMockRecorder) GetProductsSyncedByProvider(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsSyncedByProvider", reflect.TypeOf((*MockQuerier)(nil).GetProductsSyncedByProvider), ctx, arg)
}

// GetProductsWithSyncConflicts mocks base method.
func (m *MockQuerier) GetProductsWithSyncConflicts(ctx context.Context, workspaceID uuid.UUID) ([]db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsWithSyncConflicts", ctx, workspaceID)
	ret0, _ := ret[0].([]db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsWithSyncConflicts indicates an expected call of GetProductsWithSyncConflicts.
func (mr *MockQuerierMockRecorder) GetProductsWithSyncConflicts(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsWithSyncConflicts", reflect.TypeOf((*MockQuerier)(nil).GetProductsWithSyncConflicts), ctx, workspaceID)
}

// GetProrationSummaryBySubscription mocks base method.
func (m *MockQuerier) GetProrationSummaryBySubscription(ctx context.Context, subscriptionID uuid.UUID) (db.GetProrationSummaryBySubscriptionRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProrationSummaryBySubscription", ctx, subscriptionID)
	ret0, _ := ret[0].(db.GetProrationSummaryBySubscriptionRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProrationSummaryBySubscription indicates an expected call of GetProrationSummaryBySubscription.
func (mr *MockQuerierMockRecorder) GetProrationSummaryBySubscription(ctx, subscriptionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProrationSummaryBySubscription", reflect.TypeOf((*MockQuerier)(nil).GetProrationSummaryBySubscription), ctx, subscriptionID)
}

// GetProrationsByScheduleChange mocks base method.
func (m *MockQuerier) GetProrationsByScheduleChange(ctx context.Context, scheduleChangeID pgtype.UUID) ([]db.SubscriptionProration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProrationsByScheduleChange", ctx, scheduleChangeID)
	ret0, _ := ret[0].([]db.SubscriptionProration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProrationsByScheduleChange indicates an expected call of GetProrationsByScheduleChange.
func (mr *MockQuerierMockRecorder) GetProrationsByScheduleChange(ctx, scheduleChangeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProrationsByScheduleChange", reflect.TypeOf((*MockQuerier)(nil).GetProrationsByScheduleChange), ctx, scheduleChangeID)
}

// GetProviderAccountByID mocks base method.
func (m *MockQuerier) GetProviderAccountByID(ctx context.Context, arg db.GetProviderAccountByIDParams) (db.WorkspaceProviderAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviderAccountByID", ctx, arg)
	ret0, _ := ret[0].(db.WorkspaceProviderAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProviderAccountByID indicates an expected call of GetProviderAccountByID.
func (mr *MockQuerierMockRecorder) GetProviderAccountByID(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderAccountByID", reflect.TypeOf((*MockQuerier)(nil).GetProviderAccountByID), ctx, arg)
}

// GetProviderAccountByWorkspace mocks base method.
func (m *MockQuerier) GetProviderAccountByWorkspace(ctx context.Context, arg db.GetProviderAccountByWorkspaceParams) (db.WorkspaceProviderAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviderAccountByWorkspace", ctx, arg)
	ret0, _ := ret[0].(db.WorkspaceProviderAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProviderAccountByWorkspace indicates an expected call of GetProviderAccountByWorkspace.
func (mr *MockQuerierMockRecorder) GetProviderAccountByWorkspace(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderAccountByWorkspace", reflect.TypeOf((*MockQuerier)(nil).GetProviderAccountByWorkspace), ctx, arg)
}

// GetProviderSyncStatusByWorkspace mocks base method.
func (m *MockQuerier) GetProviderSyncStatusByWorkspace(ctx context.Context, workspaceID uuid.UUID) ([]db.GetProviderSyncStatusByWorkspaceRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviderSyncStatusByWorkspace", ctx, workspaceID)
	ret0, _ := ret[0].([]db.GetProviderSyncStatusByWorkspaceRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProviderSyncStatusByWorkspace indicates an expected call of GetProviderSyncStatusByWorkspace.
func (mr *MockQuerierMockRecorder) GetProviderSyncStatusByWorkspace(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderSyncStatusByWorkspace", reflect.TypeOf((*MockQuerier)(nil).GetProviderSyncStatusByWorkspace), ctx, workspaceID)
}

// GetRecentInvoiceActivities mocks base method.
func (m *MockQuerier) GetRecentInvoiceActivities(ctx context.Context, arg db.GetRecentInvoiceActivitiesParams) ([]db.InvoiceActivity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentInvoiceActivities", ctx, arg)
	ret0, _ := ret[0].([]db.InvoiceActivity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentInvoiceActivities indicates an expected call of GetRecentInvoiceActivities.
func (mr *MockQuerierMockRecorder) GetRecentInvoiceActivities(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentInvoiceActivities", reflect.TypeOf((*MockQuerier)(nil).GetRecentInvoiceActivities), ctx, arg)
}

// GetRecentInvoices mocks base method.
func (m *MockQuerier) GetRecentInvoices(ctx context.Context, arg db.GetRecentInvoicesParams) ([]db.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentInvoices", ctx, arg)
	ret0, _ := ret[0].([]db.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentInvoices indicates an expected call of GetRecentInvoices.
func (mr *MockQuerierMockRecorder) GetRecentInvoices(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentInvoices", reflect.TypeOf((*MockQuerier)(nil).GetRecentInvoices), ctx, arg)
}

// GetRecentWebhookErrors mocks base method.
func (m *MockQuerier) GetRecentWebhookErrors(ctx context.Context, arg db.GetRecentWebhookErrorsParams) ([]db.GetRecentWebhookErrorsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentWebhookErrors", ctx, arg)
	ret0, _ := ret[0].([]db.GetRecentWebhookErrorsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentWebhookErrors indicates an expected call of GetRecentWebhookErrors.
func (mr *MockQuerierMockRecorder) GetRecentWebhookErrors(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentWebhookErrors", reflect.TypeOf((*MockQuerier)(nil).GetRecentWebhookErrors), ctx, arg)
}

// GetRecentlyUsedWallets mocks base method.
func (m *MockQuerier) GetRecentlyUsedWallets(ctx context.Context, arg db.GetRecentlyUsedWalletsParams) ([]db.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentlyUsedWallets", ctx, arg)
	ret0, _ := ret[0].([]db.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentlyUsedWallets indicates an expected call of GetRecentlyUsedWallets.
func (mr *MockQuerierMockRecorder) GetRecentlyUsedWallets(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentlyUsedWallets", reflect.TypeOf((*MockQuerier)(nil).GetRecentlyUsedWallets), ctx, arg)
}

// GetRecentlyUsedWalletsWithCircleData mocks base method.
func (m *MockQuerier) GetRecentlyUsedWalletsWithCircleData(ctx context.Context, arg db.GetRecentlyUsedWalletsWithCircleDataParams) ([]db.GetRecentlyUsedWalletsWithCircleDataRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentlyUsedWalletsWithCircleData", ctx, arg)
	ret0, _ := ret[0].([]db.GetRecentlyUsedWalletsWithCircleDataRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentlyUsedWalletsWithCircleData indicates an expected call of GetRecentlyUsedWalletsWithCircleData.
func (mr *MockQuerierMockRecorder) GetRecentlyUsedWalletsWithCircleData(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentlyUsedWalletsWithCircleData", reflect.TypeOf((*MockQuerier)(nil).GetRecentlyUsedWalletsWithCircleData), ctx, arg)
}

// GetRevenueGrowth mocks base method.
func (m *MockQuerier) GetRevenueGrowth(ctx context.Context, arg db.GetRevenueGrowthParams) (db.GetRevenueGrowthRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRevenueGrowth", ctx, arg)
	ret0, _ := ret[0].(db.GetRevenueGrowthRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRevenueGrowth indicates an expected call of GetRevenueGrowth.
func (mr *MockQuerierMockRecorder) GetRevenueGrowth(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRevenueGrowth", reflect.TypeOf((*MockQuerier)(nil).GetRevenueGrowth), ctx, arg)
}

// GetScheduleChange mocks base method.
func (m *MockQuerier) GetScheduleChange(ctx context.Context, id uuid.UUID) (db.SubscriptionScheduleChange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScheduleChange", ctx, id)
	ret0, _ := ret[0].(db.SubscriptionScheduleChange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScheduleChange indicates an expected call of GetScheduleChange.
func (mr *MockQuerierMockRecorder) GetScheduleChange(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScheduleChange", reflect.TypeOf((*MockQuerier)(nil).GetScheduleChange), ctx, id)
}

// GetSponsorshipConfigsNeedingReset mocks base method.
func (m *MockQuerier) GetSponsorshipConfigsNeedingReset(ctx context.Context, dollar_1 pgtype.Date) ([]db.GasSponsorshipConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSponsorshipConfigsNeedingReset", ctx, dollar_1)
	ret0, _ := ret[0].([]db.GasSponsorshipConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSponsorshipConfigsNeedingReset indicates an expected call of GetSponsorshipConfigsNeedingReset.
func (mr *MockQuerierMockRecorder) GetSponsorshipConfigsNeedingReset(ctx, dollar_1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSponsorshipConfigsNeedingReset", reflect.TypeOf((*MockQuerier)(nil).GetSponsorshipConfigsNeedingReset), ctx, dollar_1)
}

// GetStateChangesByDateRange mocks base method.
func (m *MockQuerier) GetStateChangesByDateRange(ctx context.Context, arg db.GetStateChangesByDateRangeParams) ([]db.SubscriptionStateHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateChangesByDateRange", ctx, arg)
	ret0, _ := ret[0].([]db.SubscriptionStateHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStateChangesByDateRange indicates an expected call of GetStateChangesByDateRange.
func (mr *MockQuerierMockRecorder) GetStateChangesByDateRange(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateChangesByDateRange", reflect.TypeOf((*MockQuerier)(nil).GetStateChangesByDateRange), ctx, arg)
}

// GetStateChangesByScheduleChange mocks base method.
func (m *MockQuerier) GetStateChangesByScheduleChange(ctx context.Context, scheduleChangeID pgtype.UUID) ([]db.SubscriptionStateHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateChangesByScheduleChange", ctx, scheduleChangeID)
	ret0, _ := ret[0].([]db.SubscriptionStateHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStateChangesByScheduleChange indicates an expected call of GetStateChangesByScheduleChange.
func (mr *MockQuerierMockRecorder) GetStateChangesByScheduleChange(ctx, scheduleChangeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateChangesByScheduleChange", reflect.TypeOf((*MockQuerier)(nil).GetStateChangesByScheduleChange), ctx, scheduleChangeID)
}

// GetSubscription mocks base method.
func (m *MockQuerier) GetSubscription(ctx context.Context, id uuid.UUID) (db.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscription", ctx, id)
	ret0, _ := ret[0].(db.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscription indicates an expected call of GetSubscription.
func (mr *MockQuerierMockRecorder) GetSubscription(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscription", reflect.TypeOf((*MockQuerier)(nil).GetSubscription), ctx, id)
}

// GetSubscriptionBaseLineItem mocks base method.
func (m *MockQuerier) GetSubscriptionBaseLineItem(ctx context.Context, subscriptionID uuid.UUID) (db.GetSubscriptionBaseLineItemRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionBaseLineItem", ctx, subscriptionID)
	ret0, _ := ret[0].(db.GetSubscriptionBaseLineItemRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionBaseLineItem indicates an expected call of GetSubscriptionBaseLineItem.
func (mr *MockQuerierMockRecorder) GetSubscriptionBaseLineItem(ctx, subscriptionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionBaseLineItem", reflect.TypeOf((*MockQuerier)(nil).GetSubscriptionBaseLineItem), ctx, subscriptionID)
}

// GetSubscriptionByExternalID mocks base method.
func (m *MockQuerier) GetSubscriptionByExternalID(ctx context.Context, arg db.GetSubscriptionByExternalIDParams) (db.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionByExternalID", ctx, arg)
	ret0, _ := ret[0].(db.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionByExternalID indicates an expected call of GetSubscriptionByExternalID.
func (mr *MockQuerierMockRecorder) GetSubscriptionByExternalID(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionByExternalID", reflect.TypeOf((*MockQuerier)(nil).GetSubscriptionByExternalID), ctx, arg)
}

// GetSubscriptionByNumID mocks base method.
func (m *MockQuerier) GetSubscriptionByNumID(ctx context.Context, numID int64) (db.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionByNumID", ctx, numID)
	ret0, _ := ret[0].(db.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionByNumID indicates an expected call of GetSubscriptionByNumID.
func (mr *MockQuerierMockRecorder) GetSubscriptionByNumID(ctx, numID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionByNumID", reflect.TypeOf((*MockQuerier)(nil).GetSubscriptionByNumID), ctx, numID)
}

// GetSubscriptionEvent mocks base method.
func (m *MockQuerier) GetSubscriptionEvent(ctx context.Context, id uuid.UUID) (db.SubscriptionEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionEvent", ctx, id)
	ret0, _ := ret[0].(db.SubscriptionEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionEvent indicates an expected call of GetSubscriptionEvent.
func (mr *MockQuerierMockRecorder) GetSubscriptionEvent(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionEvent", reflect.TypeOf((*MockQuerier)(nil).GetSubscriptionEvent), ctx, id)
}

// GetSubscriptionEventByTransactionHash mocks base method.
func (m *MockQuerier) GetSubscriptionEventByTransactionHash(ctx context.Context, transactionHash pgtype.Text) (db.SubscriptionEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionEventByTransactionHash", ctx, transactionHash)
	ret0, _ := ret[0].(db.SubscriptionEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionEventByTransactionHash indicates an expected call of GetSubscriptionEventByTransactionHash.
func (mr *MockQuerierMockRecorder) GetSubscriptionEventByTransactionHash(ctx, transactionHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionEventByTransactionHash", reflect.TypeOf((*MockQuerier)(nil).GetSubscriptionEventByTransactionHash), ctx, transactionHash)
}

// GetSubscriptionForInvoicing mocks base method.
func (m *MockQuerier) GetSubscriptionForInvoicing(ctx context.Context, id uuid.UUID) (db.GetSubscriptionForInvoicingRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionForInvoicing", ctx, id)
	ret0, _ := ret[0].(db.GetSubscriptionForInvoicingRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionForInvoicing indicates an expected call of GetSubscriptionForInvoicing.
func (mr *MockQuerierMockRecorder) GetSubscriptionForInvoicing(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionForInvoicing", reflect.TypeOf((*MockQuerier)(nil).GetSubscriptionForInvoicing), ctx, id)
}

// GetSubscriptionLifecycleEvents mocks base method.
func (m *MockQuerier) GetSubscriptionLifecycleEvents(ctx context.Context, subscriptionID uuid.UUID) ([]db.GetSubscriptionLifecycleEventsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionLifecycleEvents", ctx, subscriptionID)
	ret0, _ := ret[0].([]db.GetSubscriptionLifecycleEventsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionLifecycleEvents indicates an expected call of GetSubscriptionLifecycleEvents.
func (mr *MockQuerierMockRecorder) GetSubscriptionLifecycleEvents(ctx, subscriptionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionLifecycleEvents", reflect.TypeOf((*MockQuerier)(nil).GetSubscriptionLifecycleEvents), ctx, subscriptionID)
}

// GetSubscriptionLineItem mocks base method.
func (m *MockQuerier) GetSubscriptionLineItem(ctx context.Context, id uuid.UUID) (db.SubscriptionLineItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionLineItem", ctx, id)
	ret0, _ := ret[0].(db.SubscriptionLineItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionLineItem indicates an expected call of GetSubscriptionLineItem.
func (mr *MockQuerierMockRecorder) GetSubscriptionLineItem(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionLineItem", reflect.TypeOf((*MockQuerier)(nil).GetSubscriptionLineItem), ctx, id)
}

// GetSubscriptionLineItemByProduct mocks base method.
func (m *MockQuerier) GetSubscriptionLineItemByProduct(ctx context.Context, arg db.GetSubscriptionLineItemByProductParams) (db.SubscriptionLineItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionLineItemByProduct", ctx, arg)
	ret0, _ := ret[0].(db.SubscriptionLineItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionLineItemByProduct indicates an expected call of GetSubscriptionLineItemByProduct.
func (mr *MockQuerierMockRecorder) GetSubscriptionLineItemByProduct(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionLineItemByProduct", reflect.TypeOf((*MockQuerier)(nil).GetSubscriptionLineItemByProduct), ctx, arg)
}

// GetSubscriptionPaymentHistory mocks base method.
func (m *MockQuerier) GetSubscriptionPaymentHistory(ctx context.Context, subscriptionID uuid.UUID) ([]db.GetSubscriptionPaymentHistoryRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionPaymentHistory", ctx, subscriptionID)
	ret0, _ := ret[0].([]db.GetSubscriptionPaymentHistoryRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionPaymentHistory indicates an expected call of GetSubscriptionPaymentHistory.
func (mr *MockQuerierMockRecorder) GetSubscriptionPaymentHistory(ctx, subscriptionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionPaymentHistory", reflect.TypeOf((*MockQuerier)(nil).GetSubscriptionPaymentHistory), ctx, subscriptionID)
}

// GetSubscriptionProrations mocks base method.
func (m *MockQuerier) GetSubscriptionProrations(ctx context.Context, subscriptionID uuid.UUID) ([]db.SubscriptionProration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionProrations", ctx, subscriptionID)
	ret0, _ := ret[0].([]db.SubscriptionProration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionProrations indicates an expected call of GetSubscriptionProrations.
func (mr *MockQuerierMockRecorder) GetSubscriptionProrations(ctx, subscriptionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionProrations", reflect.TypeOf((*MockQuerier)(nil).GetSubscriptionProrations), ctx, subscriptionID)
}

// GetSubscriptionScheduledChanges mocks base method.
func (m *MockQuerier) GetSubscriptionScheduledChanges(ctx context.Context, subscriptionID uuid.UUID) ([]db.SubscriptionScheduleChange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionScheduledChanges", ctx, subscriptionID)
	ret0, _ := ret[0].([]db.SubscriptionScheduleChange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionScheduledChanges indicates an expected call of GetSubscriptionScheduledChanges.
func (mr *MockQuerierMockRecorder) GetSubscriptionScheduledChanges(ctx, subscriptionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionScheduledChanges", reflect.TypeOf((*MockQuerier)(nil).GetSubscriptionScheduledChanges), ctx, subscriptionID)
}

// GetSubscriptionStateHistory mocks base method.
func (m *MockQuerier) GetSubscriptionStateHistory(ctx context.Context, arg db.GetSubscriptionStateHistoryParams) ([]db.SubscriptionStateHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionStateHistory", ctx, arg)
	ret0, _ := ret[0].([]db.SubscriptionStateHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionStateHistory indicates an expected call of GetSubscriptionStateHistory.
func (mr *MockQuerierMockRecorder) GetSubscriptionStateHistory(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionStateHistory", reflect.TypeOf((*MockQuerier)(nil).GetSubscriptionStateHistory), ctx, arg)
}

// GetSubscriptionWithCustomerDetails mocks base method.
func (m *MockQuerier) GetSubscriptionWithCustomerDetails(ctx context.Context, id uuid.UUID) (db.GetSubscriptionWithCustomerDetailsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionWithCustomerDetails", ctx, id)
	ret0, _ := ret[0].(db.GetSubscriptionWithCustomerDetailsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionWithCustomerDetails indicates an expected call of GetSubscriptionWithCustomerDetails.
func (mr *MockQuerierMockRecorder) GetSubscriptionWithCustomerDetails(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionWithCustomerDetails", reflect.TypeOf((*MockQuerier)(nil).GetSubscriptionWithCustomerDetails), ctx, id)
}

// GetSubscriptionWithDetails mocks base method.
func (m *MockQuerier) GetSubscriptionWithDetails(ctx context.Context, arg db.GetSubscriptionWithDetailsParams) (db.GetSubscriptionWithDetailsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionWithDetails", ctx, arg)
	ret0, _ := ret[0].(db.GetSubscriptionWithDetailsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionWithDetails indicates an expected call of GetSubscriptionWithDetails.
func (mr *MockQuerierMockRecorder) GetSubscriptionWithDetails(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionWithDetails", reflect.TypeOf((*MockQuerier)(nil).GetSubscriptionWithDetails), ctx, arg)
}

// GetSubscriptionWithLineItems mocks base method.
func (m *MockQuerier) GetSubscriptionWithLineItems(ctx context.Context, id uuid.UUID) ([]db.GetSubscriptionWithLineItemsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionWithLineItems", ctx, id)
	ret0, _ := ret[0].([]db.GetSubscriptionWithLineItemsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionWithLineItems indicates an expected call of GetSubscriptionWithLineItems.
func (mr *MockQuerierMockRecorder) GetSubscriptionWithLineItems(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionWithLineItems", reflect.TypeOf((*MockQuerier)(nil).GetSubscriptionWithLineItems), ctx, id)
}

// GetSubscriptionWithWorkspace mocks base method.
func (m *MockQuerier) GetSubscriptionWithWorkspace(ctx context.Context, arg db.GetSubscriptionWithWorkspaceParams) (db.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionWithWorkspace", ctx, arg)
	ret0, _ := ret[0].(db.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionWithWorkspace indicates an expected call of GetSubscriptionWithWorkspace.
func (mr *MockQuerierMockRecorder) GetSubscriptionWithWorkspace(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionWithWorkspace", reflect.TypeOf((*MockQuerier)(nil).GetSubscriptionWithWorkspace), ctx, arg)
}

// GetSubscriptionsByDelegation mocks base method.
func (m *MockQuerier) GetSubscriptionsByDelegation(ctx context.Context, delegationID uuid.UUID) ([]db.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionsByDelegation", ctx, delegationID)
	ret0, _ := ret[0].([]db.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionsByDelegation indicates an expected call of GetSubscriptionsByDelegation.
func (mr *MockQuerierMockRecorder) GetSubscriptionsByDelegation(ctx, delegationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionsByDelegation", reflect.TypeOf((*MockQuerier)(nil).GetSubscriptionsByDelegation), ctx, delegationID)
}

// GetSubscriptionsByPaymentProvider mocks base method.
func (m *MockQuerier) GetSubscriptionsByPaymentProvider(ctx context.Context, arg db.GetSubscriptionsByPaymentProviderParams) ([]db.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionsByPaymentProvider", ctx, arg)
	ret0, _ := ret[0].([]db.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionsByPaymentProvider indicates an expected call of GetSubscriptionsByPaymentProvider.
func (mr *MockQuerierMockRecorder) GetSubscriptionsByPaymentProvider(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionsByPaymentProvider", reflect.TypeOf((*MockQuerier)(nil).GetSubscriptionsByPaymentProvider), ctx, arg)
}

// GetSubscriptionsByPaymentSyncStatus mocks base method.
func (m *MockQuerier) GetSubscriptionsByPaymentSyncStatus(ctx context.Context, arg db.GetSubscriptionsByPaymentSyncStatusParams) ([]db.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionsByPaymentSyncStatus", ctx, arg)
	ret0, _ := ret[0].([]db.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionsByPaymentSyncStatus indicates an expected call of GetSubscriptionsByPaymentSyncStatus.
func (mr *MockQuerierMockRecorder) GetSubscriptionsByPaymentSyncStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionsByPaymentSyncStatus", reflect.TypeOf((*MockQuerier)(nil).GetSubscriptionsByPaymentSyncStatus), ctx, arg)
}

// GetSubscriptionsDueForCancellation mocks base method.
func (m *MockQuerier) GetSubscriptionsDueForCancellation(ctx context.Context, cancelAt pgtype.Timestamptz) ([]db.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionsDueForCancellation", ctx, cancelAt)
	ret0, _ := ret[0].([]db.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionsDueForCancellation indicates an expected call of GetSubscriptionsDueForCancellation.
func (mr *MockQuerierMockRecorder) GetSubscriptionsDueForCancellation(ctx, cancelAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionsDueForCancellation", reflect.TypeOf((*MockQuerier)(nil).GetSubscriptionsDueForCancellation), ctx, cancelAt)
}

// GetSubscriptionsDueForResumption mocks base method.
func (m *MockQuerier) GetSubscriptionsDueForResumption(ctx context.Context, pauseEndsAt pgtype.Timestamptz) ([]db.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionsDueForResumption", ctx, pauseEndsAt)
	ret0, _ := ret[0].([]db.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionsDueForResumption indicates an expected call of GetSubscriptionsDueForResumption.
func (mr *MockQuerierMockRecorder) GetSubscriptionsDueForResumption(ctx, pauseEndsAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionsDueForResumption", reflect.TypeOf((*MockQuerier)(nil).GetSubscriptionsDueForResumption), ctx, pauseEndsAt)
}

// GetSubscriptionsForBulkInvoicing mocks base method.
func (m *MockQuerier) GetSubscriptionsForBulkInvoicing(ctx context.Context, arg db.GetSubscriptionsForBulkInvoicingParams) ([]db.GetSubscriptionsForBulkInvoicingRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionsForBulkInvoicing", ctx, arg)
	ret0, _ := ret[0].([]db.GetSubscriptionsForBulkInvoicingRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionsForBulkInvoicing indicates an expected call of GetSubscriptionsForBulkInvoicing.
func (mr *MockQuerierMockRecorder) GetSubscriptionsForBulkInvoicing(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionsForBulkInvoicing", reflect.TypeOf((*MockQuerier)(nil).GetSubscriptionsForBulkInvoicing), ctx, arg)
}

// GetSubscriptionsNeedingSync mocks base method.
func (m *MockQuerier) GetSubscriptionsNeedingSync(ctx context.Context, workspaceID uuid.UUID) ([]db.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionsNeedingSync", ctx, workspaceID)
	ret0, _ := ret[0].([]db.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionsNeedingSync indicates an expected call of GetSubscriptionsNeedingSync.
func (mr *MockQuerierMockRecorder) GetSubscriptionsNeedingSync(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionsNeedingSync", reflect.TypeOf((*MockQuerier)(nil).GetSubscriptionsNeedingSync), ctx, workspaceID)
}

// GetSubscriptionsSyncedByProvider mocks base method.
func (m *MockQuerier) GetSubscriptionsSyncedByProvider(ctx context.Context, arg db.GetSubscriptionsSyncedByProviderParams) ([]db.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionsSyncedByProvider", ctx, arg)
	ret0, _ := ret[0].([]db.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionsSyncedByProvider indicates an expected call of GetSubscriptionsSyncedByProvider.
func (mr *MockQuerierMockRecorder) GetSubscriptionsSyncedByProvider(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionsSyncedByProvider", reflect.TypeOf((*MockQuerier)(nil).GetSubscriptionsSyncedByProvider), ctx, arg)
}

// GetSubscriptionsWithSyncConflicts mocks base method.
func (m *MockQuerier) GetSubscriptionsWithSyncConflicts(ctx context.Context, workspaceID uuid.UUID) ([]db.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionsWithSyncConflicts", ctx, workspaceID)
	ret0, _ := ret[0].([]db.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionsWithSyncConflicts indicates an expected call of GetSubscriptionsWithSyncConflicts.
func (mr *MockQuerierMockRecorder) GetSubscriptionsWithSyncConflicts(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionsWithSyncConflicts", reflect.TypeOf((*MockQuerier)(nil).GetSubscriptionsWithSyncConflicts), ctx, workspaceID)
}

// GetSuccessfulRedemptionCount mocks base method.
func (m *MockQuerier) GetSuccessfulRedemptionCount(ctx context.Context, subscriptionID uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSuccessfulRedemptionCount", ctx, subscriptionID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSuccessfulRedemptionCount indicates an expected call of GetSuccessfulRedemptionCount.
func (mr *MockQuerierMockRecorder) GetSuccessfulRedemptionCount(ctx, subscriptionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuccessfulRedemptionCount", reflect.TypeOf((*MockQuerier)(nil).GetSuccessfulRedemptionCount), ctx, subscriptionID)
}

// GetSyncEvent mocks base method.
func (m *MockQuerier) GetSyncEvent(ctx context.Context, id uuid.UUID) (db.PaymentSyncEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSyncEvent", ctx, id)
	ret0, _ := ret[0].(db.PaymentSyncEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSyncEvent indicates an expected call of GetSyncEvent.
func (mr *MockQuerierMockRecorder) GetSyncEvent(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSyncEvent", reflect.TypeOf((*MockQuerier)(nil).GetSyncEvent), ctx, id)
}

// GetSyncEventsByExternalID mocks base method.
func (m *MockQuerier) GetSyncEventsByExternalID(ctx context.Context, arg db.GetSyncEventsByExternalIDParams) ([]db.PaymentSyncEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSyncEventsByExternalID", ctx, arg)
	ret0, _ := ret[0].([]db.PaymentSyncEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSyncEventsByExternalID indicates an expected call of GetSyncEventsByExternalID.
func (mr *MockQuerierMockRecorder) GetSyncEventsByExternalID(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSyncEventsByExternalID", reflect.TypeOf((*MockQuerier)(nil).GetSyncEventsByExternalID), ctx, arg)
}

// GetSyncEventsSummaryBySession mocks base method.
func (m *MockQuerier) GetSyncEventsSummaryBySession(ctx context.Context, sessionID uuid.UUID) (db.GetSyncEventsSummaryBySessionRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSyncEventsSummaryBySession", ctx, sessionID)
	ret0, _ := ret[0].(db.GetSyncEventsSummaryBySessionRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSyncEventsSummaryBySession indicates an expected call of GetSyncEventsSummaryBySession.
func (mr *MockQuerierMockRecorder) GetSyncEventsSummaryBySession(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSyncEventsSummaryBySession", reflect.TypeOf((*MockQuerier)(nil).GetSyncEventsSummaryBySession), ctx, sessionID)
}

// GetSyncProgressByEntityType mocks base method.
func (m *MockQuerier) GetSyncProgressByEntityType(ctx context.Context, sessionID uuid.UUID) ([]db.GetSyncProgressByEntityTypeRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSyncProgressByEntityType", ctx, sessionID)
	ret0, _ := ret[0].([]db.GetSyncProgressByEntityTypeRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSyncProgressByEntityType indicates an expected call of GetSyncProgressByEntityType.
func (mr *MockQuerierMockRecorder) GetSyncProgressByEntityType(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSyncProgressByEntityType", reflect.TypeOf((*MockQuerier)(nil).GetSyncProgressByEntityType), ctx, sessionID)
}

// GetSyncSession mocks base method.
func (m *MockQuerier) GetSyncSession(ctx context.Context, arg db.GetSyncSessionParams) (db.PaymentSyncSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSyncSession", ctx, arg)
	ret0, _ := ret[0].(db.PaymentSyncSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSyncSession indicates an expected call of GetSyncSession.
func (mr *MockQuerierMockRecorder) GetSyncSession(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSyncSession", reflect.TypeOf((*MockQuerier)(nil).GetSyncSession), ctx, arg)
}

// GetSyncSessionByProvider mocks base method.
func (m *MockQuerier) GetSyncSessionByProvider(ctx context.Context, arg db.GetSyncSessionByProviderParams) (db.PaymentSyncSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSyncSessionByProvider", ctx, arg)
	ret0, _ := ret[0].(db.PaymentSyncSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSyncSessionByProvider indicates an expected call of GetSyncSessionByProvider.
func (mr *MockQuerierMockRecorder) GetSyncSessionByProvider(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSyncSessionByProvider", reflect.TypeOf((*MockQuerier)(nil).GetSyncSessionByProvider), ctx, arg)
}

// GetToken mocks base method.
func (m *MockQuerier) GetToken(ctx context.Context, id uuid.UUID) (db.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", ctx, id)
	ret0, _ := ret[0].(db.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToken indicates an expected call of GetToken.
func (mr *MockQuerierMockRecorder) GetToken(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockQuerier)(nil).GetToken), ctx, id)
}

// GetTokenByAddress mocks base method.
func (m *MockQuerier) GetTokenByAddress(ctx context.Context, arg db.GetTokenByAddressParams) (db.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenByAddress", ctx, arg)
	ret0, _ := ret[0].(db.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenByAddress indicates an expected call of GetTokenByAddress.
func (mr *MockQuerierMockRecorder) GetTokenByAddress(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenByAddress", reflect.TypeOf((*MockQuerier)(nil).GetTokenByAddress), ctx, arg)
}

// GetTopPaymentLinks mocks base method.
func (m *MockQuerier) GetTopPaymentLinks(ctx context.Context, arg db.GetTopPaymentLinksParams) ([]db.GetTopPaymentLinksRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopPaymentLinks", ctx, arg)
	ret0, _ := ret[0].([]db.GetTopPaymentLinksRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopPaymentLinks indicates an expected call of GetTopPaymentLinks.
func (mr *MockQuerierMockRecorder) GetTopPaymentLinks(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopPaymentLinks", reflect.TypeOf((*MockQuerier)(nil).GetTopPaymentLinks), ctx, arg)
}

// GetTotalAmountBySubscription mocks base method.
func (m *MockQuerier) GetTotalAmountBySubscription(ctx context.Context, subscriptionID uuid.UUID) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalAmountBySubscription", ctx, subscriptionID)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalAmountBySubscription indicates an expected call of GetTotalAmountBySubscription.
func (mr *MockQuerierMockRecorder) GetTotalAmountBySubscription(ctx, subscriptionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalAmountBySubscription", reflect.TypeOf((*MockQuerier)(nil).GetTotalAmountBySubscription), ctx, subscriptionID)
}

// GetUnappliedProrations mocks base method.
func (m *MockQuerier) GetUnappliedProrations(ctx context.Context, subscriptionID uuid.UUID) ([]db.SubscriptionProration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnappliedProrations", ctx, subscriptionID)
	ret0, _ := ret[0].([]db.SubscriptionProration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnappliedProrations indicates an expected call of GetUnappliedProrations.
func (mr *MockQuerierMockRecorder) GetUnappliedProrations(ctx, subscriptionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnappliedProrations", reflect.TypeOf((*MockQuerier)(nil).GetUnappliedProrations), ctx, subscriptionID)
}

// GetUnpaidInvoices mocks base method.
func (m *MockQuerier) GetUnpaidInvoices(ctx context.Context, arg db.GetUnpaidInvoicesParams) ([]db.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnpaidInvoices", ctx, arg)
	ret0, _ := ret[0].([]db.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnpaidInvoices indicates an expected call of GetUnpaidInvoices.
func (mr *MockQuerierMockRecorder) GetUnpaidInvoices(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnpaidInvoices", reflect.TypeOf((*MockQuerier)(nil).GetUnpaidInvoices), ctx, arg)
}

// GetUnreconciledPayments mocks base method.
func (m *MockQuerier) GetUnreconciledPayments(ctx context.Context, arg db.GetUnreconciledPaymentsParams) ([]db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnreconciledPayments", ctx, arg)
	ret0, _ := ret[0].([]db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnreconciledPayments indicates an expected call of GetUnreconciledPayments.
func (mr *MockQuerierMockRecorder) GetUnreconciledPayments(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnreconciledPayments", reflect.TypeOf((*MockQuerier)(nil).GetUnreconciledPayments), ctx, arg)
}

// GetUnsyncedSubscriptionEventsWithTxHash mocks base method.
func (m *MockQuerier) GetUnsyncedSubscriptionEventsWithTxHash(ctx context.Context, workspaceID uuid.UUID) ([]db.SubscriptionEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnsyncedSubscriptionEventsWithTxHash", ctx, workspaceID)
	ret0, _ := ret[0].([]db.SubscriptionEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnsyncedSubscriptionEventsWithTxHash indicates an expected call of GetUnsyncedSubscriptionEventsWithTxHash.
func (mr *MockQuerierMockRecorder) GetUnsyncedSubscriptionEventsWithTxHash(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnsyncedSubscriptionEventsWithTxHash", reflect.TypeOf((*MockQuerier)(nil).GetUnsyncedSubscriptionEventsWithTxHash), ctx, workspaceID)
}

// GetUserAccount mocks base method.
func (m *MockQuerier) GetUserAccount(ctx context.Context, id uuid.UUID) (db.GetUserAccountRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAccount", ctx, id)
	ret0, _ := ret[0].(db.GetUserAccountRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAccount indicates an expected call of GetUserAccount.
func (mr *MockQuerierMockRecorder) GetUserAccount(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAccount", reflect.TypeOf((*MockQuerier)(nil).GetUserAccount), ctx, id)
}

// GetUserByEmail mocks base method.
func (m *MockQuerier) GetUserByEmail(ctx context.Context, email string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockQuerierMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockQuerier)(nil).GetUserByEmail), ctx, email)
}

// GetUserByID mocks base method.
func (m *MockQuerier) GetUserByID(ctx context.Context, id uuid.UUID) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockQuerierMockRecorder) GetUserByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockQuerier)(nil).GetUserByID), ctx, id)
}

// GetUserByWeb3AuthID mocks base method.
func (m *MockQuerier) GetUserByWeb3AuthID(ctx context.Context, web3authID pgtype.Text) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByWeb3AuthID", ctx, web3authID)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByWeb3AuthID indicates an expected call of GetUserByWeb3AuthID.
func (mr *MockQuerierMockRecorder) GetUserByWeb3AuthID(ctx, web3authID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByWeb3AuthID", reflect.TypeOf((*MockQuerier)(nil).GetUserByWeb3AuthID), ctx, web3authID)
}

// GetWalletByAddressAndCircleNetworkType mocks base method.
func (m *MockQuerier) GetWalletByAddressAndCircleNetworkType(ctx context.Context, arg db.GetWalletByAddressAndCircleNetworkTypeParams) (db.GetWalletByAddressAndCircleNetworkTypeRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletByAddressAndCircleNetworkType", ctx, arg)
	ret0, _ := ret[0].(db.GetWalletByAddressAndCircleNetworkTypeRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletByAddressAndCircleNetworkType indicates an expected call of GetWalletByAddressAndCircleNetworkType.
func (mr *MockQuerierMockRecorder) GetWalletByAddressAndCircleNetworkType(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletByAddressAndCircleNetworkType", reflect.TypeOf((*MockQuerier)(nil).GetWalletByAddressAndCircleNetworkType), ctx, arg)
}

// GetWalletByID mocks base method.
func (m *MockQuerier) GetWalletByID(ctx context.Context, arg db.GetWalletByIDParams) (db.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletByID", ctx, arg)
	ret0, _ := ret[0].(db.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletByID indicates an expected call of GetWalletByID.
func (mr *MockQuerierMockRecorder) GetWalletByID(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletByID", reflect.TypeOf((*MockQuerier)(nil).GetWalletByID), ctx, arg)
}

// GetWalletStats mocks base method.
func (m *MockQuerier) GetWalletStats(ctx context.Context, workspaceID uuid.UUID) (db.GetWalletStatsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletStats", ctx, workspaceID)
	ret0, _ := ret[0].(db.GetWalletStatsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletStats indicates an expected call of GetWalletStats.
func (mr *MockQuerierMockRecorder) GetWalletStats(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletStats", reflect.TypeOf((*MockQuerier)(nil).GetWalletStats), ctx, workspaceID)
}

// GetWalletWithCircleDataByAddress mocks base method.
func (m *MockQuerier) GetWalletWithCircleDataByAddress(ctx context.Context, arg db.GetWalletWithCircleDataByAddressParams) (db.GetWalletWithCircleDataByAddressRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletWithCircleDataByAddress", ctx, arg)
	ret0, _ := ret[0].(db.GetWalletWithCircleDataByAddressRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletWithCircleDataByAddress indicates an expected call of GetWalletWithCircleDataByAddress.
func (mr *MockQuerierMockRecorder) GetWalletWithCircleDataByAddress(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletWithCircleDataByAddress", reflect.TypeOf((*MockQuerier)(nil).GetWalletWithCircleDataByAddress), ctx, arg)
}

// GetWalletWithCircleDataByID mocks base method.
func (m *MockQuerier) GetWalletWithCircleDataByID(ctx context.Context, arg db.GetWalletWithCircleDataByIDParams) (db.GetWalletWithCircleDataByIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletWithCircleDataByID", ctx, arg)
	ret0, _ := ret[0].(db.GetWalletWithCircleDataByIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletWithCircleDataByID indicates an expected call of GetWalletWithCircleDataByID.
func (mr *MockQuerierMockRecorder) GetWalletWithCircleDataByID(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletWithCircleDataByID", reflect.TypeOf((*MockQuerier)(nil).GetWalletWithCircleDataByID), ctx, arg)
}

// GetWalletsByENS mocks base method.
func (m *MockQuerier) GetWalletsByENS(ctx context.Context, workspaceID uuid.UUID) ([]db.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletsByENS", ctx, workspaceID)
	ret0, _ := ret[0].([]db.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletsByENS indicates an expected call of GetWalletsByENS.
func (mr *MockQuerierMockRecorder) GetWalletsByENS(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletsByENS", reflect.TypeOf((*MockQuerier)(nil).GetWalletsByENS), ctx, workspaceID)
}

// GetWalletsWithSimilarAddress mocks base method.
func (m *MockQuerier) GetWalletsWithSimilarAddress(ctx context.Context, arg db.GetWalletsWithSimilarAddressParams) ([]db.CustomerWallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletsWithSimilarAddress", ctx, arg)
	ret0, _ := ret[0].([]db.CustomerWallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletsWithSimilarAddress indicates an expected call of GetWalletsWithSimilarAddress.
func (mr *MockQuerierMockRecorder) GetWalletsWithSimilarAddress(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletsWithSimilarAddress", reflect.TypeOf((*MockQuerier)(nil).GetWalletsWithSimilarAddress), ctx, arg)
}

// GetWebhookEventByIdempotencyKey mocks base method.
func (m *MockQuerier) GetWebhookEventByIdempotencyKey(ctx context.Context, arg db.GetWebhookEventByIdempotencyKeyParams) (db.PaymentSyncEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhookEventByIdempotencyKey", ctx, arg)
	ret0, _ := ret[0].(db.PaymentSyncEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebhookEventByIdempotencyKey indicates an expected call of GetWebhookEventByIdempotencyKey.
func (mr *MockQuerierMockRecorder) GetWebhookEventByIdempotencyKey(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhookEventByIdempotencyKey", reflect.TypeOf((*MockQuerier)(nil).GetWebhookEventByIdempotencyKey), ctx, arg)
}

// GetWebhookEventByProviderEventID mocks base method.
func (m *MockQuerier) GetWebhookEventByProviderEventID(ctx context.Context, arg db.GetWebhookEventByProviderEventIDParams) (db.PaymentSyncEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhookEventByProviderEventID", ctx, arg)
	ret0, _ := ret[0].(db.PaymentSyncEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebhookEventByProviderEventID indicates an expected call of GetWebhookEventByProviderEventID.
func (mr *MockQuerierMockRecorder) GetWebhookEventByProviderEventID(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhookEventByProviderEventID", reflect.TypeOf((*MockQuerier)(nil).GetWebhookEventByProviderEventID), ctx, arg)
}

// GetWebhookEventForReplay mocks base method.
func (m *MockQuerier) GetWebhookEventForReplay(ctx context.Context, arg db.GetWebhookEventForReplayParams) (db.GetWebhookEventForReplayRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhookEventForReplay", ctx, arg)
	ret0, _ := ret[0].(db.GetWebhookEventForReplayRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebhookEventForReplay indicates an expected call of GetWebhookEventForReplay.
func (mr *MockQuerierMockRecorder) GetWebhookEventForReplay(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhookEventForReplay", reflect.TypeOf((*MockQuerier)(nil).GetWebhookEventForReplay), ctx, arg)
}

// GetWebhookEventsByTimeRange mocks base method.
func (m *MockQuerier) GetWebhookEventsByTimeRange(ctx context.Context, arg db.GetWebhookEventsByTimeRangeParams) ([]db.GetWebhookEventsByTimeRangeRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhookEventsByTimeRange", ctx, arg)
	ret0, _ := ret[0].([]db.GetWebhookEventsByTimeRangeRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebhookEventsByTimeRange indicates an expected call of GetWebhookEventsByTimeRange.
func (mr *MockQuerierMockRecorder) GetWebhookEventsByTimeRange(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhookEventsByTimeRange", reflect.TypeOf((*MockQuerier)(nil).GetWebhookEventsByTimeRange), ctx, arg)
}

// GetWebhookEventsSummaryByProvider mocks base method.
func (m *MockQuerier) GetWebhookEventsSummaryByProvider(ctx context.Context, arg db.GetWebhookEventsSummaryByProviderParams) (db.GetWebhookEventsSummaryByProviderRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhookEventsSummaryByProvider", ctx, arg)
	ret0, _ := ret[0].(db.GetWebhookEventsSummaryByProviderRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebhookEventsSummaryByProvider indicates an expected call of GetWebhookEventsSummaryByProvider.
func (mr *MockQuerierMockRecorder) GetWebhookEventsSummaryByProvider(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhookEventsSummaryByProvider", reflect.TypeOf((*MockQuerier)(nil).GetWebhookEventsSummaryByProvider), ctx, arg)
}

// GetWebhookHealthStatus mocks base method.
func (m *MockQuerier) GetWebhookHealthStatus(ctx context.Context, arg db.GetWebhookHealthStatusParams) (db.GetWebhookHealthStatusRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhookHealthStatus", ctx, arg)
	ret0, _ := ret[0].(db.GetWebhookHealthStatusRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebhookHealthStatus indicates an expected call of GetWebhookHealthStatus.
func (mr *MockQuerierMockRecorder) GetWebhookHealthStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhookHealthStatus", reflect.TypeOf((*MockQuerier)(nil).GetWebhookHealthStatus), ctx, arg)
}

// GetWebhookProcessingStats mocks base method.
func (m *MockQuerier) GetWebhookProcessingStats(ctx context.Context, arg db.GetWebhookProcessingStatsParams) (db.GetWebhookProcessingStatsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhookProcessingStats", ctx, arg)
	ret0, _ := ret[0].(db.GetWebhookProcessingStatsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebhookProcessingStats indicates an expected call of GetWebhookProcessingStats.
func (mr *MockQuerierMockRecorder) GetWebhookProcessingStats(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhookProcessingStats", reflect.TypeOf((*MockQuerier)(nil).GetWebhookProcessingStats), ctx, arg)
}

// GetWorkspace mocks base method.
func (m *MockQuerier) GetWorkspace(ctx context.Context, id uuid.UUID) (db.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspace", ctx, id)
	ret0, _ := ret[0].(db.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspace indicates an expected call of GetWorkspace.
func (mr *MockQuerierMockRecorder) GetWorkspace(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspace", reflect.TypeOf((*MockQuerier)(nil).GetWorkspace), ctx, id)
}

// GetWorkspaceActiveProviders mocks base method.
func (m *MockQuerier) GetWorkspaceActiveProviders(ctx context.Context, workspaceID uuid.UUID) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspaceActiveProviders", ctx, workspaceID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspaceActiveProviders indicates an expected call of GetWorkspaceActiveProviders.
func (mr *MockQuerierMockRecorder) GetWorkspaceActiveProviders(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspaceActiveProviders", reflect.TypeOf((*MockQuerier)(nil).GetWorkspaceActiveProviders), ctx, workspaceID)
}

// GetWorkspaceByProviderAccount mocks base method.
func (m *MockQuerier) GetWorkspaceByProviderAccount(ctx context.Context, arg db.GetWorkspaceByProviderAccountParams) (db.GetWorkspaceByProviderAccountRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspaceByProviderAccount", ctx, arg)
	ret0, _ := ret[0].(db.GetWorkspaceByProviderAccountRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspaceByProviderAccount indicates an expected call of GetWorkspaceByProviderAccount.
func (mr *MockQuerierMockRecorder) GetWorkspaceByProviderAccount(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspaceByProviderAccount", reflect.TypeOf((*MockQuerier)(nil).GetWorkspaceByProviderAccount), ctx, arg)
}

// GetWorkspaceConfigForWebhook mocks base method.
func (m *MockQuerier) GetWorkspaceConfigForWebhook(ctx context.Context, arg db.GetWorkspaceConfigForWebhookParams) (db.GetWorkspaceConfigForWebhookRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspaceConfigForWebhook", ctx, arg)
	ret0, _ := ret[0].(db.GetWorkspaceConfigForWebhookRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspaceConfigForWebhook indicates an expected call of GetWorkspaceConfigForWebhook.
func (mr *MockQuerierMockRecorder) GetWorkspaceConfigForWebhook(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspaceConfigForWebhook", reflect.TypeOf((*MockQuerier)(nil).GetWorkspaceConfigForWebhook), ctx, arg)
}

// GetWorkspaceCustomerAssociation mocks base method.
func (m *MockQuerier) GetWorkspaceCustomerAssociation(ctx context.Context, arg db.GetWorkspaceCustomerAssociationParams) (db.WorkspaceCustomer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspaceCustomerAssociation", ctx, arg)
	ret0, _ := ret[0].(db.WorkspaceCustomer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspaceCustomerAssociation indicates an expected call of GetWorkspaceCustomerAssociation.
func (mr *MockQuerierMockRecorder) GetWorkspaceCustomerAssociation(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspaceCustomerAssociation", reflect.TypeOf((*MockQuerier)(nil).GetWorkspaceCustomerAssociation), ctx, arg)
}

// GetWorkspaceCustomersByPaymentProvider mocks base method.
func (m *MockQuerier) GetWorkspaceCustomersByPaymentProvider(ctx context.Context, arg db.GetWorkspaceCustomersByPaymentProviderParams) ([]db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspaceCustomersByPaymentProvider", ctx, arg)
	ret0, _ := ret[0].([]db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspaceCustomersByPaymentProvider indicates an expected call of GetWorkspaceCustomersByPaymentProvider.
func (mr *MockQuerierMockRecorder) GetWorkspaceCustomersByPaymentProvider(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspaceCustomersByPaymentProvider", reflect.TypeOf((*MockQuerier)(nil).GetWorkspaceCustomersByPaymentProvider), ctx, arg)
}

// GetWorkspaceCustomersByPaymentSyncStatus mocks base method.
func (m *MockQuerier) GetWorkspaceCustomersByPaymentSyncStatus(ctx context.Context, arg db.GetWorkspaceCustomersByPaymentSyncStatusParams) ([]db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspaceCustomersByPaymentSyncStatus", ctx, arg)
	ret0, _ := ret[0].([]db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspaceCustomersByPaymentSyncStatus indicates an expected call of GetWorkspaceCustomersByPaymentSyncStatus.
func (mr *MockQuerierMockRecorder) GetWorkspaceCustomersByPaymentSyncStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspaceCustomersByPaymentSyncStatus", reflect.TypeOf((*MockQuerier)(nil).GetWorkspaceCustomersByPaymentSyncStatus), ctx, arg)
}

// GetWorkspaceDefaultCurrency mocks base method.
func (m *MockQuerier) GetWorkspaceDefaultCurrency(ctx context.Context, id uuid.UUID) (db.FiatCurrency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspaceDefaultCurrency", ctx, id)
	ret0, _ := ret[0].(db.FiatCurrency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspaceDefaultCurrency indicates an expected call of GetWorkspaceDefaultCurrency.
func (mr *MockQuerierMockRecorder) GetWorkspaceDefaultCurrency(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspaceDefaultCurrency", reflect.TypeOf((*MockQuerier)(nil).GetWorkspaceDefaultCurrency), ctx, id)
}

// GetWorkspacePaymentConfiguration mocks base method.
func (m *MockQuerier) GetWorkspacePaymentConfiguration(ctx context.Context, arg db.GetWorkspacePaymentConfigurationParams) (db.WorkspacePaymentConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspacePaymentConfiguration", ctx, arg)
	ret0, _ := ret[0].(db.WorkspacePaymentConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspacePaymentConfiguration indicates an expected call of GetWorkspacePaymentConfiguration.
func (mr *MockQuerierMockRecorder) GetWorkspacePaymentConfiguration(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspacePaymentConfiguration", reflect.TypeOf((*MockQuerier)(nil).GetWorkspacePaymentConfiguration), ctx, arg)
}

// GetWorkspacePaymentConfigurationByConnectedAccount mocks base method.
func (m *MockQuerier) GetWorkspacePaymentConfigurationByConnectedAccount(ctx context.Context, arg db.GetWorkspacePaymentConfigurationByConnectedAccountParams) (db.WorkspacePaymentConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspacePaymentConfigurationByConnectedAccount", ctx, arg)
	ret0, _ := ret[0].(db.WorkspacePaymentConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspacePaymentConfigurationByConnectedAccount indicates an expected call of GetWorkspacePaymentConfigurationByConnectedAccount.
func (mr *MockQuerierMockRecorder) GetWorkspacePaymentConfigurationByConnectedAccount(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspacePaymentConfigurationByConnectedAccount", reflect.TypeOf((*MockQuerier)(nil).GetWorkspacePaymentConfigurationByConnectedAccount), ctx, arg)
}

// GetWorkspacePaymentConfigurationByID mocks base method.
func (m *MockQuerier) GetWorkspacePaymentConfigurationByID(ctx context.Context, arg db.GetWorkspacePaymentConfigurationByIDParams) (db.WorkspacePaymentConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspacePaymentConfigurationByID", ctx, arg)
	ret0, _ := ret[0].(db.WorkspacePaymentConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspacePaymentConfigurationByID indicates an expected call of GetWorkspacePaymentConfigurationByID.
func (mr *MockQuerierMockRecorder) GetWorkspacePaymentConfigurationByID(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspacePaymentConfigurationByID", reflect.TypeOf((*MockQuerier)(nil).GetWorkspacePaymentConfigurationByID), ctx, arg)
}

// GetWorkspacePaymentConfigurationByWebhookURL mocks base method.
func (m *MockQuerier) GetWorkspacePaymentConfigurationByWebhookURL(ctx context.Context, webhookEndpointUrl pgtype.Text) (db.WorkspacePaymentConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspacePaymentConfigurationByWebhookURL", ctx, webhookEndpointUrl)
	ret0, _ := ret[0].(db.WorkspacePaymentConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspacePaymentConfigurationByWebhookURL indicates an expected call of GetWorkspacePaymentConfigurationByWebhookURL.
func (mr *MockQuerierMockRecorder) GetWorkspacePaymentConfigurationByWebhookURL(ctx, webhookEndpointUrl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspacePaymentConfigurationByWebhookURL", reflect.TypeOf((*MockQuerier)(nil).GetWorkspacePaymentConfigurationByWebhookURL), ctx, webhookEndpointUrl)
}

// GetWorkspaceProviderAccountForWebhook mocks base method.
func (m *MockQuerier) GetWorkspaceProviderAccountForWebhook(ctx context.Context, arg db.GetWorkspaceProviderAccountForWebhookParams) (db.GetWorkspaceProviderAccountForWebhookRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspaceProviderAccountForWebhook", ctx, arg)
	ret0, _ := ret[0].(db.GetWorkspaceProviderAccountForWebhookRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspaceProviderAccountForWebhook indicates an expected call of GetWorkspaceProviderAccountForWebhook.
func (mr *MockQuerierMockRecorder) GetWorkspaceProviderAccountForWebhook(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspaceProviderAccountForWebhook", reflect.TypeOf((*MockQuerier)(nil).GetWorkspaceProviderAccountForWebhook), ctx, arg)
}

// GetWorkspaceProviderConfig mocks base method.
func (m *MockQuerier) GetWorkspaceProviderConfig(ctx context.Context, id uuid.UUID) (db.GetWorkspaceProviderConfigRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspaceProviderConfig", ctx, id)
	ret0, _ := ret[0].(db.GetWorkspaceProviderConfigRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspaceProviderConfig indicates an expected call of GetWorkspaceProviderConfig.
func (mr *MockQuerierMockRecorder) GetWorkspaceProviderConfig(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspaceProviderConfig", reflect.TypeOf((*MockQuerier)(nil).GetWorkspaceProviderConfig), ctx, id)
}

// GetWorkspaceSyncSummary mocks base method.
func (m *MockQuerier) GetWorkspaceSyncSummary(ctx context.Context, id uuid.UUID) (db.GetWorkspaceSyncSummaryRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspaceSyncSummary", ctx, id)
	ret0, _ := ret[0].(db.GetWorkspaceSyncSummaryRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspaceSyncSummary indicates an expected call of GetWorkspaceSyncSummary.
func (mr *MockQuerierMockRecorder) GetWorkspaceSyncSummary(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspaceSyncSummary", reflect.TypeOf((*MockQuerier)(nil).GetWorkspaceSyncSummary), ctx, id)
}

// GetWorkspacesByProvider mocks base method.
func (m *MockQuerier) GetWorkspacesByProvider(ctx context.Context, metadata []byte) ([]db.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspacesByProvider", ctx, metadata)
	ret0, _ := ret[0].([]db.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspacesByProvider indicates an expected call of GetWorkspacesByProvider.
func (mr *MockQuerierMockRecorder) GetWorkspacesByProvider(ctx, metadata any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspacesByProvider", reflect.TypeOf((*MockQuerier)(nil).GetWorkspacesByProvider), ctx, metadata)
}

// GetWorkspacesNeedingReset mocks base method.
func (m *MockQuerier) GetWorkspacesNeedingReset(ctx context.Context) ([]uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspacesNeedingReset", ctx)
	ret0, _ := ret[0].([]uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspacesNeedingReset indicates an expected call of GetWorkspacesNeedingReset.
func (mr *MockQuerierMockRecorder) GetWorkspacesNeedingReset(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspacesNeedingReset", reflect.TypeOf((*MockQuerier)(nil).GetWorkspacesNeedingReset), ctx)
}

// HardDeleteAccount mocks base method.
func (m *MockQuerier) HardDeleteAccount(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HardDeleteAccount", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// HardDeleteAccount indicates an expected call of HardDeleteAccount.
func (mr *MockQuerierMockRecorder) HardDeleteAccount(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HardDeleteAccount", reflect.TypeOf((*MockQuerier)(nil).HardDeleteAccount), ctx, id)
}

// HardDeleteWorkspace mocks base method.
func (m *MockQuerier) HardDeleteWorkspace(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HardDeleteWorkspace", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// HardDeleteWorkspace indicates an expected call of HardDeleteWorkspace.
func (mr *MockQuerierMockRecorder) HardDeleteWorkspace(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HardDeleteWorkspace", reflect.TypeOf((*MockQuerier)(nil).HardDeleteWorkspace), ctx, id)
}

// HasPaymentsAfterDate mocks base method.
func (m *MockQuerier) HasPaymentsAfterDate(ctx context.Context, arg db.HasPaymentsAfterDateParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasPaymentsAfterDate", ctx, arg)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasPaymentsAfterDate indicates an expected call of HasPaymentsAfterDate.
func (mr *MockQuerierMockRecorder) HasPaymentsAfterDate(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasPaymentsAfterDate", reflect.TypeOf((*MockQuerier)(nil).HasPaymentsAfterDate), ctx, arg)
}

// IncrementPaymentLinkUsage mocks base method.
func (m *MockQuerier) IncrementPaymentLinkUsage(ctx context.Context, arg db.IncrementPaymentLinkUsageParams) (db.PaymentLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementPaymentLinkUsage", ctx, arg)
	ret0, _ := ret[0].(db.PaymentLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncrementPaymentLinkUsage indicates an expected call of IncrementPaymentLinkUsage.
func (mr *MockQuerierMockRecorder) IncrementPaymentLinkUsage(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementPaymentLinkUsage", reflect.TypeOf((*MockQuerier)(nil).IncrementPaymentLinkUsage), ctx, arg)
}

// IncrementSubscriptionRedemption mocks base method.
func (m *MockQuerier) IncrementSubscriptionRedemption(ctx context.Context, arg db.IncrementSubscriptionRedemptionParams) (db.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementSubscriptionRedemption", ctx, arg)
	ret0, _ := ret[0].(db.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncrementSubscriptionRedemption indicates an expected call of IncrementSubscriptionRedemption.
func (mr *MockQuerierMockRecorder) IncrementSubscriptionRedemption(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementSubscriptionRedemption", reflect.TypeOf((*MockQuerier)(nil).IncrementSubscriptionRedemption), ctx, arg)
}

// IsCustomerInWorkspace mocks base method.
func (m *MockQuerier) IsCustomerInWorkspace(ctx context.Context, arg db.IsCustomerInWorkspaceParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCustomerInWorkspace", ctx, arg)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsCustomerInWorkspace indicates an expected call of IsCustomerInWorkspace.
func (mr *MockQuerierMockRecorder) IsCustomerInWorkspace(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCustomerInWorkspace", reflect.TypeOf((*MockQuerier)(nil).IsCustomerInWorkspace), ctx, arg)
}

// LinkInvoiceToPaymentLink mocks base method.
func (m *MockQuerier) LinkInvoiceToPaymentLink(ctx context.Context, arg db.LinkInvoiceToPaymentLinkParams) (db.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkInvoiceToPaymentLink", ctx, arg)
	ret0, _ := ret[0].(db.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LinkInvoiceToPaymentLink indicates an expected call of LinkInvoiceToPaymentLink.
func (mr *MockQuerierMockRecorder) LinkInvoiceToPaymentLink(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkInvoiceToPaymentLink", reflect.TypeOf((*MockQuerier)(nil).LinkInvoiceToPaymentLink), ctx, arg)
}

// LinkPaymentToInvoice mocks base method.
func (m *MockQuerier) LinkPaymentToInvoice(ctx context.Context, arg db.LinkPaymentToInvoiceParams) (db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkPaymentToInvoice", ctx, arg)
	ret0, _ := ret[0].(db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LinkPaymentToInvoice indicates an expected call of LinkPaymentToInvoice.
func (mr *MockQuerierMockRecorder) LinkPaymentToInvoice(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkPaymentToInvoice", reflect.TypeOf((*MockQuerier)(nil).LinkPaymentToInvoice), ctx, arg)
}

// ListAPIKeys mocks base method.
func (m *MockQuerier) ListAPIKeys(ctx context.Context, workspaceID uuid.UUID) ([]db.ApiKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAPIKeys", ctx, workspaceID)
	ret0, _ := ret[0].([]db.ApiKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAPIKeys indicates an expected call of ListAPIKeys.
func (mr *MockQuerierMockRecorder) ListAPIKeys(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAPIKeys", reflect.TypeOf((*MockQuerier)(nil).ListAPIKeys), ctx, workspaceID)
}

// ListAccounts mocks base method.
func (m *MockQuerier) ListAccounts(ctx context.Context) ([]db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccounts", ctx)
	ret0, _ := ret[0].([]db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccounts indicates an expected call of ListAccounts.
func (mr *MockQuerierMockRecorder) ListAccounts(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccounts", reflect.TypeOf((*MockQuerier)(nil).ListAccounts), ctx)
}

// ListAccountsByType mocks base method.
func (m *MockQuerier) ListAccountsByType(ctx context.Context, accountType db.AccountType) ([]db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountsByType", ctx, accountType)
	ret0, _ := ret[0].([]db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountsByType indicates an expected call of ListAccountsByType.
func (mr *MockQuerierMockRecorder) ListAccountsByType(ctx, accountType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountsByType", reflect.TypeOf((*MockQuerier)(nil).ListAccountsByType), ctx, accountType)
}

// ListAccountsByUser mocks base method.
func (m *MockQuerier) ListAccountsByUser(ctx context.Context, id uuid.UUID) ([]db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountsByUser", ctx, id)
	ret0, _ := ret[0].([]db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountsByUser indicates an expected call of ListAccountsByUser.
func (mr *MockQuerierMockRecorder) ListAccountsByUser(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountsByUser", reflect.TypeOf((*MockQuerier)(nil).ListAccountsByUser), ctx, id)
}

// ListActiveCircleNetworks mocks base method.
func (m *MockQuerier) ListActiveCircleNetworks(ctx context.Context) ([]db.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActiveCircleNetworks", ctx)
	ret0, _ := ret[0].([]db.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActiveCircleNetworks indicates an expected call of ListActiveCircleNetworks.
func (mr *MockQuerierMockRecorder) ListActiveCircleNetworks(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActiveCircleNetworks", reflect.TypeOf((*MockQuerier)(nil).ListActiveCircleNetworks), ctx)
}

// ListActiveDunningEmailTemplates mocks base method.
func (m *MockQuerier) ListActiveDunningEmailTemplates(ctx context.Context, workspaceID uuid.UUID) ([]db.DunningEmailTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActiveDunningEmailTemplates", ctx, workspaceID)
	ret0, _ := ret[0].([]db.DunningEmailTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActiveDunningEmailTemplates indicates an expected call of ListActiveDunningEmailTemplates.
func (mr *MockQuerierMockRecorder) ListActiveDunningEmailTemplates(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActiveDunningEmailTemplates", reflect.TypeOf((*MockQuerier)(nil).ListActiveDunningEmailTemplates), ctx, workspaceID)
}

// ListActiveFiatCurrencies mocks base method.
func (m *MockQuerier) ListActiveFiatCurrencies(ctx context.Context) ([]db.FiatCurrency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActiveFiatCurrencies", ctx)
	ret0, _ := ret[0].([]db.FiatCurrency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActiveFiatCurrencies indicates an expected call of ListActiveFiatCurrencies.
func (mr *MockQuerierMockRecorder) ListActiveFiatCurrencies(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActiveFiatCurrencies", reflect.TypeOf((*MockQuerier)(nil).ListActiveFiatCurrencies), ctx)
}

// ListActiveNetworks mocks base method.
func (m *MockQuerier) ListActiveNetworks(ctx context.Context) ([]db.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActiveNetworks", ctx)
	ret0, _ := ret[0].([]db.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActiveNetworks indicates an expected call of ListActiveNetworks.
func (mr *MockQuerierMockRecorder) ListActiveNetworks(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActiveNetworks", reflect.TypeOf((*MockQuerier)(nil).ListActiveNetworks), ctx)
}

// ListActiveProducts mocks base method.
func (m *MockQuerier) ListActiveProducts(ctx context.Context, workspaceID uuid.UUID) ([]db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActiveProducts", ctx, workspaceID)
	ret0, _ := ret[0].([]db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActiveProducts indicates an expected call of ListActiveProducts.
func (mr *MockQuerierMockRecorder) ListActiveProducts(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActiveProducts", reflect.TypeOf((*MockQuerier)(nil).ListActiveProducts), ctx, workspaceID)
}

// ListActiveProviders mocks base method.
func (m *MockQuerier) ListActiveProviders(ctx context.Context, workspaceID uuid.UUID) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActiveProviders", ctx, workspaceID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActiveProviders indicates an expected call of ListActiveProviders.
func (mr *MockQuerierMockRecorder) ListActiveProviders(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActiveProviders", reflect.TypeOf((*MockQuerier)(nil).ListActiveProviders), ctx, workspaceID)
}

// ListActiveSubscriptionLineItems mocks base method.
func (m *MockQuerier) ListActiveSubscriptionLineItems(ctx context.Context, subscriptionID uuid.UUID) ([]db.ListActiveSubscriptionLineItemsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActiveSubscriptionLineItems", ctx, subscriptionID)
	ret0, _ := ret[0].([]db.ListActiveSubscriptionLineItemsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActiveSubscriptionLineItems indicates an expected call of ListActiveSubscriptionLineItems.
func (mr *MockQuerierMockRecorder) ListActiveSubscriptionLineItems(ctx, subscriptionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActiveSubscriptionLineItems", reflect.TypeOf((*MockQuerier)(nil).ListActiveSubscriptionLineItems), ctx, subscriptionID)
}

// ListActiveSubscriptions mocks base method.
func (m *MockQuerier) ListActiveSubscriptions(ctx context.Context) ([]db.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActiveSubscriptions", ctx)
	ret0, _ := ret[0].([]db.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActiveSubscriptions indicates an expected call of ListActiveSubscriptions.
func (mr *MockQuerierMockRecorder) ListActiveSubscriptions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActiveSubscriptions", reflect.TypeOf((*MockQuerier)(nil).ListActiveSubscriptions), ctx)
}

// ListActiveTokensByNetwork mocks base method.
func (m *MockQuerier) ListActiveTokensByNetwork(ctx context.Context, networkID uuid.UUID) ([]db.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActiveTokensByNetwork", ctx, networkID)
	ret0, _ := ret[0].([]db.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActiveTokensByNetwork indicates an expected call of ListActiveTokensByNetwork.
func (mr *MockQuerierMockRecorder) ListActiveTokensByNetwork(ctx, networkID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActiveTokensByNetwork", reflect.TypeOf((*MockQuerier)(nil).ListActiveTokensByNetwork), ctx, networkID)
}

// ListActiveWorkspacePaymentConfigurations mocks base method.
func (m *MockQuerier) ListActiveWorkspacePaymentConfigurations(ctx context.Context, workspaceID uuid.UUID) ([]db.WorkspacePaymentConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActiveWorkspacePaymentConfigurations", ctx, workspaceID)
	ret0, _ := ret[0].([]db.WorkspacePaymentConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActiveWorkspacePaymentConfigurations indicates an expected call of ListActiveWorkspacePaymentConfigurations.
func (mr *MockQuerierMockRecorder) ListActiveWorkspacePaymentConfigurations(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActiveWorkspacePaymentConfigurations", reflect.TypeOf((*MockQuerier)(nil).ListActiveWorkspacePaymentConfigurations), ctx, workspaceID)
}

// ListAllFiatCurrencies mocks base method.
func (m *MockQuerier) ListAllFiatCurrencies(ctx context.Context) ([]db.FiatCurrency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllFiatCurrencies", ctx)
	ret0, _ := ret[0].([]db.FiatCurrency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllFiatCurrencies indicates an expected call of ListAllFiatCurrencies.
func (mr *MockQuerierMockRecorder) ListAllFiatCurrencies(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllFiatCurrencies", reflect.TypeOf((*MockQuerier)(nil).ListAllFiatCurrencies), ctx)
}

// ListBaseProductsForAddon mocks base method.
func (m *MockQuerier) ListBaseProductsForAddon(ctx context.Context, addonProductID uuid.UUID) ([]db.ListBaseProductsForAddonRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBaseProductsForAddon", ctx, addonProductID)
	ret0, _ := ret[0].([]db.ListBaseProductsForAddonRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBaseProductsForAddon indicates an expected call of ListBaseProductsForAddon.
func (mr *MockQuerierMockRecorder) ListBaseProductsForAddon(ctx, addonProductID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBaseProductsForAddon", reflect.TypeOf((*MockQuerier)(nil).ListBaseProductsForAddon), ctx, addonProductID)
}

// ListCircleUsers mocks base method.
func (m *MockQuerier) ListCircleUsers(ctx context.Context) ([]db.CircleUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCircleUsers", ctx)
	ret0, _ := ret[0].([]db.CircleUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCircleUsers indicates an expected call of ListCircleUsers.
func (mr *MockQuerierMockRecorder) ListCircleUsers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCircleUsers", reflect.TypeOf((*MockQuerier)(nil).ListCircleUsers), ctx)
}

// ListCircleWalletsByCircleUserID mocks base method.
func (m *MockQuerier) ListCircleWalletsByCircleUserID(ctx context.Context, circleUserID uuid.UUID) ([]db.ListCircleWalletsByCircleUserIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCircleWalletsByCircleUserID", ctx, circleUserID)
	ret0, _ := ret[0].([]db.ListCircleWalletsByCircleUserIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCircleWalletsByCircleUserID indicates an expected call of ListCircleWalletsByCircleUserID.
func (mr *MockQuerierMockRecorder) ListCircleWalletsByCircleUserID(ctx, circleUserID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCircleWalletsByCircleUserID", reflect.TypeOf((*MockQuerier)(nil).ListCircleWalletsByCircleUserID), ctx, circleUserID)
}

// ListCircleWalletsByWorkspaceID mocks base method.
func (m *MockQuerier) ListCircleWalletsByWorkspaceID(ctx context.Context, workspaceID uuid.UUID) ([]db.ListCircleWalletsByWorkspaceIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCircleWalletsByWorkspaceID", ctx, workspaceID)
	ret0, _ := ret[0].([]db.ListCircleWalletsByWorkspaceIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCircleWalletsByWorkspaceID indicates an expected call of ListCircleWalletsByWorkspaceID.
func (mr *MockQuerierMockRecorder) ListCircleWalletsByWorkspaceID(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCircleWalletsByWorkspaceID", reflect.TypeOf((*MockQuerier)(nil).ListCircleWalletsByWorkspaceID), ctx, workspaceID)
}

// ListCustomerWallets mocks base method.
func (m *MockQuerier) ListCustomerWallets(ctx context.Context, customerID uuid.UUID) ([]db.CustomerWallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomerWallets", ctx, customerID)
	ret0, _ := ret[0].([]db.CustomerWallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomerWallets indicates an expected call of ListCustomerWallets.
func (mr *MockQuerierMockRecorder) ListCustomerWallets(ctx, customerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomerWallets", reflect.TypeOf((*MockQuerier)(nil).ListCustomerWallets), ctx, customerID)
}

// ListCustomerWorkspaces mocks base method.
func (m *MockQuerier) ListCustomerWorkspaces(ctx context.Context, customerID uuid.UUID) ([]db.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomerWorkspaces", ctx, customerID)
	ret0, _ := ret[0].([]db.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomerWorkspaces indicates an expected call of ListCustomerWorkspaces.
func (mr *MockQuerierMockRecorder) ListCustomerWorkspaces(ctx, customerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomerWorkspaces", reflect.TypeOf((*MockQuerier)(nil).ListCustomerWorkspaces), ctx, customerID)
}

// ListCustomers mocks base method.
func (m *MockQuerier) ListCustomers(ctx context.Context) ([]db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomers", ctx)
	ret0, _ := ret[0].([]db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomers indicates an expected call of ListCustomers.
func (mr *MockQuerierMockRecorder) ListCustomers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomers", reflect.TypeOf((*MockQuerier)(nil).ListCustomers), ctx)
}

// ListCustomersWithPagination mocks base method.
func (m *MockQuerier) ListCustomersWithPagination(ctx context.Context, arg db.ListCustomersWithPaginationParams) ([]db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomersWithPagination", ctx, arg)
	ret0, _ := ret[0].([]db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomersWithPagination indicates an expected call of ListCustomersWithPagination.
func (mr *MockQuerierMockRecorder) ListCustomersWithPagination(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomersWithPagination", reflect.TypeOf((*MockQuerier)(nil).ListCustomersWithPagination), ctx, arg)
}

// ListDelegationsWithPagination mocks base method.
func (m *MockQuerier) ListDelegationsWithPagination(ctx context.Context, arg db.ListDelegationsWithPaginationParams) ([]db.DelegationDatum, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDelegationsWithPagination", ctx, arg)
	ret0, _ := ret[0].([]db.DelegationDatum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDelegationsWithPagination indicates an expected call of ListDelegationsWithPagination.
func (mr *MockQuerierMockRecorder) ListDelegationsWithPagination(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDelegationsWithPagination", reflect.TypeOf((*MockQuerier)(nil).ListDelegationsWithPagination), ctx, arg)
}

// ListDunningAnalyticsByPeriod mocks base method.
func (m *MockQuerier) ListDunningAnalyticsByPeriod(ctx context.Context, arg db.ListDunningAnalyticsByPeriodParams) ([]db.DunningAnalytic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDunningAnalyticsByPeriod", ctx, arg)
	ret0, _ := ret[0].([]db.DunningAnalytic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDunningAnalyticsByPeriod indicates an expected call of ListDunningAnalyticsByPeriod.
func (mr *MockQuerierMockRecorder) ListDunningAnalyticsByPeriod(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDunningAnalyticsByPeriod", reflect.TypeOf((*MockQuerier)(nil).ListDunningAnalyticsByPeriod), ctx, arg)
}

// ListDunningAttempts mocks base method.
func (m *MockQuerier) ListDunningAttempts(ctx context.Context, campaignID uuid.UUID) ([]db.DunningAttempt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDunningAttempts", ctx, campaignID)
	ret0, _ := ret[0].([]db.DunningAttempt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDunningAttempts indicates an expected call of ListDunningAttempts.
func (mr *MockQuerierMockRecorder) ListDunningAttempts(ctx, campaignID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDunningAttempts", reflect.TypeOf((*MockQuerier)(nil).ListDunningAttempts), ctx, campaignID)
}

// ListDunningCampaigns mocks base method.
func (m *MockQuerier) ListDunningCampaigns(ctx context.Context, arg db.ListDunningCampaignsParams) ([]db.ListDunningCampaignsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDunningCampaigns", ctx, arg)
	ret0, _ := ret[0].([]db.ListDunningCampaignsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDunningCampaigns indicates an expected call of ListDunningCampaigns.
func (mr *MockQuerierMockRecorder) ListDunningCampaigns(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDunningCampaigns", reflect.TypeOf((*MockQuerier)(nil).ListDunningCampaigns), ctx, arg)
}

// ListDunningCampaignsForRetry mocks base method.
func (m *MockQuerier) ListDunningCampaignsForRetry(ctx context.Context, limit int32) ([]db.DunningCampaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDunningCampaignsForRetry", ctx, limit)
	ret0, _ := ret[0].([]db.DunningCampaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDunningCampaignsForRetry indicates an expected call of ListDunningCampaignsForRetry.
func (mr *MockQuerierMockRecorder) ListDunningCampaignsForRetry(ctx, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDunningCampaignsForRetry", reflect.TypeOf((*MockQuerier)(nil).ListDunningCampaignsForRetry), ctx, limit)
}

// ListDunningConfigurations mocks base method.
func (m *MockQuerier) ListDunningConfigurations(ctx context.Context, workspaceID uuid.UUID) ([]db.DunningConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDunningConfigurations", ctx, workspaceID)
	ret0, _ := ret[0].([]db.DunningConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDunningConfigurations indicates an expected call of ListDunningConfigurations.
func (mr *MockQuerierMockRecorder) ListDunningConfigurations(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDunningConfigurations", reflect.TypeOf((*MockQuerier)(nil).ListDunningConfigurations), ctx, workspaceID)
}

// ListDunningEmailTemplates mocks base method.
func (m *MockQuerier) ListDunningEmailTemplates(ctx context.Context, workspaceID uuid.UUID) ([]db.DunningEmailTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDunningEmailTemplates", ctx, workspaceID)
	ret0, _ := ret[0].([]db.DunningEmailTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDunningEmailTemplates indicates an expected call of ListDunningEmailTemplates.
func (mr *MockQuerierMockRecorder) ListDunningEmailTemplates(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDunningEmailTemplates", reflect.TypeOf((*MockQuerier)(nil).ListDunningEmailTemplates), ctx, workspaceID)
}

// ListFailedSubscriptionAttempts mocks base method.
func (m *MockQuerier) ListFailedSubscriptionAttempts(ctx context.Context) ([]db.FailedSubscriptionAttempt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFailedSubscriptionAttempts", ctx)
	ret0, _ := ret[0].([]db.FailedSubscriptionAttempt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFailedSubscriptionAttempts indicates an expected call of ListFailedSubscriptionAttempts.
func (mr *MockQuerierMockRecorder) ListFailedSubscriptionAttempts(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFailedSubscriptionAttempts", reflect.TypeOf((*MockQuerier)(nil).ListFailedSubscriptionAttempts), ctx)
}

// ListFailedSubscriptionAttemptsByCustomer mocks base method.
func (m *MockQuerier) ListFailedSubscriptionAttemptsByCustomer(ctx context.Context, customerID pgtype.UUID) ([]db.FailedSubscriptionAttempt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFailedSubscriptionAttemptsByCustomer", ctx, customerID)
	ret0, _ := ret[0].([]db.FailedSubscriptionAttempt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFailedSubscriptionAttemptsByCustomer indicates an expected call of ListFailedSubscriptionAttemptsByCustomer.
func (mr *MockQuerierMockRecorder) ListFailedSubscriptionAttemptsByCustomer(ctx, customerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFailedSubscriptionAttemptsByCustomer", reflect.TypeOf((*MockQuerier)(nil).ListFailedSubscriptionAttemptsByCustomer), ctx, customerID)
}

// ListFailedSubscriptionAttemptsByErrorType mocks base method.
func (m *MockQuerier) ListFailedSubscriptionAttemptsByErrorType(ctx context.Context, errorType db.SubscriptionEventType) ([]db.FailedSubscriptionAttempt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFailedSubscriptionAttemptsByErrorType", ctx, errorType)
	ret0, _ := ret[0].([]db.FailedSubscriptionAttempt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFailedSubscriptionAttemptsByErrorType indicates an expected call of ListFailedSubscriptionAttemptsByErrorType.
func (mr *MockQuerierMockRecorder) ListFailedSubscriptionAttemptsByErrorType(ctx, errorType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFailedSubscriptionAttemptsByErrorType", reflect.TypeOf((*MockQuerier)(nil).ListFailedSubscriptionAttemptsByErrorType), ctx, errorType)
}

// ListFailedSubscriptionAttemptsByProduct mocks base method.
func (m *MockQuerier) ListFailedSubscriptionAttemptsByProduct(ctx context.Context, productID uuid.UUID) ([]db.FailedSubscriptionAttempt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFailedSubscriptionAttemptsByProduct", ctx, productID)
	ret0, _ := ret[0].([]db.FailedSubscriptionAttempt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFailedSubscriptionAttemptsByProduct indicates an expected call of ListFailedSubscriptionAttemptsByProduct.
func (mr *MockQuerierMockRecorder) ListFailedSubscriptionAttemptsByProduct(ctx, productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFailedSubscriptionAttemptsByProduct", reflect.TypeOf((*MockQuerier)(nil).ListFailedSubscriptionAttemptsByProduct), ctx, productID)
}

// ListFailedSubscriptionAttemptsByWalletAddress mocks base method.
func (m *MockQuerier) ListFailedSubscriptionAttemptsByWalletAddress(ctx context.Context, walletAddress string) ([]db.FailedSubscriptionAttempt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFailedSubscriptionAttemptsByWalletAddress", ctx, walletAddress)
	ret0, _ := ret[0].([]db.FailedSubscriptionAttempt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFailedSubscriptionAttemptsByWalletAddress indicates an expected call of ListFailedSubscriptionAttemptsByWalletAddress.
func (mr *MockQuerierMockRecorder) ListFailedSubscriptionAttemptsByWalletAddress(ctx, walletAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFailedSubscriptionAttemptsByWalletAddress", reflect.TypeOf((*MockQuerier)(nil).ListFailedSubscriptionAttemptsByWalletAddress), ctx, walletAddress)
}

// ListFailedSubscriptionAttemptsWithPagination mocks base method.
func (m *MockQuerier) ListFailedSubscriptionAttemptsWithPagination(ctx context.Context, arg db.ListFailedSubscriptionAttemptsWithPaginationParams) ([]db.FailedSubscriptionAttempt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFailedSubscriptionAttemptsWithPagination", ctx, arg)
	ret0, _ := ret[0].([]db.FailedSubscriptionAttempt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFailedSubscriptionAttemptsWithPagination indicates an expected call of ListFailedSubscriptionAttemptsWithPagination.
func (mr *MockQuerierMockRecorder) ListFailedSubscriptionAttemptsWithPagination(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFailedSubscriptionAttemptsWithPagination", reflect.TypeOf((*MockQuerier)(nil).ListFailedSubscriptionAttemptsWithPagination), ctx, arg)
}

// ListFailedSubscriptionEvents mocks base method.
func (m *MockQuerier) ListFailedSubscriptionEvents(ctx context.Context) ([]db.SubscriptionEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFailedSubscriptionEvents", ctx)
	ret0, _ := ret[0].([]db.SubscriptionEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFailedSubscriptionEvents indicates an expected call of ListFailedSubscriptionEvents.
func (mr *MockQuerierMockRecorder) ListFailedSubscriptionEvents(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFailedSubscriptionEvents", reflect.TypeOf((*MockQuerier)(nil).ListFailedSubscriptionEvents), ctx)
}

// ListFailedWebhookEvents mocks base method.
func (m *MockQuerier) ListFailedWebhookEvents(ctx context.Context, arg db.ListFailedWebhookEventsParams) ([]db.PaymentSyncEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFailedWebhookEvents", ctx, arg)
	ret0, _ := ret[0].([]db.PaymentSyncEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFailedWebhookEvents indicates an expected call of ListFailedWebhookEvents.
func (mr *MockQuerierMockRecorder) ListFailedWebhookEvents(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFailedWebhookEvents", reflect.TypeOf((*MockQuerier)(nil).ListFailedWebhookEvents), ctx, arg)
}

// ListInvoicesByCustomer mocks base method.
func (m *MockQuerier) ListInvoicesByCustomer(ctx context.Context, arg db.ListInvoicesByCustomerParams) ([]db.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInvoicesByCustomer", ctx, arg)
	ret0, _ := ret[0].([]db.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInvoicesByCustomer indicates an expected call of ListInvoicesByCustomer.
func (mr *MockQuerierMockRecorder) ListInvoicesByCustomer(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvoicesByCustomer", reflect.TypeOf((*MockQuerier)(nil).ListInvoicesByCustomer), ctx, arg)
}

// ListInvoicesByProvider mocks base method.
func (m *MockQuerier) ListInvoicesByProvider(ctx context.Context, arg db.ListInvoicesByProviderParams) ([]db.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInvoicesByProvider", ctx, arg)
	ret0, _ := ret[0].([]db.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInvoicesByProvider indicates an expected call of ListInvoicesByProvider.
func (mr *MockQuerierMockRecorder) ListInvoicesByProvider(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvoicesByProvider", reflect.TypeOf((*MockQuerier)(nil).ListInvoicesByProvider), ctx, arg)
}

// ListInvoicesByStatus mocks base method.
func (m *MockQuerier) ListInvoicesByStatus(ctx context.Context, arg db.ListInvoicesByStatusParams) ([]db.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInvoicesByStatus", ctx, arg)
	ret0, _ := ret[0].([]db.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInvoicesByStatus indicates an expected call of ListInvoicesByStatus.
func (mr *MockQuerierMockRecorder) ListInvoicesByStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvoicesByStatus", reflect.TypeOf((*MockQuerier)(nil).ListInvoicesByStatus), ctx, arg)
}

// ListInvoicesBySubscription mocks base method.
func (m *MockQuerier) ListInvoicesBySubscription(ctx context.Context, arg db.ListInvoicesBySubscriptionParams) ([]db.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInvoicesBySubscription", ctx, arg)
	ret0, _ := ret[0].([]db.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInvoicesBySubscription indicates an expected call of ListInvoicesBySubscription.
func (mr *MockQuerierMockRecorder) ListInvoicesBySubscription(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvoicesBySubscription", reflect.TypeOf((*MockQuerier)(nil).ListInvoicesBySubscription), ctx, arg)
}

// ListInvoicesBySyncStatus mocks base method.
func (m *MockQuerier) ListInvoicesBySyncStatus(ctx context.Context, arg db.ListInvoicesBySyncStatusParams) ([]db.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInvoicesBySyncStatus", ctx, arg)
	ret0, _ := ret[0].([]db.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInvoicesBySyncStatus indicates an expected call of ListInvoicesBySyncStatus.
func (mr *MockQuerierMockRecorder) ListInvoicesBySyncStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvoicesBySyncStatus", reflect.TypeOf((*MockQuerier)(nil).ListInvoicesBySyncStatus), ctx, arg)
}

// ListInvoicesByWorkspace mocks base method.
func (m *MockQuerier) ListInvoicesByWorkspace(ctx context.Context, arg db.ListInvoicesByWorkspaceParams) ([]db.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInvoicesByWorkspace", ctx, arg)
	ret0, _ := ret[0].([]db.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInvoicesByWorkspace indicates an expected call of ListInvoicesByWorkspace.
func (mr *MockQuerierMockRecorder) ListInvoicesByWorkspace(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvoicesByWorkspace", reflect.TypeOf((*MockQuerier)(nil).ListInvoicesByWorkspace), ctx, arg)
}

// ListNetworks mocks base method.
func (m *MockQuerier) ListNetworks(ctx context.Context, arg db.ListNetworksParams) ([]db.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNetworks", ctx, arg)
	ret0, _ := ret[0].([]db.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNetworks indicates an expected call of ListNetworks.
func (mr *MockQuerierMockRecorder) ListNetworks(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNetworks", reflect.TypeOf((*MockQuerier)(nil).ListNetworks), ctx, arg)
}

// ListPrimaryCustomerWallets mocks base method.
func (m *MockQuerier) ListPrimaryCustomerWallets(ctx context.Context) ([]db.CustomerWallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPrimaryCustomerWallets", ctx)
	ret0, _ := ret[0].([]db.CustomerWallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPrimaryCustomerWallets indicates an expected call of ListPrimaryCustomerWallets.
func (mr *MockQuerierMockRecorder) ListPrimaryCustomerWallets(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrimaryCustomerWallets", reflect.TypeOf((*MockQuerier)(nil).ListPrimaryCustomerWallets), ctx)
}

// ListPrimaryWalletsByWorkspaceID mocks base method.
func (m *MockQuerier) ListPrimaryWalletsByWorkspaceID(ctx context.Context, workspaceID uuid.UUID) ([]db.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPrimaryWalletsByWorkspaceID", ctx, workspaceID)
	ret0, _ := ret[0].([]db.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPrimaryWalletsByWorkspaceID indicates an expected call of ListPrimaryWalletsByWorkspaceID.
func (mr *MockQuerierMockRecorder) ListPrimaryWalletsByWorkspaceID(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrimaryWalletsByWorkspaceID", reflect.TypeOf((*MockQuerier)(nil).ListPrimaryWalletsByWorkspaceID), ctx, workspaceID)
}

// ListPrimaryWalletsWithCircleDataByWorkspaceID mocks base method.
func (m *MockQuerier) ListPrimaryWalletsWithCircleDataByWorkspaceID(ctx context.Context, workspaceID uuid.UUID) ([]db.ListPrimaryWalletsWithCircleDataByWorkspaceIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPrimaryWalletsWithCircleDataByWorkspaceID", ctx, workspaceID)
	ret0, _ := ret[0].([]db.ListPrimaryWalletsWithCircleDataByWorkspaceIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPrimaryWalletsWithCircleDataByWorkspaceID indicates an expected call of ListPrimaryWalletsWithCircleDataByWorkspaceID.
func (mr *MockQuerierMockRecorder) ListPrimaryWalletsWithCircleDataByWorkspaceID(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrimaryWalletsWithCircleDataByWorkspaceID", reflect.TypeOf((*MockQuerier)(nil).ListPrimaryWalletsWithCircleDataByWorkspaceID), ctx, workspaceID)
}

// ListProductAddons mocks base method.
func (m *MockQuerier) ListProductAddons(ctx context.Context, baseProductID uuid.UUID) ([]db.ListProductAddonsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductAddons", ctx, baseProductID)
	ret0, _ := ret[0].([]db.ListProductAddonsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductAddons indicates an expected call of ListProductAddons.
func (mr *MockQuerierMockRecorder) ListProductAddons(ctx, baseProductID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductAddons", reflect.TypeOf((*MockQuerier)(nil).ListProductAddons), ctx, baseProductID)
}

// ListProducts mocks base method.
func (m *MockQuerier) ListProducts(ctx context.Context, workspaceID uuid.UUID) ([]db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProducts", ctx, workspaceID)
	ret0, _ := ret[0].([]db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProducts indicates an expected call of ListProducts.
func (mr *MockQuerierMockRecorder) ListProducts(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProducts", reflect.TypeOf((*MockQuerier)(nil).ListProducts), ctx, workspaceID)
}

// ListProductsWithPagination mocks base method.
func (m *MockQuerier) ListProductsWithPagination(ctx context.Context, arg db.ListProductsWithPaginationParams) ([]db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductsWithPagination", ctx, arg)
	ret0, _ := ret[0].([]db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductsWithPagination indicates an expected call of ListProductsWithPagination.
func (mr *MockQuerierMockRecorder) ListProductsWithPagination(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductsWithPagination", reflect.TypeOf((*MockQuerier)(nil).ListProductsWithPagination), ctx, arg)
}

// ListProviderAccountsByProvider mocks base method.
func (m *MockQuerier) ListProviderAccountsByProvider(ctx context.Context, arg db.ListProviderAccountsByProviderParams) ([]db.WorkspaceProviderAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProviderAccountsByProvider", ctx, arg)
	ret0, _ := ret[0].([]db.WorkspaceProviderAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProviderAccountsByProvider indicates an expected call of ListProviderAccountsByProvider.
func (mr *MockQuerierMockRecorder) ListProviderAccountsByProvider(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProviderAccountsByProvider", reflect.TypeOf((*MockQuerier)(nil).ListProviderAccountsByProvider), ctx, arg)
}

// ListProviderAccountsByWorkspace mocks base method.
func (m *MockQuerier) ListProviderAccountsByWorkspace(ctx context.Context, arg db.ListProviderAccountsByWorkspaceParams) ([]db.WorkspaceProviderAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProviderAccountsByWorkspace", ctx, arg)
	ret0, _ := ret[0].([]db.WorkspaceProviderAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProviderAccountsByWorkspace indicates an expected call of ListProviderAccountsByWorkspace.
func (mr *MockQuerierMockRecorder) ListProviderAccountsByWorkspace(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProviderAccountsByWorkspace", reflect.TypeOf((*MockQuerier)(nil).ListProviderAccountsByWorkspace), ctx, arg)
}

// ListRecentFailedPayments mocks base method.
func (m *MockQuerier) ListRecentFailedPayments(ctx context.Context, occurredAt pgtype.Timestamptz) ([]db.ListRecentFailedPaymentsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecentFailedPayments", ctx, occurredAt)
	ret0, _ := ret[0].([]db.ListRecentFailedPaymentsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecentFailedPayments indicates an expected call of ListRecentFailedPayments.
func (mr *MockQuerierMockRecorder) ListRecentFailedPayments(ctx, occurredAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecentFailedPayments", reflect.TypeOf((*MockQuerier)(nil).ListRecentFailedPayments), ctx, occurredAt)
}

// ListRecentFailedSubscriptionAttempts mocks base method.
func (m *MockQuerier) ListRecentFailedSubscriptionAttempts(ctx context.Context, occurredAt pgtype.Timestamptz) ([]db.FailedSubscriptionAttempt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecentFailedSubscriptionAttempts", ctx, occurredAt)
	ret0, _ := ret[0].([]db.FailedSubscriptionAttempt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecentFailedSubscriptionAttempts indicates an expected call of ListRecentFailedSubscriptionAttempts.
func (mr *MockQuerierMockRecorder) ListRecentFailedSubscriptionAttempts(ctx, occurredAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecentFailedSubscriptionAttempts", reflect.TypeOf((*MockQuerier)(nil).ListRecentFailedSubscriptionAttempts), ctx, occurredAt)
}

// ListRecentSubscriptionEvents mocks base method.
func (m *MockQuerier) ListRecentSubscriptionEvents(ctx context.Context, occurredAt pgtype.Timestamptz) ([]db.SubscriptionEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecentSubscriptionEvents", ctx, occurredAt)
	ret0, _ := ret[0].([]db.SubscriptionEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecentSubscriptionEvents indicates an expected call of ListRecentSubscriptionEvents.
func (mr *MockQuerierMockRecorder) ListRecentSubscriptionEvents(ctx, occurredAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecentSubscriptionEvents", reflect.TypeOf((*MockQuerier)(nil).ListRecentSubscriptionEvents), ctx, occurredAt)
}

// ListRecentSubscriptionEventsByType mocks base method.
func (m *MockQuerier) ListRecentSubscriptionEventsByType(ctx context.Context, arg db.ListRecentSubscriptionEventsByTypeParams) ([]db.SubscriptionEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecentSubscriptionEventsByType", ctx, arg)
	ret0, _ := ret[0].([]db.SubscriptionEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecentSubscriptionEventsByType indicates an expected call of ListRecentSubscriptionEventsByType.
func (mr *MockQuerierMockRecorder) ListRecentSubscriptionEventsByType(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecentSubscriptionEventsByType", reflect.TypeOf((*MockQuerier)(nil).ListRecentSubscriptionEventsByType), ctx, arg)
}

// ListRequiredProductAddons mocks base method.
func (m *MockQuerier) ListRequiredProductAddons(ctx context.Context, baseProductID uuid.UUID) ([]db.ListRequiredProductAddonsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRequiredProductAddons", ctx, baseProductID)
	ret0, _ := ret[0].([]db.ListRequiredProductAddonsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRequiredProductAddons indicates an expected call of ListRequiredProductAddons.
func (mr *MockQuerierMockRecorder) ListRequiredProductAddons(ctx, baseProductID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRequiredProductAddons", reflect.TypeOf((*MockQuerier)(nil).ListRequiredProductAddons), ctx, baseProductID)
}

// ListSubscriptionAddonLineItems mocks base method.
func (m *MockQuerier) ListSubscriptionAddonLineItems(ctx context.Context, subscriptionID uuid.UUID) ([]db.ListSubscriptionAddonLineItemsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptionAddonLineItems", ctx, subscriptionID)
	ret0, _ := ret[0].([]db.ListSubscriptionAddonLineItemsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscriptionAddonLineItems indicates an expected call of ListSubscriptionAddonLineItems.
func (mr *MockQuerierMockRecorder) ListSubscriptionAddonLineItems(ctx, subscriptionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptionAddonLineItems", reflect.TypeOf((*MockQuerier)(nil).ListSubscriptionAddonLineItems), ctx, subscriptionID)
}

// ListSubscriptionDetailsWithPagination mocks base method.
func (m *MockQuerier) ListSubscriptionDetailsWithPagination(ctx context.Context, arg db.ListSubscriptionDetailsWithPaginationParams) ([]db.ListSubscriptionDetailsWithPaginationRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptionDetailsWithPagination", ctx, arg)
	ret0, _ := ret[0].([]db.ListSubscriptionDetailsWithPaginationRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscriptionDetailsWithPagination indicates an expected call of ListSubscriptionDetailsWithPagination.
func (mr *MockQuerierMockRecorder) ListSubscriptionDetailsWithPagination(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptionDetailsWithPagination", reflect.TypeOf((*MockQuerier)(nil).ListSubscriptionDetailsWithPagination), ctx, arg)
}

// ListSubscriptionEventDetailsWithPagination mocks base method.
func (m *MockQuerier) ListSubscriptionEventDetailsWithPagination(ctx context.Context, arg db.ListSubscriptionEventDetailsWithPaginationParams) ([]db.ListSubscriptionEventDetailsWithPaginationRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptionEventDetailsWithPagination", ctx, arg)
	ret0, _ := ret[0].([]db.ListSubscriptionEventDetailsWithPaginationRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscriptionEventDetailsWithPagination indicates an expected call of ListSubscriptionEventDetailsWithPagination.
func (mr *MockQuerierMockRecorder) ListSubscriptionEventDetailsWithPagination(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptionEventDetailsWithPagination", reflect.TypeOf((*MockQuerier)(nil).ListSubscriptionEventDetailsWithPagination), ctx, arg)
}

// ListSubscriptionEvents mocks base method.
func (m *MockQuerier) ListSubscriptionEvents(ctx context.Context) ([]db.SubscriptionEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptionEvents", ctx)
	ret0, _ := ret[0].([]db.SubscriptionEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscriptionEvents indicates an expected call of ListSubscriptionEvents.
func (mr *MockQuerierMockRecorder) ListSubscriptionEvents(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptionEvents", reflect.TypeOf((*MockQuerier)(nil).ListSubscriptionEvents), ctx)
}

// ListSubscriptionEventsBySubscription mocks base method.
func (m *MockQuerier) ListSubscriptionEventsBySubscription(ctx context.Context, subscriptionID uuid.UUID) ([]db.SubscriptionEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptionEventsBySubscription", ctx, subscriptionID)
	ret0, _ := ret[0].([]db.SubscriptionEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscriptionEventsBySubscription indicates an expected call of ListSubscriptionEventsBySubscription.
func (mr *MockQuerierMockRecorder) ListSubscriptionEventsBySubscription(ctx, subscriptionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptionEventsBySubscription", reflect.TypeOf((*MockQuerier)(nil).ListSubscriptionEventsBySubscription), ctx, subscriptionID)
}

// ListSubscriptionEventsByType mocks base method.
func (m *MockQuerier) ListSubscriptionEventsByType(ctx context.Context, eventType db.SubscriptionEventType) ([]db.SubscriptionEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptionEventsByType", ctx, eventType)
	ret0, _ := ret[0].([]db.SubscriptionEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscriptionEventsByType indicates an expected call of ListSubscriptionEventsByType.
func (mr *MockQuerierMockRecorder) ListSubscriptionEventsByType(ctx, eventType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptionEventsByType", reflect.TypeOf((*MockQuerier)(nil).ListSubscriptionEventsByType), ctx, eventType)
}

// ListSubscriptionEventsWithPagination mocks base method.
func (m *MockQuerier) ListSubscriptionEventsWithPagination(ctx context.Context, arg db.ListSubscriptionEventsWithPaginationParams) ([]db.SubscriptionEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptionEventsWithPagination", ctx, arg)
	ret0, _ := ret[0].([]db.SubscriptionEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscriptionEventsWithPagination indicates an expected call of ListSubscriptionEventsWithPagination.
func (mr *MockQuerierMockRecorder) ListSubscriptionEventsWithPagination(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptionEventsWithPagination", reflect.TypeOf((*MockQuerier)(nil).ListSubscriptionEventsWithPagination), ctx, arg)
}

// ListSubscriptionLineItems mocks base method.
func (m *MockQuerier) ListSubscriptionLineItems(ctx context.Context, subscriptionID uuid.UUID) ([]db.ListSubscriptionLineItemsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptionLineItems", ctx, subscriptionID)
	ret0, _ := ret[0].([]db.ListSubscriptionLineItemsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscriptionLineItems indicates an expected call of ListSubscriptionLineItems.
func (mr *MockQuerierMockRecorder) ListSubscriptionLineItems(ctx, subscriptionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptionLineItems", reflect.TypeOf((*MockQuerier)(nil).ListSubscriptionLineItems), ctx, subscriptionID)
}

// ListSubscriptions mocks base method.
func (m *MockQuerier) ListSubscriptions(ctx context.Context) ([]db.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptions", ctx)
	ret0, _ := ret[0].([]db.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscriptions indicates an expected call of ListSubscriptions.
func (mr *MockQuerierMockRecorder) ListSubscriptions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptions", reflect.TypeOf((*MockQuerier)(nil).ListSubscriptions), ctx)
}

// ListSubscriptionsByCustomer mocks base method.
func (m *MockQuerier) ListSubscriptionsByCustomer(ctx context.Context, arg db.ListSubscriptionsByCustomerParams) ([]db.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptionsByCustomer", ctx, arg)
	ret0, _ := ret[0].([]db.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscriptionsByCustomer indicates an expected call of ListSubscriptionsByCustomer.
func (mr *MockQuerierMockRecorder) ListSubscriptionsByCustomer(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptionsByCustomer", reflect.TypeOf((*MockQuerier)(nil).ListSubscriptionsByCustomer), ctx, arg)
}

// ListSubscriptionsByProduct mocks base method.
func (m *MockQuerier) ListSubscriptionsByProduct(ctx context.Context, arg db.ListSubscriptionsByProductParams) ([]db.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptionsByProduct", ctx, arg)
	ret0, _ := ret[0].([]db.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscriptionsByProduct indicates an expected call of ListSubscriptionsByProduct.
func (mr *MockQuerierMockRecorder) ListSubscriptionsByProduct(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptionsByProduct", reflect.TypeOf((*MockQuerier)(nil).ListSubscriptionsByProduct), ctx, arg)
}

// ListSubscriptionsDueForRedemption mocks base method.
func (m *MockQuerier) ListSubscriptionsDueForRedemption(ctx context.Context, nextRedemptionDate pgtype.Timestamptz) ([]db.ListSubscriptionsDueForRedemptionRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptionsDueForRedemption", ctx, nextRedemptionDate)
	ret0, _ := ret[0].([]db.ListSubscriptionsDueForRedemptionRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscriptionsDueForRedemption indicates an expected call of ListSubscriptionsDueForRedemption.
func (mr *MockQuerierMockRecorder) ListSubscriptionsDueForRedemption(ctx, nextRedemptionDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptionsDueForRedemption", reflect.TypeOf((*MockQuerier)(nil).ListSubscriptionsDueForRedemption), ctx, nextRedemptionDate)
}

// ListSubscriptionsWithPagination mocks base method.
func (m *MockQuerier) ListSubscriptionsWithPagination(ctx context.Context, arg db.ListSubscriptionsWithPaginationParams) ([]db.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptionsWithPagination", ctx, arg)
	ret0, _ := ret[0].([]db.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscriptionsWithPagination indicates an expected call of ListSubscriptionsWithPagination.
func (mr *MockQuerierMockRecorder) ListSubscriptionsWithPagination(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptionsWithPagination", reflect.TypeOf((*MockQuerier)(nil).ListSubscriptionsWithPagination), ctx, arg)
}

// ListSyncEventsByEntityType mocks base method.
func (m *MockQuerier) ListSyncEventsByEntityType(ctx context.Context, arg db.ListSyncEventsByEntityTypeParams) ([]db.PaymentSyncEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSyncEventsByEntityType", ctx, arg)
	ret0, _ := ret[0].([]db.PaymentSyncEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSyncEventsByEntityType indicates an expected call of ListSyncEventsByEntityType.
func (mr *MockQuerierMockRecorder) ListSyncEventsByEntityType(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSyncEventsByEntityType", reflect.TypeOf((*MockQuerier)(nil).ListSyncEventsByEntityType), ctx, arg)
}

// ListSyncEventsByEventType mocks base method.
func (m *MockQuerier) ListSyncEventsByEventType(ctx context.Context, arg db.ListSyncEventsByEventTypeParams) ([]db.PaymentSyncEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSyncEventsByEventType", ctx, arg)
	ret0, _ := ret[0].([]db.PaymentSyncEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSyncEventsByEventType indicates an expected call of ListSyncEventsByEventType.
func (mr *MockQuerierMockRecorder) ListSyncEventsByEventType(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSyncEventsByEventType", reflect.TypeOf((*MockQuerier)(nil).ListSyncEventsByEventType), ctx, arg)
}

// ListSyncEventsByProvider mocks base method.
func (m *MockQuerier) ListSyncEventsByProvider(ctx context.Context, arg db.ListSyncEventsByProviderParams) ([]db.PaymentSyncEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSyncEventsByProvider", ctx, arg)
	ret0, _ := ret[0].([]db.PaymentSyncEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSyncEventsByProvider indicates an expected call of ListSyncEventsByProvider.
func (mr *MockQuerierMockRecorder) ListSyncEventsByProvider(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSyncEventsByProvider", reflect.TypeOf((*MockQuerier)(nil).ListSyncEventsByProvider), ctx, arg)
}

// ListSyncEventsBySession mocks base method.
func (m *MockQuerier) ListSyncEventsBySession(ctx context.Context, arg db.ListSyncEventsBySessionParams) ([]db.PaymentSyncEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSyncEventsBySession", ctx, arg)
	ret0, _ := ret[0].([]db.PaymentSyncEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSyncEventsBySession indicates an expected call of ListSyncEventsBySession.
func (mr *MockQuerierMockRecorder) ListSyncEventsBySession(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSyncEventsBySession", reflect.TypeOf((*MockQuerier)(nil).ListSyncEventsBySession), ctx, arg)
}

// ListSyncSessions mocks base method.
func (m *MockQuerier) ListSyncSessions(ctx context.Context, arg db.ListSyncSessionsParams) ([]db.PaymentSyncSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSyncSessions", ctx, arg)
	ret0, _ := ret[0].([]db.PaymentSyncSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSyncSessions indicates an expected call of ListSyncSessions.
func (mr *MockQuerierMockRecorder) ListSyncSessions(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSyncSessions", reflect.TypeOf((*MockQuerier)(nil).ListSyncSessions), ctx, arg)
}

// ListSyncSessionsByProvider mocks base method.
func (m *MockQuerier) ListSyncSessionsByProvider(ctx context.Context, arg db.ListSyncSessionsByProviderParams) ([]db.PaymentSyncSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSyncSessionsByProvider", ctx, arg)
	ret0, _ := ret[0].([]db.PaymentSyncSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSyncSessionsByProvider indicates an expected call of ListSyncSessionsByProvider.
func (mr *MockQuerierMockRecorder) ListSyncSessionsByProvider(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSyncSessionsByProvider", reflect.TypeOf((*MockQuerier)(nil).ListSyncSessionsByProvider), ctx, arg)
}

// ListSyncSessionsByStatus mocks base method.
func (m *MockQuerier) ListSyncSessionsByStatus(ctx context.Context, arg db.ListSyncSessionsByStatusParams) ([]db.PaymentSyncSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSyncSessionsByStatus", ctx, arg)
	ret0, _ := ret[0].([]db.PaymentSyncSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSyncSessionsByStatus indicates an expected call of ListSyncSessionsByStatus.
func (mr *MockQuerierMockRecorder) ListSyncSessionsByStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSyncSessionsByStatus", reflect.TypeOf((*MockQuerier)(nil).ListSyncSessionsByStatus), ctx, arg)
}

// ListTokens mocks base method.
func (m *MockQuerier) ListTokens(ctx context.Context) ([]db.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTokens", ctx)
	ret0, _ := ret[0].([]db.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTokens indicates an expected call of ListTokens.
func (mr *MockQuerierMockRecorder) ListTokens(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTokens", reflect.TypeOf((*MockQuerier)(nil).ListTokens), ctx)
}

// ListTokensByNetwork mocks base method.
func (m *MockQuerier) ListTokensByNetwork(ctx context.Context, networkID uuid.UUID) ([]db.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTokensByNetwork", ctx, networkID)
	ret0, _ := ret[0].([]db.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTokensByNetwork indicates an expected call of ListTokensByNetwork.
func (mr *MockQuerierMockRecorder) ListTokensByNetwork(ctx, networkID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTokensByNetwork", reflect.TypeOf((*MockQuerier)(nil).ListTokensByNetwork), ctx, networkID)
}

// ListUsers mocks base method.
func (m *MockQuerier) ListUsers(ctx context.Context) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockQuerierMockRecorder) ListUsers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockQuerier)(nil).ListUsers), ctx)
}

// ListUsersByAccount mocks base method.
func (m *MockQuerier) ListUsersByAccount(ctx context.Context, accountID uuid.UUID) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsersByAccount", ctx, accountID)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsersByAccount indicates an expected call of ListUsersByAccount.
func (mr *MockQuerierMockRecorder) ListUsersByAccount(ctx, accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersByAccount", reflect.TypeOf((*MockQuerier)(nil).ListUsersByAccount), ctx, accountID)
}

// ListWalletsByAddress mocks base method.
func (m *MockQuerier) ListWalletsByAddress(ctx context.Context, arg db.ListWalletsByAddressParams) ([]db.ListWalletsByAddressRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWalletsByAddress", ctx, arg)
	ret0, _ := ret[0].([]db.ListWalletsByAddressRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWalletsByAddress indicates an expected call of ListWalletsByAddress.
func (mr *MockQuerierMockRecorder) ListWalletsByAddress(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWalletsByAddress", reflect.TypeOf((*MockQuerier)(nil).ListWalletsByAddress), ctx, arg)
}

// ListWalletsByNetworkType mocks base method.
func (m *MockQuerier) ListWalletsByNetworkType(ctx context.Context, arg db.ListWalletsByNetworkTypeParams) ([]db.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWalletsByNetworkType", ctx, arg)
	ret0, _ := ret[0].([]db.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWalletsByNetworkType indicates an expected call of ListWalletsByNetworkType.
func (mr *MockQuerierMockRecorder) ListWalletsByNetworkType(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWalletsByNetworkType", reflect.TypeOf((*MockQuerier)(nil).ListWalletsByNetworkType), ctx, arg)
}

// ListWalletsByWalletType mocks base method.
func (m *MockQuerier) ListWalletsByWalletType(ctx context.Context, arg db.ListWalletsByWalletTypeParams) ([]db.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWalletsByWalletType", ctx, arg)
	ret0, _ := ret[0].([]db.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWalletsByWalletType indicates an expected call of ListWalletsByWalletType.
func (mr *MockQuerierMockRecorder) ListWalletsByWalletType(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWalletsByWalletType", reflect.TypeOf((*MockQuerier)(nil).ListWalletsByWalletType), ctx, arg)
}

// ListWalletsByWorkspaceID mocks base method.
func (m *MockQuerier) ListWalletsByWorkspaceID(ctx context.Context, workspaceID uuid.UUID) ([]db.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWalletsByWorkspaceID", ctx, workspaceID)
	ret0, _ := ret[0].([]db.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWalletsByWorkspaceID indicates an expected call of ListWalletsByWorkspaceID.
func (mr *MockQuerierMockRecorder) ListWalletsByWorkspaceID(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWalletsByWorkspaceID", reflect.TypeOf((*MockQuerier)(nil).ListWalletsByWorkspaceID), ctx, workspaceID)
}

// ListWalletsWithCircleDataByNetworkType mocks base method.
func (m *MockQuerier) ListWalletsWithCircleDataByNetworkType(ctx context.Context, arg db.ListWalletsWithCircleDataByNetworkTypeParams) ([]db.ListWalletsWithCircleDataByNetworkTypeRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWalletsWithCircleDataByNetworkType", ctx, arg)
	ret0, _ := ret[0].([]db.ListWalletsWithCircleDataByNetworkTypeRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWalletsWithCircleDataByNetworkType indicates an expected call of ListWalletsWithCircleDataByNetworkType.
func (mr *MockQuerierMockRecorder) ListWalletsWithCircleDataByNetworkType(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWalletsWithCircleDataByNetworkType", reflect.TypeOf((*MockQuerier)(nil).ListWalletsWithCircleDataByNetworkType), ctx, arg)
}

// ListWalletsWithCircleDataByWorkspaceID mocks base method.
func (m *MockQuerier) ListWalletsWithCircleDataByWorkspaceID(ctx context.Context, workspaceID uuid.UUID) ([]db.ListWalletsWithCircleDataByWorkspaceIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWalletsWithCircleDataByWorkspaceID", ctx, workspaceID)
	ret0, _ := ret[0].([]db.ListWalletsWithCircleDataByWorkspaceIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWalletsWithCircleDataByWorkspaceID indicates an expected call of ListWalletsWithCircleDataByWorkspaceID.
func (mr *MockQuerierMockRecorder) ListWalletsWithCircleDataByWorkspaceID(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWalletsWithCircleDataByWorkspaceID", reflect.TypeOf((*MockQuerier)(nil).ListWalletsWithCircleDataByWorkspaceID), ctx, workspaceID)
}

// ListWebhookEventsByProvider mocks base method.
func (m *MockQuerier) ListWebhookEventsByProvider(ctx context.Context, arg db.ListWebhookEventsByProviderParams) ([]db.PaymentSyncEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWebhookEventsByProvider", ctx, arg)
	ret0, _ := ret[0].([]db.PaymentSyncEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWebhookEventsByProvider indicates an expected call of ListWebhookEventsByProvider.
func (mr *MockQuerierMockRecorder) ListWebhookEventsByProvider(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWebhookEventsByProvider", reflect.TypeOf((*MockQuerier)(nil).ListWebhookEventsByProvider), ctx, arg)
}

// ListWorkspaceCustomers mocks base method.
func (m *MockQuerier) ListWorkspaceCustomers(ctx context.Context, workspaceID uuid.UUID) ([]db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkspaceCustomers", ctx, workspaceID)
	ret0, _ := ret[0].([]db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkspaceCustomers indicates an expected call of ListWorkspaceCustomers.
func (mr *MockQuerierMockRecorder) ListWorkspaceCustomers(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspaceCustomers", reflect.TypeOf((*MockQuerier)(nil).ListWorkspaceCustomers), ctx, workspaceID)
}

// ListWorkspaceCustomersWithInfo mocks base method.
func (m *MockQuerier) ListWorkspaceCustomersWithInfo(ctx context.Context, workspaceID uuid.UUID) ([]db.ListWorkspaceCustomersWithInfoRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkspaceCustomersWithInfo", ctx, workspaceID)
	ret0, _ := ret[0].([]db.ListWorkspaceCustomersWithInfoRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkspaceCustomersWithInfo indicates an expected call of ListWorkspaceCustomersWithInfo.
func (mr *MockQuerierMockRecorder) ListWorkspaceCustomersWithInfo(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspaceCustomersWithInfo", reflect.TypeOf((*MockQuerier)(nil).ListWorkspaceCustomersWithInfo), ctx, workspaceID)
}

// ListWorkspaceCustomersWithPagination mocks base method.
func (m *MockQuerier) ListWorkspaceCustomersWithPagination(ctx context.Context, arg db.ListWorkspaceCustomersWithPaginationParams) ([]db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkspaceCustomersWithPagination", ctx, arg)
	ret0, _ := ret[0].([]db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkspaceCustomersWithPagination indicates an expected call of ListWorkspaceCustomersWithPagination.
func (mr *MockQuerierMockRecorder) ListWorkspaceCustomersWithPagination(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspaceCustomersWithPagination", reflect.TypeOf((*MockQuerier)(nil).ListWorkspaceCustomersWithPagination), ctx, arg)
}

// ListWorkspaceCustomersWithRevenue mocks base method.
func (m *MockQuerier) ListWorkspaceCustomersWithRevenue(ctx context.Context, arg db.ListWorkspaceCustomersWithRevenueParams) ([]db.ListWorkspaceCustomersWithRevenueRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkspaceCustomersWithRevenue", ctx, arg)
	ret0, _ := ret[0].([]db.ListWorkspaceCustomersWithRevenueRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkspaceCustomersWithRevenue indicates an expected call of ListWorkspaceCustomersWithRevenue.
func (mr *MockQuerierMockRecorder) ListWorkspaceCustomersWithRevenue(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspaceCustomersWithRevenue", reflect.TypeOf((*MockQuerier)(nil).ListWorkspaceCustomersWithRevenue), ctx, arg)
}

// ListWorkspacePaymentConfigurations mocks base method.
func (m *MockQuerier) ListWorkspacePaymentConfigurations(ctx context.Context, arg db.ListWorkspacePaymentConfigurationsParams) ([]db.WorkspacePaymentConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkspacePaymentConfigurations", ctx, arg)
	ret0, _ := ret[0].([]db.WorkspacePaymentConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkspacePaymentConfigurations indicates an expected call of ListWorkspacePaymentConfigurations.
func (mr *MockQuerierMockRecorder) ListWorkspacePaymentConfigurations(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspacePaymentConfigurations", reflect.TypeOf((*MockQuerier)(nil).ListWorkspacePaymentConfigurations), ctx, arg)
}

// ListWorkspacePaymentConfigurationsByProvider mocks base method.
func (m *MockQuerier) ListWorkspacePaymentConfigurationsByProvider(ctx context.Context, providerName string) ([]db.WorkspacePaymentConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkspacePaymentConfigurationsByProvider", ctx, providerName)
	ret0, _ := ret[0].([]db.WorkspacePaymentConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkspacePaymentConfigurationsByProvider indicates an expected call of ListWorkspacePaymentConfigurationsByProvider.
func (mr *MockQuerierMockRecorder) ListWorkspacePaymentConfigurationsByProvider(ctx, providerName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspacePaymentConfigurationsByProvider", reflect.TypeOf((*MockQuerier)(nil).ListWorkspacePaymentConfigurationsByProvider), ctx, providerName)
}

// ListWorkspaceSupportedCurrencies mocks base method.
func (m *MockQuerier) ListWorkspaceSupportedCurrencies(ctx context.Context, id uuid.UUID) ([]db.FiatCurrency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkspaceSupportedCurrencies", ctx, id)
	ret0, _ := ret[0].([]db.FiatCurrency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkspaceSupportedCurrencies indicates an expected call of ListWorkspaceSupportedCurrencies.
func (mr *MockQuerierMockRecorder) ListWorkspaceSupportedCurrencies(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspaceSupportedCurrencies", reflect.TypeOf((*MockQuerier)(nil).ListWorkspaceSupportedCurrencies), ctx, id)
}

// ListWorkspaces mocks base method.
func (m *MockQuerier) ListWorkspaces(ctx context.Context) ([]db.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkspaces", ctx)
	ret0, _ := ret[0].([]db.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkspaces indicates an expected call of ListWorkspaces.
func (mr *MockQuerierMockRecorder) ListWorkspaces(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspaces", reflect.TypeOf((*MockQuerier)(nil).ListWorkspaces), ctx)
}

// ListWorkspacesByAccountID mocks base method.
func (m *MockQuerier) ListWorkspacesByAccountID(ctx context.Context, accountID uuid.UUID) ([]db.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkspacesByAccountID", ctx, accountID)
	ret0, _ := ret[0].([]db.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkspacesByAccountID indicates an expected call of ListWorkspacesByAccountID.
func (mr *MockQuerierMockRecorder) ListWorkspacesByAccountID(ctx, accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspacesByAccountID", reflect.TypeOf((*MockQuerier)(nil).ListWorkspacesByAccountID), ctx, accountID)
}

// LockSubscriptionForProcessing mocks base method.
func (m *MockQuerier) LockSubscriptionForProcessing(ctx context.Context, id uuid.UUID) (db.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockSubscriptionForProcessing", ctx, id)
	ret0, _ := ret[0].(db.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LockSubscriptionForProcessing indicates an expected call of LockSubscriptionForProcessing.
func (mr *MockQuerierMockRecorder) LockSubscriptionForProcessing(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockSubscriptionForProcessing", reflect.TypeOf((*MockQuerier)(nil).LockSubscriptionForProcessing), ctx, id)
}

// LogDLQProcessingAttempt mocks base method.
func (m *MockQuerier) LogDLQProcessingAttempt(ctx context.Context, arg db.LogDLQProcessingAttemptParams) (db.PaymentSyncEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogDLQProcessingAttempt", ctx, arg)
	ret0, _ := ret[0].(db.PaymentSyncEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogDLQProcessingAttempt indicates an expected call of LogDLQProcessingAttempt.
func (mr *MockQuerierMockRecorder) LogDLQProcessingAttempt(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogDLQProcessingAttempt", reflect.TypeOf((*MockQuerier)(nil).LogDLQProcessingAttempt), ctx, arg)
}

// LogWebhookReceived mocks base method.
func (m *MockQuerier) LogWebhookReceived(ctx context.Context, arg db.LogWebhookReceivedParams) (db.PaymentSyncEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogWebhookReceived", ctx, arg)
	ret0, _ := ret[0].(db.PaymentSyncEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogWebhookReceived indicates an expected call of LogWebhookReceived.
func (mr *MockQuerierMockRecorder) LogWebhookReceived(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogWebhookReceived", reflect.TypeOf((*MockQuerier)(nil).LogWebhookReceived), ctx, arg)
}

// MarkCustomerWalletAsPrimary mocks base method.
func (m *MockQuerier) MarkCustomerWalletAsPrimary(ctx context.Context, id uuid.UUID) (db.CustomerWallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkCustomerWalletAsPrimary", ctx, id)
	ret0, _ := ret[0].(db.CustomerWallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkCustomerWalletAsPrimary indicates an expected call of MarkCustomerWalletAsPrimary.
func (mr *MockQuerierMockRecorder) MarkCustomerWalletAsPrimary(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkCustomerWalletAsPrimary", reflect.TypeOf((*MockQuerier)(nil).MarkCustomerWalletAsPrimary), ctx, id)
}

// MarkInvoicePaid mocks base method.
func (m *MockQuerier) MarkInvoicePaid(ctx context.Context, arg db.MarkInvoicePaidParams) (db.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkInvoicePaid", ctx, arg)
	ret0, _ := ret[0].(db.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkInvoicePaid indicates an expected call of MarkInvoicePaid.
func (mr *MockQuerierMockRecorder) MarkInvoicePaid(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkInvoicePaid", reflect.TypeOf((*MockQuerier)(nil).MarkInvoicePaid), ctx, arg)
}

// MarkWebhookForRetry mocks base method.
func (m *MockQuerier) MarkWebhookForRetry(ctx context.Context, id uuid.UUID) (db.PaymentSyncEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkWebhookForRetry", ctx, id)
	ret0, _ := ret[0].(db.PaymentSyncEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkWebhookForRetry indicates an expected call of MarkWebhookForRetry.
func (mr *MockQuerierMockRecorder) MarkWebhookForRetry(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkWebhookForRetry", reflect.TypeOf((*MockQuerier)(nil).MarkWebhookForRetry), ctx, id)
}

// PauseDunningCampaign mocks base method.
func (m *MockQuerier) PauseDunningCampaign(ctx context.Context, id uuid.UUID) (db.DunningCampaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PauseDunningCampaign", ctx, id)
	ret0, _ := ret[0].(db.DunningCampaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PauseDunningCampaign indicates an expected call of PauseDunningCampaign.
func (mr *MockQuerierMockRecorder) PauseDunningCampaign(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PauseDunningCampaign", reflect.TypeOf((*MockQuerier)(nil).PauseDunningCampaign), ctx, id)
}

// PauseSubscription mocks base method.
func (m *MockQuerier) PauseSubscription(ctx context.Context, arg db.PauseSubscriptionParams) (db.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PauseSubscription", ctx, arg)
	ret0, _ := ret[0].(db.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PauseSubscription indicates an expected call of PauseSubscription.
func (mr *MockQuerierMockRecorder) PauseSubscription(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PauseSubscription", reflect.TypeOf((*MockQuerier)(nil).PauseSubscription), ctx, arg)
}

// ReactivateScheduledCancellation mocks base method.
func (m *MockQuerier) ReactivateScheduledCancellation(ctx context.Context, id uuid.UUID) (db.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReactivateScheduledCancellation", ctx, id)
	ret0, _ := ret[0].(db.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReactivateScheduledCancellation indicates an expected call of ReactivateScheduledCancellation.
func (mr *MockQuerierMockRecorder) ReactivateScheduledCancellation(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReactivateScheduledCancellation", reflect.TypeOf((*MockQuerier)(nil).ReactivateScheduledCancellation), ctx, id)
}

// RecordInvoiceCreation mocks base method.
func (m *MockQuerier) RecordInvoiceCreation(ctx context.Context, arg db.RecordInvoiceCreationParams) (db.InvoiceActivity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordInvoiceCreation", ctx, arg)
	ret0, _ := ret[0].(db.InvoiceActivity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecordInvoiceCreation indicates an expected call of RecordInvoiceCreation.
func (mr *MockQuerierMockRecorder) RecordInvoiceCreation(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordInvoiceCreation", reflect.TypeOf((*MockQuerier)(nil).RecordInvoiceCreation), ctx, arg)
}

// RecordInvoiceReminder mocks base method.
func (m *MockQuerier) RecordInvoiceReminder(ctx context.Context, arg db.RecordInvoiceReminderParams) (db.InvoiceActivity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordInvoiceReminder", ctx, arg)
	ret0, _ := ret[0].(db.InvoiceActivity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecordInvoiceReminder indicates an expected call of RecordInvoiceReminder.
func (mr *MockQuerierMockRecorder) RecordInvoiceReminder(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordInvoiceReminder", reflect.TypeOf((*MockQuerier)(nil).RecordInvoiceReminder), ctx, arg)
}

// RecordInvoiceStatusChange mocks base method.
func (m *MockQuerier) RecordInvoiceStatusChange(ctx context.Context, arg db.RecordInvoiceStatusChangeParams) (db.InvoiceActivity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordInvoiceStatusChange", ctx, arg)
	ret0, _ := ret[0].(db.InvoiceActivity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecordInvoiceStatusChange indicates an expected call of RecordInvoiceStatusChange.
func (mr *MockQuerierMockRecorder) RecordInvoiceStatusChange(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordInvoiceStatusChange", reflect.TypeOf((*MockQuerier)(nil).RecordInvoiceStatusChange), ctx, arg)
}

// RecordStateChange mocks base method.
func (m *MockQuerier) RecordStateChange(ctx context.Context, arg db.RecordStateChangeParams) (db.SubscriptionStateHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordStateChange", ctx, arg)
	ret0, _ := ret[0].(db.SubscriptionStateHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecordStateChange indicates an expected call of RecordStateChange.
func (mr *MockQuerierMockRecorder) RecordStateChange(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordStateChange", reflect.TypeOf((*MockQuerier)(nil).RecordStateChange), ctx, arg)
}

// RecoverDunningCampaign mocks base method.
func (m *MockQuerier) RecoverDunningCampaign(ctx context.Context, arg db.RecoverDunningCampaignParams) (db.DunningCampaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecoverDunningCampaign", ctx, arg)
	ret0, _ := ret[0].(db.DunningCampaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecoverDunningCampaign indicates an expected call of RecoverDunningCampaign.
func (mr *MockQuerierMockRecorder) RecoverDunningCampaign(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecoverDunningCampaign", reflect.TypeOf((*MockQuerier)(nil).RecoverDunningCampaign), ctx, arg)
}

// RefundPayment mocks base method.
func (m *MockQuerier) RefundPayment(ctx context.Context, arg db.RefundPaymentParams) (db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefundPayment", ctx, arg)
	ret0, _ := ret[0].(db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefundPayment indicates an expected call of RefundPayment.
func (mr *MockQuerierMockRecorder) RefundPayment(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefundPayment", reflect.TypeOf((*MockQuerier)(nil).RefundPayment), ctx, arg)
}

// RemoveCustomerFromWorkspace mocks base method.
func (m *MockQuerier) RemoveCustomerFromWorkspace(ctx context.Context, arg db.RemoveCustomerFromWorkspaceParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCustomerFromWorkspace", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCustomerFromWorkspace indicates an expected call of RemoveCustomerFromWorkspace.
func (mr *MockQuerierMockRecorder) RemoveCustomerFromWorkspace(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCustomerFromWorkspace", reflect.TypeOf((*MockQuerier)(nil).RemoveCustomerFromWorkspace), ctx, arg)
}

// RemoveWorkspaceSupportedCurrency mocks base method.
func (m *MockQuerier) RemoveWorkspaceSupportedCurrency(ctx context.Context, arg db.RemoveWorkspaceSupportedCurrencyParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveWorkspaceSupportedCurrency", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveWorkspaceSupportedCurrency indicates an expected call of RemoveWorkspaceSupportedCurrency.
func (mr *MockQuerierMockRecorder) RemoveWorkspaceSupportedCurrency(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveWorkspaceSupportedCurrency", reflect.TypeOf((*MockQuerier)(nil).RemoveWorkspaceSupportedCurrency), ctx, arg)
}

// ReplayWebhookEvent mocks base method.
func (m *MockQuerier) ReplayWebhookEvent(ctx context.Context, arg db.ReplayWebhookEventParams) (db.PaymentSyncEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplayWebhookEvent", ctx, arg)
	ret0, _ := ret[0].(db.PaymentSyncEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplayWebhookEvent indicates an expected call of ReplayWebhookEvent.
func (mr *MockQuerierMockRecorder) ReplayWebhookEvent(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplayWebhookEvent", reflect.TypeOf((*MockQuerier)(nil).ReplayWebhookEvent), ctx, arg)
}

// ResetGasSponsorshipMonthlySpending mocks base method.
func (m *MockQuerier) ResetGasSponsorshipMonthlySpending(ctx context.Context, arg db.ResetGasSponsorshipMonthlySpendingParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetGasSponsorshipMonthlySpending", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetGasSponsorshipMonthlySpending indicates an expected call of ResetGasSponsorshipMonthlySpending.
func (mr *MockQuerierMockRecorder) ResetGasSponsorshipMonthlySpending(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetGasSponsorshipMonthlySpending", reflect.TypeOf((*MockQuerier)(nil).ResetGasSponsorshipMonthlySpending), ctx, arg)
}

// ResumeDunningCampaign mocks base method.
func (m *MockQuerier) ResumeDunningCampaign(ctx context.Context, arg db.ResumeDunningCampaignParams) (db.DunningCampaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeDunningCampaign", ctx, arg)
	ret0, _ := ret[0].(db.DunningCampaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResumeDunningCampaign indicates an expected call of ResumeDunningCampaign.
func (mr *MockQuerierMockRecorder) ResumeDunningCampaign(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeDunningCampaign", reflect.TypeOf((*MockQuerier)(nil).ResumeDunningCampaign), ctx, arg)
}

// ResumeSubscription mocks base method.
func (m *MockQuerier) ResumeSubscription(ctx context.Context, arg db.ResumeSubscriptionParams) (db.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeSubscription", ctx, arg)
	ret0, _ := ret[0].(db.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResumeSubscription indicates an expected call of ResumeSubscription.
func (mr *MockQuerierMockRecorder) ResumeSubscription(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeSubscription", reflect.TypeOf((*MockQuerier)(nil).ResumeSubscription), ctx, arg)
}

// ResumeSyncSession mocks base method.
func (m *MockQuerier) ResumeSyncSession(ctx context.Context, arg db.ResumeSyncSessionParams) (db.PaymentSyncSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeSyncSession", ctx, arg)
	ret0, _ := ret[0].(db.PaymentSyncSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResumeSyncSession indicates an expected call of ResumeSyncSession.
func (mr *MockQuerierMockRecorder) ResumeSyncSession(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeSyncSession", reflect.TypeOf((*MockQuerier)(nil).ResumeSyncSession), ctx, arg)
}

// ScheduleSubscriptionCancellation mocks base method.
func (m *MockQuerier) ScheduleSubscriptionCancellation(ctx context.Context, arg db.ScheduleSubscriptionCancellationParams) (db.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleSubscriptionCancellation", ctx, arg)
	ret0, _ := ret[0].(db.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleSubscriptionCancellation indicates an expected call of ScheduleSubscriptionCancellation.
func (mr *MockQuerierMockRecorder) ScheduleSubscriptionCancellation(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleSubscriptionCancellation", reflect.TypeOf((*MockQuerier)(nil).ScheduleSubscriptionCancellation), ctx, arg)
}

// SearchAccounts mocks base method.
func (m *MockQuerier) SearchAccounts(ctx context.Context, arg db.SearchAccountsParams) ([]db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAccounts", ctx, arg)
	ret0, _ := ret[0].([]db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchAccounts indicates an expected call of SearchAccounts.
func (mr *MockQuerierMockRecorder) SearchAccounts(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAccounts", reflect.TypeOf((*MockQuerier)(nil).SearchAccounts), ctx, arg)
}

// SearchWallets mocks base method.
func (m *MockQuerier) SearchWallets(ctx context.Context, arg db.SearchWalletsParams) ([]db.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchWallets", ctx, arg)
	ret0, _ := ret[0].([]db.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchWallets indicates an expected call of SearchWallets.
func (mr *MockQuerierMockRecorder) SearchWallets(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchWallets", reflect.TypeOf((*MockQuerier)(nil).SearchWallets), ctx, arg)
}

// SearchWalletsWithCircleData mocks base method.
func (m *MockQuerier) SearchWalletsWithCircleData(ctx context.Context, arg db.SearchWalletsWithCircleDataParams) ([]db.SearchWalletsWithCircleDataRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchWalletsWithCircleData", ctx, arg)
	ret0, _ := ret[0].([]db.SearchWalletsWithCircleDataRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchWalletsWithCircleData indicates an expected call of SearchWalletsWithCircleData.
func (mr *MockQuerierMockRecorder) SearchWalletsWithCircleData(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchWalletsWithCircleData", reflect.TypeOf((*MockQuerier)(nil).SearchWalletsWithCircleData), ctx, arg)
}

// SetDefaultDunningConfiguration mocks base method.
func (m *MockQuerier) SetDefaultDunningConfiguration(ctx context.Context, arg db.SetDefaultDunningConfigurationParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDefaultDunningConfiguration", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDefaultDunningConfiguration indicates an expected call of SetDefaultDunningConfiguration.
func (mr *MockQuerierMockRecorder) SetDefaultDunningConfiguration(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultDunningConfiguration", reflect.TypeOf((*MockQuerier)(nil).SetDefaultDunningConfiguration), ctx, arg)
}

// SetWalletAsPrimary mocks base method.
func (m *MockQuerier) SetWalletAsPrimary(ctx context.Context, arg db.SetWalletAsPrimaryParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWalletAsPrimary", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetWalletAsPrimary indicates an expected call of SetWalletAsPrimary.
func (mr *MockQuerierMockRecorder) SetWalletAsPrimary(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWalletAsPrimary", reflect.TypeOf((*MockQuerier)(nil).SetWalletAsPrimary), ctx, arg)
}

// SoftDeleteWallet mocks base method.
func (m *MockQuerier) SoftDeleteWallet(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftDeleteWallet", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SoftDeleteWallet indicates an expected call of SoftDeleteWallet.
func (mr *MockQuerierMockRecorder) SoftDeleteWallet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftDeleteWallet", reflect.TypeOf((*MockQuerier)(nil).SoftDeleteWallet), ctx, id)
}

// UnsetPrimaryForCustomerWallets mocks base method.
func (m *MockQuerier) UnsetPrimaryForCustomerWallets(ctx context.Context, arg db.UnsetPrimaryForCustomerWalletsParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnsetPrimaryForCustomerWallets", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnsetPrimaryForCustomerWallets indicates an expected call of UnsetPrimaryForCustomerWallets.
func (mr *MockQuerierMockRecorder) UnsetPrimaryForCustomerWallets(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsetPrimaryForCustomerWallets", reflect.TypeOf((*MockQuerier)(nil).UnsetPrimaryForCustomerWallets), ctx, arg)
}

// UpdateAPIKey mocks base method.
func (m *MockQuerier) UpdateAPIKey(ctx context.Context, arg db.UpdateAPIKeyParams) (db.ApiKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAPIKey", ctx, arg)
	ret0, _ := ret[0].(db.ApiKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAPIKey indicates an expected call of UpdateAPIKey.
func (mr *MockQuerierMockRecorder) UpdateAPIKey(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAPIKey", reflect.TypeOf((*MockQuerier)(nil).UpdateAPIKey), ctx, arg)
}

// UpdateAPIKeyLastUsed mocks base method.
func (m *MockQuerier) UpdateAPIKeyLastUsed(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAPIKeyLastUsed", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAPIKeyLastUsed indicates an expected call of UpdateAPIKeyLastUsed.
func (mr *MockQuerierMockRecorder) UpdateAPIKeyLastUsed(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAPIKeyLastUsed", reflect.TypeOf((*MockQuerier)(nil).UpdateAPIKeyLastUsed), ctx, id)
}

// UpdateAccount mocks base method.
func (m *MockQuerier) UpdateAccount(ctx context.Context, arg db.UpdateAccountParams) (db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccount", ctx, arg)
	ret0, _ := ret[0].(db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccount indicates an expected call of UpdateAccount.
func (mr *MockQuerierMockRecorder) UpdateAccount(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockQuerier)(nil).UpdateAccount), ctx, arg)
}

// UpdateCircleUser mocks base method.
func (m *MockQuerier) UpdateCircleUser(ctx context.Context, arg db.UpdateCircleUserParams) (db.CircleUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCircleUser", ctx, arg)
	ret0, _ := ret[0].(db.CircleUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCircleUser indicates an expected call of UpdateCircleUser.
func (mr *MockQuerierMockRecorder) UpdateCircleUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCircleUser", reflect.TypeOf((*MockQuerier)(nil).UpdateCircleUser), ctx, arg)
}

// UpdateCircleUserByWorkspaceID mocks base method.
func (m *MockQuerier) UpdateCircleUserByWorkspaceID(ctx context.Context, arg db.UpdateCircleUserByWorkspaceIDParams) (db.CircleUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCircleUserByWorkspaceID", ctx, arg)
	ret0, _ := ret[0].(db.CircleUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCircleUserByWorkspaceID indicates an expected call of UpdateCircleUserByWorkspaceID.
func (mr *MockQuerierMockRecorder) UpdateCircleUserByWorkspaceID(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCircleUserByWorkspaceID", reflect.TypeOf((*MockQuerier)(nil).UpdateCircleUserByWorkspaceID), ctx, arg)
}

// UpdateCircleWalletState mocks base method.
func (m *MockQuerier) UpdateCircleWalletState(ctx context.Context, arg db.UpdateCircleWalletStateParams) (db.CircleWallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCircleWalletState", ctx, arg)
	ret0, _ := ret[0].(db.CircleWallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCircleWalletState indicates an expected call of UpdateCircleWalletState.
func (mr *MockQuerierMockRecorder) UpdateCircleWalletState(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCircleWalletState", reflect.TypeOf((*MockQuerier)(nil).UpdateCircleWalletState), ctx, arg)
}

// UpdateCustomer mocks base method.
func (m *MockQuerier) UpdateCustomer(ctx context.Context, arg db.UpdateCustomerParams) (db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomer", ctx, arg)
	ret0, _ := ret[0].(db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCustomer indicates an expected call of UpdateCustomer.
func (mr *MockQuerierMockRecorder) UpdateCustomer(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomer", reflect.TypeOf((*MockQuerier)(nil).UpdateCustomer), ctx, arg)
}

// UpdateCustomerBillingAddress mocks base method.
func (m *MockQuerier) UpdateCustomerBillingAddress(ctx context.Context, arg db.UpdateCustomerBillingAddressParams) (db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomerBillingAddress", ctx, arg)
	ret0, _ := ret[0].(db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCustomerBillingAddress indicates an expected call of UpdateCustomerBillingAddress.
func (mr *MockQuerierMockRecorder) UpdateCustomerBillingAddress(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomerBillingAddress", reflect.TypeOf((*MockQuerier)(nil).UpdateCustomerBillingAddress), ctx, arg)
}

// UpdateCustomerOnboardingStatus mocks base method.
func (m *MockQuerier) UpdateCustomerOnboardingStatus(ctx context.Context, arg db.UpdateCustomerOnboardingStatusParams) (db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomerOnboardingStatus", ctx, arg)
	ret0, _ := ret[0].(db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCustomerOnboardingStatus indicates an expected call of UpdateCustomerOnboardingStatus.
func (mr *MockQuerierMockRecorder) UpdateCustomerOnboardingStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomerOnboardingStatus", reflect.TypeOf((*MockQuerier)(nil).UpdateCustomerOnboardingStatus), ctx, arg)
}

// UpdateCustomerPaymentSyncStatus mocks base method.
func (m *MockQuerier) UpdateCustomerPaymentSyncStatus(ctx context.Context, arg db.UpdateCustomerPaymentSyncStatusParams) (db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomerPaymentSyncStatus", ctx, arg)
	ret0, _ := ret[0].(db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCustomerPaymentSyncStatus indicates an expected call of UpdateCustomerPaymentSyncStatus.
func (mr *MockQuerierMockRecorder) UpdateCustomerPaymentSyncStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomerPaymentSyncStatus", reflect.TypeOf((*MockQuerier)(nil).UpdateCustomerPaymentSyncStatus), ctx, arg)
}

// UpdateCustomerSyncStatus mocks base method.
func (m *MockQuerier) UpdateCustomerSyncStatus(ctx context.Context, arg db.UpdateCustomerSyncStatusParams) (db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomerSyncStatus", ctx, arg)
	ret0, _ := ret[0].(db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCustomerSyncStatus indicates an expected call of UpdateCustomerSyncStatus.
func (mr *MockQuerierMockRecorder) UpdateCustomerSyncStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomerSyncStatus", reflect.TypeOf((*MockQuerier)(nil).UpdateCustomerSyncStatus), ctx, arg)
}

// UpdateCustomerTaxInfo mocks base method.
func (m *MockQuerier) UpdateCustomerTaxInfo(ctx context.Context, arg db.UpdateCustomerTaxInfoParams) (db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomerTaxInfo", ctx, arg)
	ret0, _ := ret[0].(db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCustomerTaxInfo indicates an expected call of UpdateCustomerTaxInfo.
func (mr *MockQuerierMockRecorder) UpdateCustomerTaxInfo(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomerTaxInfo", reflect.TypeOf((*MockQuerier)(nil).UpdateCustomerTaxInfo), ctx, arg)
}

// UpdateCustomerWallet mocks base method.
func (m *MockQuerier) UpdateCustomerWallet(ctx context.Context, arg db.UpdateCustomerWalletParams) (db.CustomerWallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomerWallet", ctx, arg)
	ret0, _ := ret[0].(db.CustomerWallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCustomerWallet indicates an expected call of UpdateCustomerWallet.
func (mr *MockQuerierMockRecorder) UpdateCustomerWallet(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomerWallet", reflect.TypeOf((*MockQuerier)(nil).UpdateCustomerWallet), ctx, arg)
}

// UpdateCustomerWalletUsageTime mocks base method.
func (m *MockQuerier) UpdateCustomerWalletUsageTime(ctx context.Context, id uuid.UUID) (db.CustomerWallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomerWalletUsageTime", ctx, id)
	ret0, _ := ret[0].(db.CustomerWallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCustomerWalletUsageTime indicates an expected call of UpdateCustomerWalletUsageTime.
func (mr *MockQuerierMockRecorder) UpdateCustomerWalletUsageTime(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomerWalletUsageTime", reflect.TypeOf((*MockQuerier)(nil).UpdateCustomerWalletUsageTime), ctx, id)
}

// UpdateCustomerWithSync mocks base method.
func (m *MockQuerier) UpdateCustomerWithSync(ctx context.Context, arg db.UpdateCustomerWithSyncParams) (db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomerWithSync", ctx, arg)
	ret0, _ := ret[0].(db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCustomerWithSync indicates an expected call of UpdateCustomerWithSync.
func (mr *MockQuerierMockRecorder) UpdateCustomerWithSync(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomerWithSync", reflect.TypeOf((*MockQuerier)(nil).UpdateCustomerWithSync), ctx, arg)
}

// UpdateDelegationData mocks base method.
func (m *MockQuerier) UpdateDelegationData(ctx context.Context, arg db.UpdateDelegationDataParams) (db.DelegationDatum, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDelegationData", ctx, arg)
	ret0, _ := ret[0].(db.DelegationDatum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDelegationData indicates an expected call of UpdateDelegationData.
func (mr *MockQuerierMockRecorder) UpdateDelegationData(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDelegationData", reflect.TypeOf((*MockQuerier)(nil).UpdateDelegationData), ctx, arg)
}

// UpdateDunningAttempt mocks base method.
func (m *MockQuerier) UpdateDunningAttempt(ctx context.Context, arg db.UpdateDunningAttemptParams) (db.DunningAttempt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDunningAttempt", ctx, arg)
	ret0, _ := ret[0].(db.DunningAttempt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDunningAttempt indicates an expected call of UpdateDunningAttempt.
func (mr *MockQuerierMockRecorder) UpdateDunningAttempt(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDunningAttempt", reflect.TypeOf((*MockQuerier)(nil).UpdateDunningAttempt), ctx, arg)
}

// UpdateDunningCampaign mocks base method.
func (m *MockQuerier) UpdateDunningCampaign(ctx context.Context, arg db.UpdateDunningCampaignParams) (db.DunningCampaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDunningCampaign", ctx, arg)
	ret0, _ := ret[0].(db.DunningCampaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDunningCampaign indicates an expected call of UpdateDunningCampaign.
func (mr *MockQuerierMockRecorder) UpdateDunningCampaign(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDunningCampaign", reflect.TypeOf((*MockQuerier)(nil).UpdateDunningCampaign), ctx, arg)
}

// UpdateDunningConfiguration mocks base method.
func (m *MockQuerier) UpdateDunningConfiguration(ctx context.Context, arg db.UpdateDunningConfigurationParams) (db.DunningConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDunningConfiguration", ctx, arg)
	ret0, _ := ret[0].(db.DunningConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDunningConfiguration indicates an expected call of UpdateDunningConfiguration.
func (mr *MockQuerierMockRecorder) UpdateDunningConfiguration(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDunningConfiguration", reflect.TypeOf((*MockQuerier)(nil).UpdateDunningConfiguration), ctx, arg)
}

// UpdateDunningEmailTemplate mocks base method.
func (m *MockQuerier) UpdateDunningEmailTemplate(ctx context.Context, arg db.UpdateDunningEmailTemplateParams) (db.DunningEmailTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDunningEmailTemplate", ctx, arg)
	ret0, _ := ret[0].(db.DunningEmailTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDunningEmailTemplate indicates an expected call of UpdateDunningEmailTemplate.
func (mr *MockQuerierMockRecorder) UpdateDunningEmailTemplate(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDunningEmailTemplate", reflect.TypeOf((*MockQuerier)(nil).UpdateDunningEmailTemplate), ctx, arg)
}

// UpdateFiatCurrency mocks base method.
func (m *MockQuerier) UpdateFiatCurrency(ctx context.Context, arg db.UpdateFiatCurrencyParams) (db.FiatCurrency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFiatCurrency", ctx, arg)
	ret0, _ := ret[0].(db.FiatCurrency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFiatCurrency indicates an expected call of UpdateFiatCurrency.
func (mr *MockQuerierMockRecorder) UpdateFiatCurrency(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFiatCurrency", reflect.TypeOf((*MockQuerier)(nil).UpdateFiatCurrency), ctx, arg)
}

// UpdateGasSponsorshipConfig mocks base method.
func (m *MockQuerier) UpdateGasSponsorshipConfig(ctx context.Context, arg db.UpdateGasSponsorshipConfigParams) (db.GasSponsorshipConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGasSponsorshipConfig", ctx, arg)
	ret0, _ := ret[0].(db.GasSponsorshipConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGasSponsorshipConfig indicates an expected call of UpdateGasSponsorshipConfig.
func (mr *MockQuerierMockRecorder) UpdateGasSponsorshipConfig(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGasSponsorshipConfig", reflect.TypeOf((*MockQuerier)(nil).UpdateGasSponsorshipConfig), ctx, arg)
}

// UpdateGasSponsorshipSpending mocks base method.
func (m *MockQuerier) UpdateGasSponsorshipSpending(ctx context.Context, arg db.UpdateGasSponsorshipSpendingParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGasSponsorshipSpending", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGasSponsorshipSpending indicates an expected call of UpdateGasSponsorshipSpending.
func (mr *MockQuerierMockRecorder) UpdateGasSponsorshipSpending(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGasSponsorshipSpending", reflect.TypeOf((*MockQuerier)(nil).UpdateGasSponsorshipSpending), ctx, arg)
}

// UpdateInvoice mocks base method.
func (m *MockQuerier) UpdateInvoice(ctx context.Context, arg db.UpdateInvoiceParams) (db.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInvoice", ctx, arg)
	ret0, _ := ret[0].(db.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInvoice indicates an expected call of UpdateInvoice.
func (mr *MockQuerierMockRecorder) UpdateInvoice(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInvoice", reflect.TypeOf((*MockQuerier)(nil).UpdateInvoice), ctx, arg)
}

// UpdateInvoiceDetails mocks base method.
func (m *MockQuerier) UpdateInvoiceDetails(ctx context.Context, arg db.UpdateInvoiceDetailsParams) (db.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInvoiceDetails", ctx, arg)
	ret0, _ := ret[0].(db.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInvoiceDetails indicates an expected call of UpdateInvoiceDetails.
func (mr *MockQuerierMockRecorder) UpdateInvoiceDetails(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInvoiceDetails", reflect.TypeOf((*MockQuerier)(nil).UpdateInvoiceDetails), ctx, arg)
}

// UpdateInvoiceLineItem mocks base method.
func (m *MockQuerier) UpdateInvoiceLineItem(ctx context.Context, arg db.UpdateInvoiceLineItemParams) (db.InvoiceLineItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInvoiceLineItem", ctx, arg)
	ret0, _ := ret[0].(db.InvoiceLineItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInvoiceLineItem indicates an expected call of UpdateInvoiceLineItem.
func (mr *MockQuerierMockRecorder) UpdateInvoiceLineItem(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInvoiceLineItem", reflect.TypeOf((*MockQuerier)(nil).UpdateInvoiceLineItem), ctx, arg)
}

// UpdateInvoiceMetadata mocks base method.
func (m *MockQuerier) UpdateInvoiceMetadata(ctx context.Context, arg db.UpdateInvoiceMetadataParams) (db.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInvoiceMetadata", ctx, arg)
	ret0, _ := ret[0].(db.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInvoiceMetadata indicates an expected call of UpdateInvoiceMetadata.
func (mr *MockQuerierMockRecorder) UpdateInvoiceMetadata(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInvoiceMetadata", reflect.TypeOf((*MockQuerier)(nil).UpdateInvoiceMetadata), ctx, arg)
}

// UpdateInvoiceNotes mocks base method.
func (m *MockQuerier) UpdateInvoiceNotes(ctx context.Context, arg db.UpdateInvoiceNotesParams) (db.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInvoiceNotes", ctx, arg)
	ret0, _ := ret[0].(db.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInvoiceNotes indicates an expected call of UpdateInvoiceNotes.
func (mr *MockQuerierMockRecorder) UpdateInvoiceNotes(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInvoiceNotes", reflect.TypeOf((*MockQuerier)(nil).UpdateInvoiceNotes), ctx, arg)
}

// UpdateInvoiceNumber mocks base method.
func (m *MockQuerier) UpdateInvoiceNumber(ctx context.Context, arg db.UpdateInvoiceNumberParams) (db.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInvoiceNumber", ctx, arg)
	ret0, _ := ret[0].(db.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInvoiceNumber indicates an expected call of UpdateInvoiceNumber.
func (mr *MockQuerierMockRecorder) UpdateInvoiceNumber(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInvoiceNumber", reflect.TypeOf((*MockQuerier)(nil).UpdateInvoiceNumber), ctx, arg)
}

// UpdateInvoiceQRCode mocks base method.
func (m *MockQuerier) UpdateInvoiceQRCode(ctx context.Context, arg db.UpdateInvoiceQRCodeParams) (db.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInvoiceQRCode", ctx, arg)
	ret0, _ := ret[0].(db.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInvoiceQRCode indicates an expected call of UpdateInvoiceQRCode.
func (mr *MockQuerierMockRecorder) UpdateInvoiceQRCode(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInvoiceQRCode", reflect.TypeOf((*MockQuerier)(nil).UpdateInvoiceQRCode), ctx, arg)
}

// UpdateInvoiceStatus mocks base method.
func (m *MockQuerier) UpdateInvoiceStatus(ctx context.Context, arg db.UpdateInvoiceStatusParams) (db.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInvoiceStatus", ctx, arg)
	ret0, _ := ret[0].(db.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInvoiceStatus indicates an expected call of UpdateInvoiceStatus.
func (mr *MockQuerierMockRecorder) UpdateInvoiceStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInvoiceStatus", reflect.TypeOf((*MockQuerier)(nil).UpdateInvoiceStatus), ctx, arg)
}

// UpdateInvoiceSyncStatus mocks base method.
func (m *MockQuerier) UpdateInvoiceSyncStatus(ctx context.Context, arg db.UpdateInvoiceSyncStatusParams) (db.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInvoiceSyncStatus", ctx, arg)
	ret0, _ := ret[0].(db.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInvoiceSyncStatus indicates an expected call of UpdateInvoiceSyncStatus.
func (mr *MockQuerierMockRecorder) UpdateInvoiceSyncStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInvoiceSyncStatus", reflect.TypeOf((*MockQuerier)(nil).UpdateInvoiceSyncStatus), ctx, arg)
}

// UpdateLastWebhookTime mocks base method.
func (m *MockQuerier) UpdateLastWebhookTime(ctx context.Context, arg db.UpdateLastWebhookTimeParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastWebhookTime", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLastWebhookTime indicates an expected call of UpdateLastWebhookTime.
func (mr *MockQuerierMockRecorder) UpdateLastWebhookTime(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastWebhookTime", reflect.TypeOf((*MockQuerier)(nil).UpdateLastWebhookTime), ctx, arg)
}

// UpdateLineItemGasSponsorship mocks base method.
func (m *MockQuerier) UpdateLineItemGasSponsorship(ctx context.Context, arg db.UpdateLineItemGasSponsorshipParams) (db.InvoiceLineItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLineItemGasSponsorship", ctx, arg)
	ret0, _ := ret[0].(db.InvoiceLineItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLineItemGasSponsorship indicates an expected call of UpdateLineItemGasSponsorship.
func (mr *MockQuerierMockRecorder) UpdateLineItemGasSponsorship(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLineItemGasSponsorship", reflect.TypeOf((*MockQuerier)(nil).UpdateLineItemGasSponsorship), ctx, arg)
}

// UpdateMetricNetworkData mocks base method.
func (m *MockQuerier) UpdateMetricNetworkData(ctx context.Context, arg db.UpdateMetricNetworkDataParams) (db.DashboardMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetricNetworkData", ctx, arg)
	ret0, _ := ret[0].(db.DashboardMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetricNetworkData indicates an expected call of UpdateMetricNetworkData.
func (mr *MockQuerierMockRecorder) UpdateMetricNetworkData(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetricNetworkData", reflect.TypeOf((*MockQuerier)(nil).UpdateMetricNetworkData), ctx, arg)
}

// UpdateNetwork mocks base method.
func (m *MockQuerier) UpdateNetwork(ctx context.Context, arg db.UpdateNetworkParams) (db.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNetwork", ctx, arg)
	ret0, _ := ret[0].(db.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNetwork indicates an expected call of UpdateNetwork.
func (mr *MockQuerierMockRecorder) UpdateNetwork(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetwork", reflect.TypeOf((*MockQuerier)(nil).UpdateNetwork), ctx, arg)
}

// UpdatePaymentGasDetails mocks base method.
func (m *MockQuerier) UpdatePaymentGasDetails(ctx context.Context, arg db.UpdatePaymentGasDetailsParams) (db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePaymentGasDetails", ctx, arg)
	ret0, _ := ret[0].(db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePaymentGasDetails indicates an expected call of UpdatePaymentGasDetails.
func (mr *MockQuerierMockRecorder) UpdatePaymentGasDetails(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePaymentGasDetails", reflect.TypeOf((*MockQuerier)(nil).UpdatePaymentGasDetails), ctx, arg)
}

// UpdatePaymentGasSponsorship mocks base method.
func (m *MockQuerier) UpdatePaymentGasSponsorship(ctx context.Context, arg db.UpdatePaymentGasSponsorshipParams) (db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePaymentGasSponsorship", ctx, arg)
	ret0, _ := ret[0].(db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePaymentGasSponsorship indicates an expected call of UpdatePaymentGasSponsorship.
func (mr *MockQuerierMockRecorder) UpdatePaymentGasSponsorship(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePaymentGasSponsorship", reflect.TypeOf((*MockQuerier)(nil).UpdatePaymentGasSponsorship), ctx, arg)
}

// UpdatePaymentInvoiceID mocks base method.
func (m *MockQuerier) UpdatePaymentInvoiceID(ctx context.Context, arg db.UpdatePaymentInvoiceIDParams) (db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePaymentInvoiceID", ctx, arg)
	ret0, _ := ret[0].(db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePaymentInvoiceID indicates an expected call of UpdatePaymentInvoiceID.
func (mr *MockQuerierMockRecorder) UpdatePaymentInvoiceID(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePaymentInvoiceID", reflect.TypeOf((*MockQuerier)(nil).UpdatePaymentInvoiceID), ctx, arg)
}

// UpdatePaymentLink mocks base method.
func (m *MockQuerier) UpdatePaymentLink(ctx context.Context, arg db.UpdatePaymentLinkParams) (db.PaymentLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePaymentLink", ctx, arg)
	ret0, _ := ret[0].(db.PaymentLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePaymentLink indicates an expected call of UpdatePaymentLink.
func (mr *MockQuerierMockRecorder) UpdatePaymentLink(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePaymentLink", reflect.TypeOf((*MockQuerier)(nil).UpdatePaymentLink), ctx, arg)
}

// UpdatePaymentLinkQRCode mocks base method.
func (m *MockQuerier) UpdatePaymentLinkQRCode(ctx context.Context, arg db.UpdatePaymentLinkQRCodeParams) (db.PaymentLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePaymentLinkQRCode", ctx, arg)
	ret0, _ := ret[0].(db.PaymentLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePaymentLinkQRCode indicates an expected call of UpdatePaymentLinkQRCode.
func (mr *MockQuerierMockRecorder) UpdatePaymentLinkQRCode(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePaymentLinkQRCode", reflect.TypeOf((*MockQuerier)(nil).UpdatePaymentLinkQRCode), ctx, arg)
}

// UpdatePaymentStatus mocks base method.
func (m *MockQuerier) UpdatePaymentStatus(ctx context.Context, arg db.UpdatePaymentStatusParams) (db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePaymentStatus", ctx, arg)
	ret0, _ := ret[0].(db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePaymentStatus indicates an expected call of UpdatePaymentStatus.
func (mr *MockQuerierMockRecorder) UpdatePaymentStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePaymentStatus", reflect.TypeOf((*MockQuerier)(nil).UpdatePaymentStatus), ctx, arg)
}

// UpdatePaymentWithBlockchainData mocks base method.
func (m *MockQuerier) UpdatePaymentWithBlockchainData(ctx context.Context, arg db.UpdatePaymentWithBlockchainDataParams) (db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePaymentWithBlockchainData", ctx, arg)
	ret0, _ := ret[0].(db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePaymentWithBlockchainData indicates an expected call of UpdatePaymentWithBlockchainData.
func (mr *MockQuerierMockRecorder) UpdatePaymentWithBlockchainData(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePaymentWithBlockchainData", reflect.TypeOf((*MockQuerier)(nil).UpdatePaymentWithBlockchainData), ctx, arg)
}

// UpdateProduct mocks base method.
func (m *MockQuerier) UpdateProduct(ctx context.Context, arg db.UpdateProductParams) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", ctx, arg)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockQuerierMockRecorder) UpdateProduct(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockQuerier)(nil).UpdateProduct), ctx, arg)
}

// UpdateProductAddonRelationship mocks base method.
func (m *MockQuerier) UpdateProductAddonRelationship(ctx context.Context, arg db.UpdateProductAddonRelationshipParams) (db.ProductAddonRelationship, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductAddonRelationship", ctx, arg)
	ret0, _ := ret[0].(db.ProductAddonRelationship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProductAddonRelationship indicates an expected call of UpdateProductAddonRelationship.
func (mr *MockQuerierMockRecorder) UpdateProductAddonRelationship(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductAddonRelationship", reflect.TypeOf((*MockQuerier)(nil).UpdateProductAddonRelationship), ctx, arg)
}

// UpdateProductPaymentSyncStatus mocks base method.
func (m *MockQuerier) UpdateProductPaymentSyncStatus(ctx context.Context, arg db.UpdateProductPaymentSyncStatusParams) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductPaymentSyncStatus", ctx, arg)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProductPaymentSyncStatus indicates an expected call of UpdateProductPaymentSyncStatus.
func (mr *MockQuerierMockRecorder) UpdateProductPaymentSyncStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductPaymentSyncStatus", reflect.TypeOf((*MockQuerier)(nil).UpdateProductPaymentSyncStatus), ctx, arg)
}

// UpdateProductSyncStatus mocks base method.
func (m *MockQuerier) UpdateProductSyncStatus(ctx context.Context, arg db.UpdateProductSyncStatusParams) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductSyncStatus", ctx, arg)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProductSyncStatus indicates an expected call of UpdateProductSyncStatus.
func (mr *MockQuerierMockRecorder) UpdateProductSyncStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductSyncStatus", reflect.TypeOf((*MockQuerier)(nil).UpdateProductSyncStatus), ctx, arg)
}

// UpdateProductToken mocks base method.
func (m *MockQuerier) UpdateProductToken(ctx context.Context, arg db.UpdateProductTokenParams) (db.ProductsToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductToken", ctx, arg)
	ret0, _ := ret[0].(db.ProductsToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProductToken indicates an expected call of UpdateProductToken.
func (mr *MockQuerierMockRecorder) UpdateProductToken(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductToken", reflect.TypeOf((*MockQuerier)(nil).UpdateProductToken), ctx, arg)
}

// UpdateProductWithSync mocks base method.
func (m *MockQuerier) UpdateProductWithSync(ctx context.Context, arg db.UpdateProductWithSyncParams) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductWithSync", ctx, arg)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProductWithSync indicates an expected call of UpdateProductWithSync.
func (mr *MockQuerierMockRecorder) UpdateProductWithSync(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductWithSync", reflect.TypeOf((*MockQuerier)(nil).UpdateProductWithSync), ctx, arg)
}

// UpdateScheduleChangeStatus mocks base method.
func (m *MockQuerier) UpdateScheduleChangeStatus(ctx context.Context, arg db.UpdateScheduleChangeStatusParams) (db.SubscriptionScheduleChange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScheduleChangeStatus", ctx, arg)
	ret0, _ := ret[0].(db.SubscriptionScheduleChange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateScheduleChangeStatus indicates an expected call of UpdateScheduleChangeStatus.
func (mr *MockQuerierMockRecorder) UpdateScheduleChangeStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScheduleChangeStatus", reflect.TypeOf((*MockQuerier)(nil).UpdateScheduleChangeStatus), ctx, arg)
}

// UpdateSubscription mocks base method.
func (m *MockQuerier) UpdateSubscription(ctx context.Context, arg db.UpdateSubscriptionParams) (db.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscription", ctx, arg)
	ret0, _ := ret[0].(db.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubscription indicates an expected call of UpdateSubscription.
func (mr *MockQuerierMockRecorder) UpdateSubscription(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscription", reflect.TypeOf((*MockQuerier)(nil).UpdateSubscription), ctx, arg)
}

// UpdateSubscriptionEvent mocks base method.
func (m *MockQuerier) UpdateSubscriptionEvent(ctx context.Context, arg db.UpdateSubscriptionEventParams) (db.SubscriptionEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscriptionEvent", ctx, arg)
	ret0, _ := ret[0].(db.SubscriptionEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubscriptionEvent indicates an expected call of UpdateSubscriptionEvent.
func (mr *MockQuerierMockRecorder) UpdateSubscriptionEvent(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscriptionEvent", reflect.TypeOf((*MockQuerier)(nil).UpdateSubscriptionEvent), ctx, arg)
}

// UpdateSubscriptionForUpgrade mocks base method.
func (m *MockQuerier) UpdateSubscriptionForUpgrade(ctx context.Context, arg db.UpdateSubscriptionForUpgradeParams) (db.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscriptionForUpgrade", ctx, arg)
	ret0, _ := ret[0].(db.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubscriptionForUpgrade indicates an expected call of UpdateSubscriptionForUpgrade.
func (mr *MockQuerierMockRecorder) UpdateSubscriptionForUpgrade(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscriptionForUpgrade", reflect.TypeOf((*MockQuerier)(nil).UpdateSubscriptionForUpgrade), ctx, arg)
}

// UpdateSubscriptionLineItemQuantity mocks base method.
func (m *MockQuerier) UpdateSubscriptionLineItemQuantity(ctx context.Context, arg db.UpdateSubscriptionLineItemQuantityParams) (db.SubscriptionLineItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscriptionLineItemQuantity", ctx, arg)
	ret0, _ := ret[0].(db.SubscriptionLineItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubscriptionLineItemQuantity indicates an expected call of UpdateSubscriptionLineItemQuantity.
func (mr *MockQuerierMockRecorder) UpdateSubscriptionLineItemQuantity(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscriptionLineItemQuantity", reflect.TypeOf((*MockQuerier)(nil).UpdateSubscriptionLineItemQuantity), ctx, arg)
}

// UpdateSubscriptionPaymentSyncStatus mocks base method.
func (m *MockQuerier) UpdateSubscriptionPaymentSyncStatus(ctx context.Context, arg db.UpdateSubscriptionPaymentSyncStatusParams) (db.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscriptionPaymentSyncStatus", ctx, arg)
	ret0, _ := ret[0].(db.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubscriptionPaymentSyncStatus indicates an expected call of UpdateSubscriptionPaymentSyncStatus.
func (mr *MockQuerierMockRecorder) UpdateSubscriptionPaymentSyncStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscriptionPaymentSyncStatus", reflect.TypeOf((*MockQuerier)(nil).UpdateSubscriptionPaymentSyncStatus), ctx, arg)
}

// UpdateSubscriptionStatus mocks base method.
func (m *MockQuerier) UpdateSubscriptionStatus(ctx context.Context, arg db.UpdateSubscriptionStatusParams) (db.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscriptionStatus", ctx, arg)
	ret0, _ := ret[0].(db.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubscriptionStatus indicates an expected call of UpdateSubscriptionStatus.
func (mr *MockQuerierMockRecorder) UpdateSubscriptionStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscriptionStatus", reflect.TypeOf((*MockQuerier)(nil).UpdateSubscriptionStatus), ctx, arg)
}

// UpdateSubscriptionSyncStatus mocks base method.
func (m *MockQuerier) UpdateSubscriptionSyncStatus(ctx context.Context, arg db.UpdateSubscriptionSyncStatusParams) (db.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscriptionSyncStatus", ctx, arg)
	ret0, _ := ret[0].(db.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubscriptionSyncStatus indicates an expected call of UpdateSubscriptionSyncStatus.
func (mr *MockQuerierMockRecorder) UpdateSubscriptionSyncStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscriptionSyncStatus", reflect.TypeOf((*MockQuerier)(nil).UpdateSubscriptionSyncStatus), ctx, arg)
}

// UpdateSubscriptionWithSync mocks base method.
func (m *MockQuerier) UpdateSubscriptionWithSync(ctx context.Context, arg db.UpdateSubscriptionWithSyncParams) (db.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscriptionWithSync", ctx, arg)
	ret0, _ := ret[0].(db.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubscriptionWithSync indicates an expected call of UpdateSubscriptionWithSync.
func (mr *MockQuerierMockRecorder) UpdateSubscriptionWithSync(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscriptionWithSync", reflect.TypeOf((*MockQuerier)(nil).UpdateSubscriptionWithSync), ctx, arg)
}

// UpdateSyncSessionError mocks base method.
func (m *MockQuerier) UpdateSyncSessionError(ctx context.Context, arg db.UpdateSyncSessionErrorParams) (db.PaymentSyncSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSyncSessionError", ctx, arg)
	ret0, _ := ret[0].(db.PaymentSyncSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSyncSessionError indicates an expected call of UpdateSyncSessionError.
func (mr *MockQuerierMockRecorder) UpdateSyncSessionError(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSyncSessionError", reflect.TypeOf((*MockQuerier)(nil).UpdateSyncSessionError), ctx, arg)
}

// UpdateSyncSessionProgress mocks base method.
func (m *MockQuerier) UpdateSyncSessionProgress(ctx context.Context, arg db.UpdateSyncSessionProgressParams) (db.PaymentSyncSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSyncSessionProgress", ctx, arg)
	ret0, _ := ret[0].(db.PaymentSyncSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSyncSessionProgress indicates an expected call of UpdateSyncSessionProgress.
func (mr *MockQuerierMockRecorder) UpdateSyncSessionProgress(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSyncSessionProgress", reflect.TypeOf((*MockQuerier)(nil).UpdateSyncSessionProgress), ctx, arg)
}

// UpdateSyncSessionStatus mocks base method.
func (m *MockQuerier) UpdateSyncSessionStatus(ctx context.Context, arg db.UpdateSyncSessionStatusParams) (db.PaymentSyncSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSyncSessionStatus", ctx, arg)
	ret0, _ := ret[0].(db.PaymentSyncSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSyncSessionStatus indicates an expected call of UpdateSyncSessionStatus.
func (mr *MockQuerierMockRecorder) UpdateSyncSessionStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSyncSessionStatus", reflect.TypeOf((*MockQuerier)(nil).UpdateSyncSessionStatus), ctx, arg)
}

// UpdateToken mocks base method.
func (m *MockQuerier) UpdateToken(ctx context.Context, arg db.UpdateTokenParams) (db.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateToken", ctx, arg)
	ret0, _ := ret[0].(db.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateToken indicates an expected call of UpdateToken.
func (mr *MockQuerierMockRecorder) UpdateToken(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateToken", reflect.TypeOf((*MockQuerier)(nil).UpdateToken), ctx, arg)
}

// UpdateUser mocks base method.
func (m *MockQuerier) UpdateUser(ctx context.Context, arg db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, arg)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockQuerierMockRecorder) UpdateUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockQuerier)(nil).UpdateUser), ctx, arg)
}

// UpdateUserRole mocks base method.
func (m *MockQuerier) UpdateUserRole(ctx context.Context, arg db.UpdateUserRoleParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserRole", ctx, arg)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserRole indicates an expected call of UpdateUserRole.
func (mr *MockQuerierMockRecorder) UpdateUserRole(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserRole", reflect.TypeOf((*MockQuerier)(nil).UpdateUserRole), ctx, arg)
}

// UpdateWallet mocks base method.
func (m *MockQuerier) UpdateWallet(ctx context.Context, arg db.UpdateWalletParams) (db.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWallet", ctx, arg)
	ret0, _ := ret[0].(db.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWallet indicates an expected call of UpdateWallet.
func (mr *MockQuerierMockRecorder) UpdateWallet(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWallet", reflect.TypeOf((*MockQuerier)(nil).UpdateWallet), ctx, arg)
}

// UpdateWalletLastUsed mocks base method.
func (m *MockQuerier) UpdateWalletLastUsed(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWalletLastUsed", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWalletLastUsed indicates an expected call of UpdateWalletLastUsed.
func (mr *MockQuerierMockRecorder) UpdateWalletLastUsed(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWalletLastUsed", reflect.TypeOf((*MockQuerier)(nil).UpdateWalletLastUsed), ctx, id)
}

// UpdateWalletVerificationStatus mocks base method.
func (m *MockQuerier) UpdateWalletVerificationStatus(ctx context.Context, arg db.UpdateWalletVerificationStatusParams) (db.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWalletVerificationStatus", ctx, arg)
	ret0, _ := ret[0].(db.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWalletVerificationStatus indicates an expected call of UpdateWalletVerificationStatus.
func (mr *MockQuerierMockRecorder) UpdateWalletVerificationStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWalletVerificationStatus", reflect.TypeOf((*MockQuerier)(nil).UpdateWalletVerificationStatus), ctx, arg)
}

// UpdateWebhookEventProcessingAttempts mocks base method.
func (m *MockQuerier) UpdateWebhookEventProcessingAttempts(ctx context.Context, arg db.UpdateWebhookEventProcessingAttemptsParams) (db.PaymentSyncEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWebhookEventProcessingAttempts", ctx, arg)
	ret0, _ := ret[0].(db.PaymentSyncEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWebhookEventProcessingAttempts indicates an expected call of UpdateWebhookEventProcessingAttempts.
func (mr *MockQuerierMockRecorder) UpdateWebhookEventProcessingAttempts(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWebhookEventProcessingAttempts", reflect.TypeOf((*MockQuerier)(nil).UpdateWebhookEventProcessingAttempts), ctx, arg)
}

// UpdateWebhookProcessingStatus mocks base method.
func (m *MockQuerier) UpdateWebhookProcessingStatus(ctx context.Context, arg db.UpdateWebhookProcessingStatusParams) (db.PaymentSyncEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWebhookProcessingStatus", ctx, arg)
	ret0, _ := ret[0].(db.PaymentSyncEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWebhookProcessingStatus indicates an expected call of UpdateWebhookProcessingStatus.
func (mr *MockQuerierMockRecorder) UpdateWebhookProcessingStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWebhookProcessingStatus", reflect.TypeOf((*MockQuerier)(nil).UpdateWebhookProcessingStatus), ctx, arg)
}

// UpdateWorkspace mocks base method.
func (m *MockQuerier) UpdateWorkspace(ctx context.Context, arg db.UpdateWorkspaceParams) (db.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkspace", ctx, arg)
	ret0, _ := ret[0].(db.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkspace indicates an expected call of UpdateWorkspace.
func (mr *MockQuerierMockRecorder) UpdateWorkspace(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkspace", reflect.TypeOf((*MockQuerier)(nil).UpdateWorkspace), ctx, arg)
}

// UpdateWorkspaceDefaultCurrency mocks base method.
func (m *MockQuerier) UpdateWorkspaceDefaultCurrency(ctx context.Context, arg db.UpdateWorkspaceDefaultCurrencyParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkspaceDefaultCurrency", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWorkspaceDefaultCurrency indicates an expected call of UpdateWorkspaceDefaultCurrency.
func (mr *MockQuerierMockRecorder) UpdateWorkspaceDefaultCurrency(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkspaceDefaultCurrency", reflect.TypeOf((*MockQuerier)(nil).UpdateWorkspaceDefaultCurrency), ctx, arg)
}

// UpdateWorkspacePaymentConfiguration mocks base method.
func (m *MockQuerier) UpdateWorkspacePaymentConfiguration(ctx context.Context, arg db.UpdateWorkspacePaymentConfigurationParams) (db.WorkspacePaymentConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkspacePaymentConfiguration", ctx, arg)
	ret0, _ := ret[0].(db.WorkspacePaymentConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkspacePaymentConfiguration indicates an expected call of UpdateWorkspacePaymentConfiguration.
func (mr *MockQuerierMockRecorder) UpdateWorkspacePaymentConfiguration(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkspacePaymentConfiguration", reflect.TypeOf((*MockQuerier)(nil).UpdateWorkspacePaymentConfiguration), ctx, arg)
}

// UpdateWorkspacePaymentConfigurationConfig mocks base method.
func (m *MockQuerier) UpdateWorkspacePaymentConfigurationConfig(ctx context.Context, arg db.UpdateWorkspacePaymentConfigurationConfigParams) (db.WorkspacePaymentConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkspacePaymentConfigurationConfig", ctx, arg)
	ret0, _ := ret[0].(db.WorkspacePaymentConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkspacePaymentConfigurationConfig indicates an expected call of UpdateWorkspacePaymentConfigurationConfig.
func (mr *MockQuerierMockRecorder) UpdateWorkspacePaymentConfigurationConfig(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkspacePaymentConfigurationConfig", reflect.TypeOf((*MockQuerier)(nil).UpdateWorkspacePaymentConfigurationConfig), ctx, arg)
}

// UpdateWorkspacePaymentConfigurationLastSync mocks base method.
func (m *MockQuerier) UpdateWorkspacePaymentConfigurationLastSync(ctx context.Context, arg db.UpdateWorkspacePaymentConfigurationLastSyncParams) (db.WorkspacePaymentConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkspacePaymentConfigurationLastSync", ctx, arg)
	ret0, _ := ret[0].(db.WorkspacePaymentConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkspacePaymentConfigurationLastSync indicates an expected call of UpdateWorkspacePaymentConfigurationLastSync.
func (mr *MockQuerierMockRecorder) UpdateWorkspacePaymentConfigurationLastSync(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkspacePaymentConfigurationLastSync", reflect.TypeOf((*MockQuerier)(nil).UpdateWorkspacePaymentConfigurationLastSync), ctx, arg)
}

// UpdateWorkspacePaymentConfigurationLastWebhook mocks base method.
func (m *MockQuerier) UpdateWorkspacePaymentConfigurationLastWebhook(ctx context.Context, arg db.UpdateWorkspacePaymentConfigurationLastWebhookParams) (db.WorkspacePaymentConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkspacePaymentConfigurationLastWebhook", ctx, arg)
	ret0, _ := ret[0].(db.WorkspacePaymentConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkspacePaymentConfigurationLastWebhook indicates an expected call of UpdateWorkspacePaymentConfigurationLastWebhook.
func (mr *MockQuerierMockRecorder) UpdateWorkspacePaymentConfigurationLastWebhook(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkspacePaymentConfigurationLastWebhook", reflect.TypeOf((*MockQuerier)(nil).UpdateWorkspacePaymentConfigurationLastWebhook), ctx, arg)
}

// UpdateWorkspaceProviderAccount mocks base method.
func (m *MockQuerier) UpdateWorkspaceProviderAccount(ctx context.Context, arg db.UpdateWorkspaceProviderAccountParams) (db.WorkspaceProviderAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkspaceProviderAccount", ctx, arg)
	ret0, _ := ret[0].(db.WorkspaceProviderAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkspaceProviderAccount indicates an expected call of UpdateWorkspaceProviderAccount.
func (mr *MockQuerierMockRecorder) UpdateWorkspaceProviderAccount(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkspaceProviderAccount", reflect.TypeOf((*MockQuerier)(nil).UpdateWorkspaceProviderAccount), ctx, arg)
}

// UpdateWorkspaceProviderConfig mocks base method.
func (m *MockQuerier) UpdateWorkspaceProviderConfig(ctx context.Context, arg db.UpdateWorkspaceProviderConfigParams) (db.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkspaceProviderConfig", ctx, arg)
	ret0, _ := ret[0].(db.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkspaceProviderConfig indicates an expected call of UpdateWorkspaceProviderConfig.
func (mr *MockQuerierMockRecorder) UpdateWorkspaceProviderConfig(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkspaceProviderConfig", reflect.TypeOf((*MockQuerier)(nil).UpdateWorkspaceProviderConfig), ctx, arg)
}

// UpdateWorkspaceSupportedCurrencies mocks base method.
func (m *MockQuerier) UpdateWorkspaceSupportedCurrencies(ctx context.Context, arg db.UpdateWorkspaceSupportedCurrenciesParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkspaceSupportedCurrencies", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWorkspaceSupportedCurrencies indicates an expected call of UpdateWorkspaceSupportedCurrencies.
func (mr *MockQuerierMockRecorder) UpdateWorkspaceSupportedCurrencies(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkspaceSupportedCurrencies", reflect.TypeOf((*MockQuerier)(nil).UpdateWorkspaceSupportedCurrencies), ctx, arg)
}

// UpsertInvoice mocks base method.
func (m *MockQuerier) UpsertInvoice(ctx context.Context, arg db.UpsertInvoiceParams) (db.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertInvoice", ctx, arg)
	ret0, _ := ret[0].(db.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertInvoice indicates an expected call of UpsertInvoice.
func (mr *MockQuerierMockRecorder) UpsertInvoice(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertInvoice", reflect.TypeOf((*MockQuerier)(nil).UpsertInvoice), ctx, arg)
}

// ValidateAddonForProduct mocks base method.
func (m *MockQuerier) ValidateAddonForProduct(ctx context.Context, arg db.ValidateAddonForProductParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAddonForProduct", ctx, arg)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateAddonForProduct indicates an expected call of ValidateAddonForProduct.
func (mr *MockQuerierMockRecorder) ValidateAddonForProduct(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAddonForProduct", reflect.TypeOf((*MockQuerier)(nil).ValidateAddonForProduct), ctx, arg)
}

// ValidateProviderAccountUnique mocks base method.
func (m *MockQuerier) ValidateProviderAccountUnique(ctx context.Context, arg db.ValidateProviderAccountUniqueParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateProviderAccountUnique", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateProviderAccountUnique indicates an expected call of ValidateProviderAccountUnique.
func (mr *MockQuerierMockRecorder) ValidateProviderAccountUnique(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateProviderAccountUnique", reflect.TypeOf((*MockQuerier)(nil).ValidateProviderAccountUnique), ctx, arg)
}

// VerifyCustomerWallet mocks base method.
func (m *MockQuerier) VerifyCustomerWallet(ctx context.Context, id uuid.UUID) (db.CustomerWallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyCustomerWallet", ctx, id)
	ret0, _ := ret[0].(db.CustomerWallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyCustomerWallet indicates an expected call of VerifyCustomerWallet.
func (mr *MockQuerierMockRecorder) VerifyCustomerWallet(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyCustomerWallet", reflect.TypeOf((*MockQuerier)(nil).VerifyCustomerWallet), ctx, id)
}

// VoidInvoice mocks base method.
func (m *MockQuerier) VoidInvoice(ctx context.Context, arg db.VoidInvoiceParams) (db.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VoidInvoice", ctx, arg)
	ret0, _ := ret[0].(db.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VoidInvoice indicates an expected call of VoidInvoice.
func (mr *MockQuerierMockRecorder) VoidInvoice(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VoidInvoice", reflect.TypeOf((*MockQuerier)(nil).VoidInvoice), ctx, arg)
}
