// Code generated by MockGen. DO NOT EDIT.
// Source: libs/go/interfaces/services.go
//
// Generated by this command:
//
//	mockgen -source=libs/go/interfaces/services.go -destination=libs/go/mocks/mock_services.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	db "github.com/cyphera/cyphera-api/libs/go/db"
	helpers "github.com/cyphera/cyphera-api/libs/go/helpers"
	interfaces "github.com/cyphera/cyphera-api/libs/go/interfaces"
	services "github.com/cyphera/cyphera-api/libs/go/services"
	uuid "github.com/google/uuid"
	pgx "github.com/jackc/pgx/v5"
	pgtype "github.com/jackc/pgx/v5/pgtype"
	pgxpool "github.com/jackc/pgx/v5/pgxpool"
	gomock "go.uber.org/mock/gomock"
	zap "go.uber.org/zap"
)

// MockPaymentService is a mock of PaymentService interface.
type MockPaymentService struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentServiceMockRecorder
	isgomock struct{}
}

// MockPaymentServiceMockRecorder is the mock recorder for MockPaymentService.
type MockPaymentServiceMockRecorder struct {
	mock *MockPaymentService
}

// NewMockPaymentService creates a new mock instance.
func NewMockPaymentService(ctrl *gomock.Controller) *MockPaymentService {
	mock := &MockPaymentService{ctrl: ctrl}
	mock.recorder = &MockPaymentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentService) EXPECT() *MockPaymentServiceMockRecorder {
	return m.recorder
}

// CreateComprehensivePayment mocks base method.
func (m *MockPaymentService) CreateComprehensivePayment(ctx context.Context, params services.CreateComprehensivePaymentParams) (*db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComprehensivePayment", ctx, params)
	ret0, _ := ret[0].(*db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComprehensivePayment indicates an expected call of CreateComprehensivePayment.
func (mr *MockPaymentServiceMockRecorder) CreateComprehensivePayment(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComprehensivePayment", reflect.TypeOf((*MockPaymentService)(nil).CreateComprehensivePayment), ctx, params)
}

// CreateManualPayment mocks base method.
func (m *MockPaymentService) CreateManualPayment(ctx context.Context, params services.CreateManualPaymentParams) (*db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateManualPayment", ctx, params)
	ret0, _ := ret[0].(*db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateManualPayment indicates an expected call of CreateManualPayment.
func (mr *MockPaymentServiceMockRecorder) CreateManualPayment(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateManualPayment", reflect.TypeOf((*MockPaymentService)(nil).CreateManualPayment), ctx, params)
}

// CreatePaymentFromSubscriptionEvent mocks base method.
func (m *MockPaymentService) CreatePaymentFromSubscriptionEvent(ctx context.Context, params services.CreatePaymentFromSubscriptionEventParams) (*db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePaymentFromSubscriptionEvent", ctx, params)
	ret0, _ := ret[0].(*db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePaymentFromSubscriptionEvent indicates an expected call of CreatePaymentFromSubscriptionEvent.
func (mr *MockPaymentServiceMockRecorder) CreatePaymentFromSubscriptionEvent(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePaymentFromSubscriptionEvent", reflect.TypeOf((*MockPaymentService)(nil).CreatePaymentFromSubscriptionEvent), ctx, params)
}

// GetPayment mocks base method.
func (m *MockPaymentService) GetPayment(ctx context.Context, params services.GetPaymentParams) (*db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayment", ctx, params)
	ret0, _ := ret[0].(*db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayment indicates an expected call of GetPayment.
func (mr *MockPaymentServiceMockRecorder) GetPayment(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayment", reflect.TypeOf((*MockPaymentService)(nil).GetPayment), ctx, params)
}

// GetPaymentByTransactionHash mocks base method.
func (m *MockPaymentService) GetPaymentByTransactionHash(ctx context.Context, txHash string) (*db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentByTransactionHash", ctx, txHash)
	ret0, _ := ret[0].(*db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentByTransactionHash indicates an expected call of GetPaymentByTransactionHash.
func (mr *MockPaymentServiceMockRecorder) GetPaymentByTransactionHash(ctx, txHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentByTransactionHash", reflect.TypeOf((*MockPaymentService)(nil).GetPaymentByTransactionHash), ctx, txHash)
}

// GetPaymentMetrics mocks base method.
func (m *MockPaymentService) GetPaymentMetrics(ctx context.Context, workspaceID uuid.UUID, startTime, endTime time.Time, currency string) (*db.GetPaymentMetricsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentMetrics", ctx, workspaceID, startTime, endTime, currency)
	ret0, _ := ret[0].(*db.GetPaymentMetricsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentMetrics indicates an expected call of GetPaymentMetrics.
func (mr *MockPaymentServiceMockRecorder) GetPaymentMetrics(ctx, workspaceID, startTime, endTime, currency any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentMetrics", reflect.TypeOf((*MockPaymentService)(nil).GetPaymentMetrics), ctx, workspaceID, startTime, endTime, currency)
}

// ListPayments mocks base method.
func (m *MockPaymentService) ListPayments(ctx context.Context, params services.ListPaymentsParams) ([]db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPayments", ctx, params)
	ret0, _ := ret[0].([]db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPayments indicates an expected call of ListPayments.
func (mr *MockPaymentServiceMockRecorder) ListPayments(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPayments", reflect.TypeOf((*MockPaymentService)(nil).ListPayments), ctx, params)
}

// UpdatePaymentStatus mocks base method.
func (m *MockPaymentService) UpdatePaymentStatus(ctx context.Context, params services.UpdatePaymentStatusParams) (*db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePaymentStatus", ctx, params)
	ret0, _ := ret[0].(*db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePaymentStatus indicates an expected call of UpdatePaymentStatus.
func (mr *MockPaymentServiceMockRecorder) UpdatePaymentStatus(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePaymentStatus", reflect.TypeOf((*MockPaymentService)(nil).UpdatePaymentStatus), ctx, params)
}

// MockEmailService is a mock of EmailService interface.
type MockEmailService struct {
	ctrl     *gomock.Controller
	recorder *MockEmailServiceMockRecorder
	isgomock struct{}
}

// MockEmailServiceMockRecorder is the mock recorder for MockEmailService.
type MockEmailServiceMockRecorder struct {
	mock *MockEmailService
}

// NewMockEmailService creates a new mock instance.
func NewMockEmailService(ctrl *gomock.Controller) *MockEmailService {
	mock := &MockEmailService{ctrl: ctrl}
	mock.recorder = &MockEmailServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailService) EXPECT() *MockEmailServiceMockRecorder {
	return m.recorder
}

// SendBatchEmails mocks base method.
func (m *MockEmailService) SendBatchEmails(ctx context.Context, requests []services.BatchEmailRequest) ([]services.BatchEmailResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendBatchEmails", ctx, requests)
	ret0, _ := ret[0].([]services.BatchEmailResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendBatchEmails indicates an expected call of SendBatchEmails.
func (mr *MockEmailServiceMockRecorder) SendBatchEmails(ctx, requests any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendBatchEmails", reflect.TypeOf((*MockEmailService)(nil).SendBatchEmails), ctx, requests)
}

// SendDunningEmail mocks base method.
func (m *MockEmailService) SendDunningEmail(ctx context.Context, template *db.DunningEmailTemplate, data services.EmailData, toEmail string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendDunningEmail", ctx, template, data, toEmail)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendDunningEmail indicates an expected call of SendDunningEmail.
func (mr *MockEmailServiceMockRecorder) SendDunningEmail(ctx, template, data, toEmail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDunningEmail", reflect.TypeOf((*MockEmailService)(nil).SendDunningEmail), ctx, template, data, toEmail)
}

// SendTransactionalEmail mocks base method.
func (m *MockEmailService) SendTransactionalEmail(ctx context.Context, params services.TransactionalEmailParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTransactionalEmail", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendTransactionalEmail indicates an expected call of SendTransactionalEmail.
func (mr *MockEmailServiceMockRecorder) SendTransactionalEmail(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTransactionalEmail", reflect.TypeOf((*MockEmailService)(nil).SendTransactionalEmail), ctx, params)
}

// MockSubscriptionService is a mock of SubscriptionService interface.
type MockSubscriptionService struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionServiceMockRecorder
	isgomock struct{}
}

// MockSubscriptionServiceMockRecorder is the mock recorder for MockSubscriptionService.
type MockSubscriptionServiceMockRecorder struct {
	mock *MockSubscriptionService
}

// NewMockSubscriptionService creates a new mock instance.
func NewMockSubscriptionService(ctrl *gomock.Controller) *MockSubscriptionService {
	mock := &MockSubscriptionService{ctrl: ctrl}
	mock.recorder = &MockSubscriptionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionService) EXPECT() *MockSubscriptionServiceMockRecorder {
	return m.recorder
}

// DeleteSubscription mocks base method.
func (m *MockSubscriptionService) DeleteSubscription(ctx context.Context, workspaceID, subscriptionID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscription", ctx, workspaceID, subscriptionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubscription indicates an expected call of DeleteSubscription.
func (mr *MockSubscriptionServiceMockRecorder) DeleteSubscription(ctx, workspaceID, subscriptionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscription", reflect.TypeOf((*MockSubscriptionService)(nil).DeleteSubscription), ctx, workspaceID, subscriptionID)
}

// GetSubscription mocks base method.
func (m *MockSubscriptionService) GetSubscription(ctx context.Context, workspaceID, subscriptionID uuid.UUID) (*db.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscription", ctx, workspaceID, subscriptionID)
	ret0, _ := ret[0].(*db.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscription indicates an expected call of GetSubscription.
func (mr *MockSubscriptionServiceMockRecorder) GetSubscription(ctx, workspaceID, subscriptionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscription", reflect.TypeOf((*MockSubscriptionService)(nil).GetSubscription), ctx, workspaceID, subscriptionID)
}

// ListSubscriptions mocks base method.
func (m *MockSubscriptionService) ListSubscriptions(ctx context.Context, workspaceID uuid.UUID, limit, offset int32) ([]helpers.SubscriptionResponse, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptions", ctx, workspaceID, limit, offset)
	ret0, _ := ret[0].([]helpers.SubscriptionResponse)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSubscriptions indicates an expected call of ListSubscriptions.
func (mr *MockSubscriptionServiceMockRecorder) ListSubscriptions(ctx, workspaceID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptions", reflect.TypeOf((*MockSubscriptionService)(nil).ListSubscriptions), ctx, workspaceID, limit, offset)
}

// ListSubscriptionsByCustomer mocks base method.
func (m *MockSubscriptionService) ListSubscriptionsByCustomer(ctx context.Context, workspaceID, customerID uuid.UUID) ([]helpers.SubscriptionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptionsByCustomer", ctx, workspaceID, customerID)
	ret0, _ := ret[0].([]helpers.SubscriptionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscriptionsByCustomer indicates an expected call of ListSubscriptionsByCustomer.
func (mr *MockSubscriptionServiceMockRecorder) ListSubscriptionsByCustomer(ctx, workspaceID, customerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptionsByCustomer", reflect.TypeOf((*MockSubscriptionService)(nil).ListSubscriptionsByCustomer), ctx, workspaceID, customerID)
}

// ListSubscriptionsByProduct mocks base method.
func (m *MockSubscriptionService) ListSubscriptionsByProduct(ctx context.Context, workspaceID, productID uuid.UUID) ([]db.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptionsByProduct", ctx, workspaceID, productID)
	ret0, _ := ret[0].([]db.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscriptionsByProduct indicates an expected call of ListSubscriptionsByProduct.
func (mr *MockSubscriptionServiceMockRecorder) ListSubscriptionsByProduct(ctx, workspaceID, productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptionsByProduct", reflect.TypeOf((*MockSubscriptionService)(nil).ListSubscriptionsByProduct), ctx, workspaceID, productID)
}

// UpdateSubscription mocks base method.
func (m *MockSubscriptionService) UpdateSubscription(ctx context.Context, subscriptionID uuid.UUID, req services.UpdateSubscriptionRequest) (*db.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscription", ctx, subscriptionID, req)
	ret0, _ := ret[0].(*db.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubscription indicates an expected call of UpdateSubscription.
func (mr *MockSubscriptionServiceMockRecorder) UpdateSubscription(ctx, subscriptionID, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscription", reflect.TypeOf((*MockSubscriptionService)(nil).UpdateSubscription), ctx, subscriptionID, req)
}

// MockInvoiceService is a mock of InvoiceService interface.
type MockInvoiceService struct {
	ctrl     *gomock.Controller
	recorder *MockInvoiceServiceMockRecorder
	isgomock struct{}
}

// MockInvoiceServiceMockRecorder is the mock recorder for MockInvoiceService.
type MockInvoiceServiceMockRecorder struct {
	mock *MockInvoiceService
}

// NewMockInvoiceService creates a new mock instance.
func NewMockInvoiceService(ctrl *gomock.Controller) *MockInvoiceService {
	mock := &MockInvoiceService{ctrl: ctrl}
	mock.recorder = &MockInvoiceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvoiceService) EXPECT() *MockInvoiceServiceMockRecorder {
	return m.recorder
}

// CreateInvoice mocks base method.
func (m *MockInvoiceService) CreateInvoice(ctx context.Context, params services.InvoiceCreateParams) (*services.InvoiceWithDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvoice", ctx, params)
	ret0, _ := ret[0].(*services.InvoiceWithDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInvoice indicates an expected call of CreateInvoice.
func (mr *MockInvoiceServiceMockRecorder) CreateInvoice(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvoice", reflect.TypeOf((*MockInvoiceService)(nil).CreateInvoice), ctx, params)
}

// FinalizeInvoice mocks base method.
func (m *MockInvoiceService) FinalizeInvoice(ctx context.Context, workspaceID, invoiceID uuid.UUID) (*db.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeInvoice", ctx, workspaceID, invoiceID)
	ret0, _ := ret[0].(*db.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinalizeInvoice indicates an expected call of FinalizeInvoice.
func (mr *MockInvoiceServiceMockRecorder) FinalizeInvoice(ctx, workspaceID, invoiceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeInvoice", reflect.TypeOf((*MockInvoiceService)(nil).FinalizeInvoice), ctx, workspaceID, invoiceID)
}

// GetInvoiceWithDetails mocks base method.
func (m *MockInvoiceService) GetInvoiceWithDetails(ctx context.Context, workspaceID, invoiceID uuid.UUID) (*services.InvoiceWithDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoiceWithDetails", ctx, workspaceID, invoiceID)
	ret0, _ := ret[0].(*services.InvoiceWithDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoiceWithDetails indicates an expected call of GetInvoiceWithDetails.
func (mr *MockInvoiceServiceMockRecorder) GetInvoiceWithDetails(ctx, workspaceID, invoiceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoiceWithDetails", reflect.TypeOf((*MockInvoiceService)(nil).GetInvoiceWithDetails), ctx, workspaceID, invoiceID)
}

// MockDunningService is a mock of DunningService interface.
type MockDunningService struct {
	ctrl     *gomock.Controller
	recorder *MockDunningServiceMockRecorder
	isgomock struct{}
}

// MockDunningServiceMockRecorder is the mock recorder for MockDunningService.
type MockDunningServiceMockRecorder struct {
	mock *MockDunningService
}

// NewMockDunningService creates a new mock instance.
func NewMockDunningService(ctrl *gomock.Controller) *MockDunningService {
	mock := &MockDunningService{ctrl: ctrl}
	mock.recorder = &MockDunningServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDunningService) EXPECT() *MockDunningServiceMockRecorder {
	return m.recorder
}

// CreateAttempt mocks base method.
func (m *MockDunningService) CreateAttempt(ctx context.Context, params services.DunningAttemptParams) (*db.DunningAttempt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAttempt", ctx, params)
	ret0, _ := ret[0].(*db.DunningAttempt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAttempt indicates an expected call of CreateAttempt.
func (mr *MockDunningServiceMockRecorder) CreateAttempt(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAttempt", reflect.TypeOf((*MockDunningService)(nil).CreateAttempt), ctx, params)
}

// CreateCampaign mocks base method.
func (m *MockDunningService) CreateCampaign(ctx context.Context, params services.DunningCampaignParams) (*db.DunningCampaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCampaign", ctx, params)
	ret0, _ := ret[0].(*db.DunningCampaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCampaign indicates an expected call of CreateCampaign.
func (mr *MockDunningServiceMockRecorder) CreateCampaign(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCampaign", reflect.TypeOf((*MockDunningService)(nil).CreateCampaign), ctx, params)
}

// CreateConfiguration mocks base method.
func (m *MockDunningService) CreateConfiguration(ctx context.Context, params services.DunningConfigParams) (*db.DunningConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfiguration", ctx, params)
	ret0, _ := ret[0].(*db.DunningConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfiguration indicates an expected call of CreateConfiguration.
func (mr *MockDunningServiceMockRecorder) CreateConfiguration(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfiguration", reflect.TypeOf((*MockDunningService)(nil).CreateConfiguration), ctx, params)
}

// CreateEmailTemplate mocks base method.
func (m *MockDunningService) CreateEmailTemplate(ctx context.Context, params services.EmailTemplateParams) (*db.DunningEmailTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmailTemplate", ctx, params)
	ret0, _ := ret[0].(*db.DunningEmailTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmailTemplate indicates an expected call of CreateEmailTemplate.
func (mr *MockDunningServiceMockRecorder) CreateEmailTemplate(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmailTemplate", reflect.TypeOf((*MockDunningService)(nil).CreateEmailTemplate), ctx, params)
}

// FailCampaign mocks base method.
func (m *MockDunningService) FailCampaign(ctx context.Context, campaignID uuid.UUID, finalAction string) (*db.DunningCampaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FailCampaign", ctx, campaignID, finalAction)
	ret0, _ := ret[0].(*db.DunningCampaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FailCampaign indicates an expected call of FailCampaign.
func (mr *MockDunningServiceMockRecorder) FailCampaign(ctx, campaignID, finalAction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FailCampaign", reflect.TypeOf((*MockDunningService)(nil).FailCampaign), ctx, campaignID, finalAction)
}

// GetCampaignStats mocks base method.
func (m *MockDunningService) GetCampaignStats(ctx context.Context, workspaceID uuid.UUID, startDate, endDate time.Time) (*db.GetDunningCampaignStatsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCampaignStats", ctx, workspaceID, startDate, endDate)
	ret0, _ := ret[0].(*db.GetDunningCampaignStatsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCampaignStats indicates an expected call of GetCampaignStats.
func (mr *MockDunningServiceMockRecorder) GetCampaignStats(ctx, workspaceID, startDate, endDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCampaignStats", reflect.TypeOf((*MockDunningService)(nil).GetCampaignStats), ctx, workspaceID, startDate, endDate)
}

// GetConfiguration mocks base method.
func (m *MockDunningService) GetConfiguration(ctx context.Context, id uuid.UUID) (*db.DunningConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfiguration", ctx, id)
	ret0, _ := ret[0].(*db.DunningConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfiguration indicates an expected call of GetConfiguration.
func (mr *MockDunningServiceMockRecorder) GetConfiguration(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfiguration", reflect.TypeOf((*MockDunningService)(nil).GetConfiguration), ctx, id)
}

// GetDefaultConfiguration mocks base method.
func (m *MockDunningService) GetDefaultConfiguration(ctx context.Context, workspaceID uuid.UUID) (*db.DunningConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultConfiguration", ctx, workspaceID)
	ret0, _ := ret[0].(*db.DunningConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultConfiguration indicates an expected call of GetDefaultConfiguration.
func (mr *MockDunningServiceMockRecorder) GetDefaultConfiguration(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultConfiguration", reflect.TypeOf((*MockDunningService)(nil).GetDefaultConfiguration), ctx, workspaceID)
}

// RecoverCampaign mocks base method.
func (m *MockDunningService) RecoverCampaign(ctx context.Context, campaignID uuid.UUID, recoveredAmountCents int64) (*db.DunningCampaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecoverCampaign", ctx, campaignID, recoveredAmountCents)
	ret0, _ := ret[0].(*db.DunningCampaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecoverCampaign indicates an expected call of RecoverCampaign.
func (mr *MockDunningServiceMockRecorder) RecoverCampaign(ctx, campaignID, recoveredAmountCents any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecoverCampaign", reflect.TypeOf((*MockDunningService)(nil).RecoverCampaign), ctx, campaignID, recoveredAmountCents)
}

// UpdateAttemptStatus mocks base method.
func (m *MockDunningService) UpdateAttemptStatus(ctx context.Context, attemptID uuid.UUID, status string, errorMsg *string) (*db.DunningAttempt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAttemptStatus", ctx, attemptID, status, errorMsg)
	ret0, _ := ret[0].(*db.DunningAttempt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAttemptStatus indicates an expected call of UpdateAttemptStatus.
func (mr *MockDunningServiceMockRecorder) UpdateAttemptStatus(ctx, attemptID, status, errorMsg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAttemptStatus", reflect.TypeOf((*MockDunningService)(nil).UpdateAttemptStatus), ctx, attemptID, status, errorMsg)
}

// MockProrationCalculator is a mock of ProrationCalculator interface.
type MockProrationCalculator struct {
	ctrl     *gomock.Controller
	recorder *MockProrationCalculatorMockRecorder
	isgomock struct{}
}

// MockProrationCalculatorMockRecorder is the mock recorder for MockProrationCalculator.
type MockProrationCalculatorMockRecorder struct {
	mock *MockProrationCalculator
}

// NewMockProrationCalculator creates a new mock instance.
func NewMockProrationCalculator(ctrl *gomock.Controller) *MockProrationCalculator {
	mock := &MockProrationCalculator{ctrl: ctrl}
	mock.recorder = &MockProrationCalculatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProrationCalculator) EXPECT() *MockProrationCalculatorMockRecorder {
	return m.recorder
}

// CalculateDowngradeCredit mocks base method.
func (m *MockProrationCalculator) CalculateDowngradeCredit(currentPlanAmount int, billingCycleStart, changeDate time.Time, billingPeriodDays int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateDowngradeCredit", currentPlanAmount, billingCycleStart, changeDate, billingPeriodDays)
	ret0, _ := ret[0].(int)
	return ret0
}

// CalculateDowngradeCredit indicates an expected call of CalculateDowngradeCredit.
func (mr *MockProrationCalculatorMockRecorder) CalculateDowngradeCredit(currentPlanAmount, billingCycleStart, changeDate, billingPeriodDays any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateDowngradeCredit", reflect.TypeOf((*MockProrationCalculator)(nil).CalculateDowngradeCredit), currentPlanAmount, billingCycleStart, changeDate, billingPeriodDays)
}

// CalculatePauseCredit mocks base method.
func (m *MockProrationCalculator) CalculatePauseCredit(planAmount int, pauseStart, pauseEnd, billingCycleEnd time.Time, billingPeriodDays int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculatePauseCredit", planAmount, pauseStart, pauseEnd, billingCycleEnd, billingPeriodDays)
	ret0, _ := ret[0].(int)
	return ret0
}

// CalculatePauseCredit indicates an expected call of CalculatePauseCredit.
func (mr *MockProrationCalculatorMockRecorder) CalculatePauseCredit(planAmount, pauseStart, pauseEnd, billingCycleEnd, billingPeriodDays any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculatePauseCredit", reflect.TypeOf((*MockProrationCalculator)(nil).CalculatePauseCredit), planAmount, pauseStart, pauseEnd, billingCycleEnd, billingPeriodDays)
}

// CalculateProration mocks base method.
func (m *MockProrationCalculator) CalculateProration(oldAmount, newAmount, daysInPeriod, daysRemaining int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateProration", oldAmount, newAmount, daysInPeriod, daysRemaining)
	ret0, _ := ret[0].(int)
	return ret0
}

// CalculateProration indicates an expected call of CalculateProration.
func (mr *MockProrationCalculatorMockRecorder) CalculateProration(oldAmount, newAmount, daysInPeriod, daysRemaining any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateProration", reflect.TypeOf((*MockProrationCalculator)(nil).CalculateProration), oldAmount, newAmount, daysInPeriod, daysRemaining)
}

// CalculateUpgradeAmount mocks base method.
func (m *MockProrationCalculator) CalculateUpgradeAmount(currentPlanAmount, newPlanAmount int, billingCycleStart, changeDate time.Time, billingPeriodDays int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateUpgradeAmount", currentPlanAmount, newPlanAmount, billingCycleStart, changeDate, billingPeriodDays)
	ret0, _ := ret[0].(int)
	return ret0
}

// CalculateUpgradeAmount indicates an expected call of CalculateUpgradeAmount.
func (mr *MockProrationCalculatorMockRecorder) CalculateUpgradeAmount(currentPlanAmount, newPlanAmount, billingCycleStart, changeDate, billingPeriodDays any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateUpgradeAmount", reflect.TypeOf((*MockProrationCalculator)(nil).CalculateUpgradeAmount), currentPlanAmount, newPlanAmount, billingCycleStart, changeDate, billingPeriodDays)
}

// MockGasSponsorshipService is a mock of GasSponsorshipService interface.
type MockGasSponsorshipService struct {
	ctrl     *gomock.Controller
	recorder *MockGasSponsorshipServiceMockRecorder
	isgomock struct{}
}

// MockGasSponsorshipServiceMockRecorder is the mock recorder for MockGasSponsorshipService.
type MockGasSponsorshipServiceMockRecorder struct {
	mock *MockGasSponsorshipService
}

// NewMockGasSponsorshipService creates a new mock instance.
func NewMockGasSponsorshipService(ctrl *gomock.Controller) *MockGasSponsorshipService {
	mock := &MockGasSponsorshipService{ctrl: ctrl}
	mock.recorder = &MockGasSponsorshipServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGasSponsorshipService) EXPECT() *MockGasSponsorshipServiceMockRecorder {
	return m.recorder
}

// CreateDefaultSponsorshipConfig mocks base method.
func (m *MockGasSponsorshipService) CreateDefaultSponsorshipConfig(ctx context.Context, workspaceID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDefaultSponsorshipConfig", ctx, workspaceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDefaultSponsorshipConfig indicates an expected call of CreateDefaultSponsorshipConfig.
func (mr *MockGasSponsorshipServiceMockRecorder) CreateDefaultSponsorshipConfig(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDefaultSponsorshipConfig", reflect.TypeOf((*MockGasSponsorshipService)(nil).CreateDefaultSponsorshipConfig), ctx, workspaceID)
}

// GetSponsorshipAnalytics mocks base method.
func (m *MockGasSponsorshipService) GetSponsorshipAnalytics(ctx context.Context, workspaceID uuid.UUID, days int) (*services.SponsorshipAnalytics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSponsorshipAnalytics", ctx, workspaceID, days)
	ret0, _ := ret[0].(*services.SponsorshipAnalytics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSponsorshipAnalytics indicates an expected call of GetSponsorshipAnalytics.
func (mr *MockGasSponsorshipServiceMockRecorder) GetSponsorshipAnalytics(ctx, workspaceID, days any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSponsorshipAnalytics", reflect.TypeOf((*MockGasSponsorshipService)(nil).GetSponsorshipAnalytics), ctx, workspaceID, days)
}

// GetSponsorshipBudgetStatus mocks base method.
func (m *MockGasSponsorshipService) GetSponsorshipBudgetStatus(ctx context.Context, workspaceID uuid.UUID) (*services.BudgetStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSponsorshipBudgetStatus", ctx, workspaceID)
	ret0, _ := ret[0].(*services.BudgetStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSponsorshipBudgetStatus indicates an expected call of GetSponsorshipBudgetStatus.
func (mr *MockGasSponsorshipServiceMockRecorder) GetSponsorshipBudgetStatus(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSponsorshipBudgetStatus", reflect.TypeOf((*MockGasSponsorshipService)(nil).GetSponsorshipBudgetStatus), ctx, workspaceID)
}

// RecordSponsoredTransaction mocks base method.
func (m *MockGasSponsorshipService) RecordSponsoredTransaction(ctx context.Context, record services.SponsorshipRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordSponsoredTransaction", ctx, record)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordSponsoredTransaction indicates an expected call of RecordSponsoredTransaction.
func (mr *MockGasSponsorshipServiceMockRecorder) RecordSponsoredTransaction(ctx, record any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordSponsoredTransaction", reflect.TypeOf((*MockGasSponsorshipService)(nil).RecordSponsoredTransaction), ctx, record)
}

// ResetMonthlySponsorshipBudgets mocks base method.
func (m *MockGasSponsorshipService) ResetMonthlySponsorshipBudgets(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetMonthlySponsorshipBudgets", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetMonthlySponsorshipBudgets indicates an expected call of ResetMonthlySponsorshipBudgets.
func (mr *MockGasSponsorshipServiceMockRecorder) ResetMonthlySponsorshipBudgets(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetMonthlySponsorshipBudgets", reflect.TypeOf((*MockGasSponsorshipService)(nil).ResetMonthlySponsorshipBudgets), ctx)
}

// ShouldSponsorGas mocks base method.
func (m *MockGasSponsorshipService) ShouldSponsorGas(ctx context.Context, params services.SponsorshipCheckParams) (*services.SponsorshipDecision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldSponsorGas", ctx, params)
	ret0, _ := ret[0].(*services.SponsorshipDecision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShouldSponsorGas indicates an expected call of ShouldSponsorGas.
func (mr *MockGasSponsorshipServiceMockRecorder) ShouldSponsorGas(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldSponsorGas", reflect.TypeOf((*MockGasSponsorshipService)(nil).ShouldSponsorGas), ctx, params)
}

// UpdateSponsorshipConfig mocks base method.
func (m *MockGasSponsorshipService) UpdateSponsorshipConfig(ctx context.Context, workspaceID uuid.UUID, updates services.SponsorshipConfigUpdates) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSponsorshipConfig", ctx, workspaceID, updates)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSponsorshipConfig indicates an expected call of UpdateSponsorshipConfig.
func (mr *MockGasSponsorshipServiceMockRecorder) UpdateSponsorshipConfig(ctx, workspaceID, updates any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSponsorshipConfig", reflect.TypeOf((*MockGasSponsorshipService)(nil).UpdateSponsorshipConfig), ctx, workspaceID, updates)
}

// MockBlockchainService is a mock of BlockchainService interface.
type MockBlockchainService struct {
	ctrl     *gomock.Controller
	recorder *MockBlockchainServiceMockRecorder
	isgomock struct{}
}

// MockBlockchainServiceMockRecorder is the mock recorder for MockBlockchainService.
type MockBlockchainServiceMockRecorder struct {
	mock *MockBlockchainService
}

// NewMockBlockchainService creates a new mock instance.
func NewMockBlockchainService(ctrl *gomock.Controller) *MockBlockchainService {
	mock := &MockBlockchainService{ctrl: ctrl}
	mock.recorder = &MockBlockchainServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockchainService) EXPECT() *MockBlockchainServiceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockBlockchainService) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockBlockchainServiceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBlockchainService)(nil).Close))
}

// GetTransactionData mocks base method.
func (m *MockBlockchainService) GetTransactionData(ctx context.Context, txHash string, networkID uuid.UUID) (*services.TransactionData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionData", ctx, txHash, networkID)
	ret0, _ := ret[0].(*services.TransactionData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionData indicates an expected call of GetTransactionData.
func (mr *MockBlockchainServiceMockRecorder) GetTransactionData(ctx, txHash, networkID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionData", reflect.TypeOf((*MockBlockchainService)(nil).GetTransactionData), ctx, txHash, networkID)
}

// GetTransactionDataFromEvent mocks base method.
func (m *MockBlockchainService) GetTransactionDataFromEvent(ctx context.Context, event *db.SubscriptionEvent) (*services.TransactionData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionDataFromEvent", ctx, event)
	ret0, _ := ret[0].(*services.TransactionData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionDataFromEvent indicates an expected call of GetTransactionDataFromEvent.
func (mr *MockBlockchainServiceMockRecorder) GetTransactionDataFromEvent(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionDataFromEvent", reflect.TypeOf((*MockBlockchainService)(nil).GetTransactionDataFromEvent), ctx, event)
}

// Initialize mocks base method.
func (m *MockBlockchainService) Initialize(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize.
func (mr *MockBlockchainServiceMockRecorder) Initialize(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockBlockchainService)(nil).Initialize), ctx)
}

// MockExchangeRateService is a mock of ExchangeRateService interface.
type MockExchangeRateService struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeRateServiceMockRecorder
	isgomock struct{}
}

// MockExchangeRateServiceMockRecorder is the mock recorder for MockExchangeRateService.
type MockExchangeRateServiceMockRecorder struct {
	mock *MockExchangeRateService
}

// NewMockExchangeRateService creates a new mock instance.
func NewMockExchangeRateService(ctrl *gomock.Controller) *MockExchangeRateService {
	mock := &MockExchangeRateService{ctrl: ctrl}
	mock.recorder = &MockExchangeRateServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchangeRateService) EXPECT() *MockExchangeRateServiceMockRecorder {
	return m.recorder
}

// ConvertAmount mocks base method.
func (m *MockExchangeRateService) ConvertAmount(ctx context.Context, amount float64, fromCurrency, toCurrency string) (float64, *services.ExchangeRateResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertAmount", ctx, amount, fromCurrency, toCurrency)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(*services.ExchangeRateResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ConvertAmount indicates an expected call of ConvertAmount.
func (mr *MockExchangeRateServiceMockRecorder) ConvertAmount(ctx, amount, fromCurrency, toCurrency any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertAmount", reflect.TypeOf((*MockExchangeRateService)(nil).ConvertAmount), ctx, amount, fromCurrency, toCurrency)
}

// GetExchangeRate mocks base method.
func (m *MockExchangeRateService) GetExchangeRate(ctx context.Context, params services.ExchangeRateParams) (*services.ExchangeRateResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExchangeRate", ctx, params)
	ret0, _ := ret[0].(*services.ExchangeRateResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExchangeRate indicates an expected call of GetExchangeRate.
func (mr *MockExchangeRateServiceMockRecorder) GetExchangeRate(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchangeRate", reflect.TypeOf((*MockExchangeRateService)(nil).GetExchangeRate), ctx, params)
}

// MockTaxService is a mock of TaxService interface.
type MockTaxService struct {
	ctrl     *gomock.Controller
	recorder *MockTaxServiceMockRecorder
	isgomock struct{}
}

// MockTaxServiceMockRecorder is the mock recorder for MockTaxService.
type MockTaxServiceMockRecorder struct {
	mock *MockTaxService
}

// NewMockTaxService creates a new mock instance.
func NewMockTaxService(ctrl *gomock.Controller) *MockTaxService {
	mock := &MockTaxService{ctrl: ctrl}
	mock.recorder = &MockTaxServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaxService) EXPECT() *MockTaxServiceMockRecorder {
	return m.recorder
}

// CalculateTax mocks base method.
func (m *MockTaxService) CalculateTax(ctx context.Context, params services.TaxCalculationParams) (*services.TaxCalculationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateTax", ctx, params)
	ret0, _ := ret[0].(*services.TaxCalculationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateTax indicates an expected call of CalculateTax.
func (mr *MockTaxServiceMockRecorder) CalculateTax(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateTax", reflect.TypeOf((*MockTaxService)(nil).CalculateTax), ctx, params)
}

// MockPaymentLinkService is a mock of PaymentLinkService interface.
type MockPaymentLinkService struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentLinkServiceMockRecorder
	isgomock struct{}
}

// MockPaymentLinkServiceMockRecorder is the mock recorder for MockPaymentLinkService.
type MockPaymentLinkServiceMockRecorder struct {
	mock *MockPaymentLinkService
}

// NewMockPaymentLinkService creates a new mock instance.
func NewMockPaymentLinkService(ctrl *gomock.Controller) *MockPaymentLinkService {
	mock := &MockPaymentLinkService{ctrl: ctrl}
	mock.recorder = &MockPaymentLinkServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentLinkService) EXPECT() *MockPaymentLinkServiceMockRecorder {
	return m.recorder
}

// CreatePaymentLink mocks base method.
func (m *MockPaymentLinkService) CreatePaymentLink(ctx context.Context, params services.PaymentLinkCreateParams) (*services.PaymentLinkResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePaymentLink", ctx, params)
	ret0, _ := ret[0].(*services.PaymentLinkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePaymentLink indicates an expected call of CreatePaymentLink.
func (mr *MockPaymentLinkServiceMockRecorder) CreatePaymentLink(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePaymentLink", reflect.TypeOf((*MockPaymentLinkService)(nil).CreatePaymentLink), ctx, params)
}

// CreatePaymentLinkForInvoice mocks base method.
func (m *MockPaymentLinkService) CreatePaymentLinkForInvoice(ctx context.Context, invoice db.Invoice) (*services.PaymentLinkResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePaymentLinkForInvoice", ctx, invoice)
	ret0, _ := ret[0].(*services.PaymentLinkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePaymentLinkForInvoice indicates an expected call of CreatePaymentLinkForInvoice.
func (mr *MockPaymentLinkServiceMockRecorder) CreatePaymentLinkForInvoice(ctx, invoice any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePaymentLinkForInvoice", reflect.TypeOf((*MockPaymentLinkService)(nil).CreatePaymentLinkForInvoice), ctx, invoice)
}

// DeactivatePaymentLink mocks base method.
func (m *MockPaymentLinkService) DeactivatePaymentLink(ctx context.Context, workspaceID, linkID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivatePaymentLink", ctx, workspaceID, linkID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeactivatePaymentLink indicates an expected call of DeactivatePaymentLink.
func (mr *MockPaymentLinkServiceMockRecorder) DeactivatePaymentLink(ctx, workspaceID, linkID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivatePaymentLink", reflect.TypeOf((*MockPaymentLinkService)(nil).DeactivatePaymentLink), ctx, workspaceID, linkID)
}

// GetBaseURL mocks base method.
func (m *MockPaymentLinkService) GetBaseURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaseURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetBaseURL indicates an expected call of GetBaseURL.
func (mr *MockPaymentLinkServiceMockRecorder) GetBaseURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaseURL", reflect.TypeOf((*MockPaymentLinkService)(nil).GetBaseURL))
}

// GetPaymentLink mocks base method.
func (m *MockPaymentLinkService) GetPaymentLink(ctx context.Context, workspaceID, linkID uuid.UUID) (*services.PaymentLinkResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentLink", ctx, workspaceID, linkID)
	ret0, _ := ret[0].(*services.PaymentLinkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentLink indicates an expected call of GetPaymentLink.
func (mr *MockPaymentLinkServiceMockRecorder) GetPaymentLink(ctx, workspaceID, linkID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentLink", reflect.TypeOf((*MockPaymentLinkService)(nil).GetPaymentLink), ctx, workspaceID, linkID)
}

// GetPaymentLinkBySlug mocks base method.
func (m *MockPaymentLinkService) GetPaymentLinkBySlug(ctx context.Context, slug string) (*services.PaymentLinkResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentLinkBySlug", ctx, slug)
	ret0, _ := ret[0].(*services.PaymentLinkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentLinkBySlug indicates an expected call of GetPaymentLinkBySlug.
func (mr *MockPaymentLinkServiceMockRecorder) GetPaymentLinkBySlug(ctx, slug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentLinkBySlug", reflect.TypeOf((*MockPaymentLinkService)(nil).GetPaymentLinkBySlug), ctx, slug)
}

// UpdatePaymentLink mocks base method.
func (m *MockPaymentLinkService) UpdatePaymentLink(ctx context.Context, workspaceID, linkID uuid.UUID, updates services.PaymentLinkUpdateParams) (*services.PaymentLinkResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePaymentLink", ctx, workspaceID, linkID, updates)
	ret0, _ := ret[0].(*services.PaymentLinkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePaymentLink indicates an expected call of UpdatePaymentLink.
func (mr *MockPaymentLinkServiceMockRecorder) UpdatePaymentLink(ctx, workspaceID, linkID, updates any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePaymentLink", reflect.TypeOf((*MockPaymentLinkService)(nil).UpdatePaymentLink), ctx, workspaceID, linkID, updates)
}

// MockDiscountService is a mock of DiscountService interface.
type MockDiscountService struct {
	ctrl     *gomock.Controller
	recorder *MockDiscountServiceMockRecorder
	isgomock struct{}
}

// MockDiscountServiceMockRecorder is the mock recorder for MockDiscountService.
type MockDiscountServiceMockRecorder struct {
	mock *MockDiscountService
}

// NewMockDiscountService creates a new mock instance.
func NewMockDiscountService(ctrl *gomock.Controller) *MockDiscountService {
	mock := &MockDiscountService{ctrl: ctrl}
	mock.recorder = &MockDiscountServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscountService) EXPECT() *MockDiscountServiceMockRecorder {
	return m.recorder
}

// ApplyDiscount mocks base method.
func (m *MockDiscountService) ApplyDiscount(ctx context.Context, params services.DiscountApplicationParams) (*services.DiscountApplicationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyDiscount", ctx, params)
	ret0, _ := ret[0].(*services.DiscountApplicationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyDiscount indicates an expected call of ApplyDiscount.
func (mr *MockDiscountServiceMockRecorder) ApplyDiscount(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyDiscount", reflect.TypeOf((*MockDiscountService)(nil).ApplyDiscount), ctx, params)
}

// MockPaymentFailureMonitor is a mock of PaymentFailureMonitor interface.
type MockPaymentFailureMonitor struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentFailureMonitorMockRecorder
	isgomock struct{}
}

// MockPaymentFailureMonitorMockRecorder is the mock recorder for MockPaymentFailureMonitor.
type MockPaymentFailureMonitorMockRecorder struct {
	mock *MockPaymentFailureMonitor
}

// NewMockPaymentFailureMonitor creates a new mock instance.
func NewMockPaymentFailureMonitor(ctrl *gomock.Controller) *MockPaymentFailureMonitor {
	mock := &MockPaymentFailureMonitor{ctrl: ctrl}
	mock.recorder = &MockPaymentFailureMonitorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentFailureMonitor) EXPECT() *MockPaymentFailureMonitorMockRecorder {
	return m.recorder
}

// MonitorFailedPayments mocks base method.
func (m *MockPaymentFailureMonitor) MonitorFailedPayments(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MonitorFailedPayments", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// MonitorFailedPayments indicates an expected call of MonitorFailedPayments.
func (mr *MockPaymentFailureMonitorMockRecorder) MonitorFailedPayments(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MonitorFailedPayments", reflect.TypeOf((*MockPaymentFailureMonitor)(nil).MonitorFailedPayments), ctx)
}

// MonitorFailedSubscriptions mocks base method.
func (m *MockPaymentFailureMonitor) MonitorFailedSubscriptions(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MonitorFailedSubscriptions", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// MonitorFailedSubscriptions indicates an expected call of MonitorFailedSubscriptions.
func (mr *MockPaymentFailureMonitorMockRecorder) MonitorFailedSubscriptions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MonitorFailedSubscriptions", reflect.TypeOf((*MockPaymentFailureMonitor)(nil).MonitorFailedSubscriptions), ctx)
}

// MockGasFeeService is a mock of GasFeeService interface.
type MockGasFeeService struct {
	ctrl     *gomock.Controller
	recorder *MockGasFeeServiceMockRecorder
	isgomock struct{}
}

// MockGasFeeServiceMockRecorder is the mock recorder for MockGasFeeService.
type MockGasFeeServiceMockRecorder struct {
	mock *MockGasFeeService
}

// NewMockGasFeeService creates a new mock instance.
func NewMockGasFeeService(ctrl *gomock.Controller) *MockGasFeeService {
	mock := &MockGasFeeService{ctrl: ctrl}
	mock.recorder = &MockGasFeeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGasFeeService) EXPECT() *MockGasFeeServiceMockRecorder {
	return m.recorder
}

// EstimateGasFee mocks base method.
func (m *MockGasFeeService) EstimateGasFee(ctx context.Context, networkID uuid.UUID, transaction any) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateGasFee", ctx, networkID, transaction)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateGasFee indicates an expected call of EstimateGasFee.
func (mr *MockGasFeeServiceMockRecorder) EstimateGasFee(ctx, networkID, transaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateGasFee", reflect.TypeOf((*MockGasFeeService)(nil).EstimateGasFee), ctx, networkID, transaction)
}

// GetCurrentGasPrice mocks base method.
func (m *MockGasFeeService) GetCurrentGasPrice(ctx context.Context, networkID uuid.UUID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentGasPrice", ctx, networkID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentGasPrice indicates an expected call of GetCurrentGasPrice.
func (mr *MockGasFeeServiceMockRecorder) GetCurrentGasPrice(ctx, networkID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentGasPrice", reflect.TypeOf((*MockGasFeeService)(nil).GetCurrentGasPrice), ctx, networkID)
}

// MockDunningRetryEngine is a mock of DunningRetryEngine interface.
type MockDunningRetryEngine struct {
	ctrl     *gomock.Controller
	recorder *MockDunningRetryEngineMockRecorder
	isgomock struct{}
}

// MockDunningRetryEngineMockRecorder is the mock recorder for MockDunningRetryEngine.
type MockDunningRetryEngineMockRecorder struct {
	mock *MockDunningRetryEngine
}

// NewMockDunningRetryEngine creates a new mock instance.
func NewMockDunningRetryEngine(ctrl *gomock.Controller) *MockDunningRetryEngine {
	mock := &MockDunningRetryEngine{ctrl: ctrl}
	mock.recorder = &MockDunningRetryEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDunningRetryEngine) EXPECT() *MockDunningRetryEngineMockRecorder {
	return m.recorder
}

// ProcessDueCampaigns mocks base method.
func (m *MockDunningRetryEngine) ProcessDueCampaigns(ctx context.Context, limit int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessDueCampaigns", ctx, limit)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessDueCampaigns indicates an expected call of ProcessDueCampaigns.
func (mr *MockDunningRetryEngineMockRecorder) ProcessDueCampaigns(ctx, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessDueCampaigns", reflect.TypeOf((*MockDunningRetryEngine)(nil).ProcessDueCampaigns), ctx, limit)
}

// MockSubscriptionManagementService is a mock of SubscriptionManagementService interface.
type MockSubscriptionManagementService struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionManagementServiceMockRecorder
	isgomock struct{}
}

// MockSubscriptionManagementServiceMockRecorder is the mock recorder for MockSubscriptionManagementService.
type MockSubscriptionManagementServiceMockRecorder struct {
	mock *MockSubscriptionManagementService
}

// NewMockSubscriptionManagementService creates a new mock instance.
func NewMockSubscriptionManagementService(ctrl *gomock.Controller) *MockSubscriptionManagementService {
	mock := &MockSubscriptionManagementService{ctrl: ctrl}
	mock.recorder = &MockSubscriptionManagementServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionManagementService) EXPECT() *MockSubscriptionManagementServiceMockRecorder {
	return m.recorder
}

// CancelSubscription mocks base method.
func (m *MockSubscriptionManagementService) CancelSubscription(ctx context.Context, subscriptionID uuid.UUID, reason, feedback string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelSubscription", ctx, subscriptionID, reason, feedback)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelSubscription indicates an expected call of CancelSubscription.
func (mr *MockSubscriptionManagementServiceMockRecorder) CancelSubscription(ctx, subscriptionID, reason, feedback any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelSubscription", reflect.TypeOf((*MockSubscriptionManagementService)(nil).CancelSubscription), ctx, subscriptionID, reason, feedback)
}

// DowngradeSubscription mocks base method.
func (m *MockSubscriptionManagementService) DowngradeSubscription(ctx context.Context, subscriptionID uuid.UUID, newLineItems []services.LineItemUpdate, reason string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DowngradeSubscription", ctx, subscriptionID, newLineItems, reason)
	ret0, _ := ret[0].(error)
	return ret0
}

// DowngradeSubscription indicates an expected call of DowngradeSubscription.
func (mr *MockSubscriptionManagementServiceMockRecorder) DowngradeSubscription(ctx, subscriptionID, newLineItems, reason any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DowngradeSubscription", reflect.TypeOf((*MockSubscriptionManagementService)(nil).DowngradeSubscription), ctx, subscriptionID, newLineItems, reason)
}

// GetSubscriptionHistory mocks base method.
func (m *MockSubscriptionManagementService) GetSubscriptionHistory(ctx context.Context, subscriptionID uuid.UUID, limit int32) ([]db.SubscriptionStateHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionHistory", ctx, subscriptionID, limit)
	ret0, _ := ret[0].([]db.SubscriptionStateHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionHistory indicates an expected call of GetSubscriptionHistory.
func (mr *MockSubscriptionManagementServiceMockRecorder) GetSubscriptionHistory(ctx, subscriptionID, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionHistory", reflect.TypeOf((*MockSubscriptionManagementService)(nil).GetSubscriptionHistory), ctx, subscriptionID, limit)
}

// PauseSubscription mocks base method.
func (m *MockSubscriptionManagementService) PauseSubscription(ctx context.Context, subscriptionID uuid.UUID, pauseUntil *time.Time, reason string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PauseSubscription", ctx, subscriptionID, pauseUntil, reason)
	ret0, _ := ret[0].(error)
	return ret0
}

// PauseSubscription indicates an expected call of PauseSubscription.
func (mr *MockSubscriptionManagementServiceMockRecorder) PauseSubscription(ctx, subscriptionID, pauseUntil, reason any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PauseSubscription", reflect.TypeOf((*MockSubscriptionManagementService)(nil).PauseSubscription), ctx, subscriptionID, pauseUntil, reason)
}

// PreviewChange mocks base method.
func (m *MockSubscriptionManagementService) PreviewChange(ctx context.Context, subscriptionID uuid.UUID, changeType string, lineItems []services.LineItemUpdate) (*services.ChangePreview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreviewChange", ctx, subscriptionID, changeType, lineItems)
	ret0, _ := ret[0].(*services.ChangePreview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PreviewChange indicates an expected call of PreviewChange.
func (mr *MockSubscriptionManagementServiceMockRecorder) PreviewChange(ctx, subscriptionID, changeType, lineItems any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreviewChange", reflect.TypeOf((*MockSubscriptionManagementService)(nil).PreviewChange), ctx, subscriptionID, changeType, lineItems)
}

// ProcessScheduledChanges mocks base method.
func (m *MockSubscriptionManagementService) ProcessScheduledChanges(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessScheduledChanges", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessScheduledChanges indicates an expected call of ProcessScheduledChanges.
func (mr *MockSubscriptionManagementServiceMockRecorder) ProcessScheduledChanges(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessScheduledChanges", reflect.TypeOf((*MockSubscriptionManagementService)(nil).ProcessScheduledChanges), ctx)
}

// ReactivateCancelledSubscription mocks base method.
func (m *MockSubscriptionManagementService) ReactivateCancelledSubscription(ctx context.Context, subscriptionID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReactivateCancelledSubscription", ctx, subscriptionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReactivateCancelledSubscription indicates an expected call of ReactivateCancelledSubscription.
func (mr *MockSubscriptionManagementServiceMockRecorder) ReactivateCancelledSubscription(ctx, subscriptionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReactivateCancelledSubscription", reflect.TypeOf((*MockSubscriptionManagementService)(nil).ReactivateCancelledSubscription), ctx, subscriptionID)
}

// ResumeSubscription mocks base method.
func (m *MockSubscriptionManagementService) ResumeSubscription(ctx context.Context, subscriptionID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeSubscription", ctx, subscriptionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResumeSubscription indicates an expected call of ResumeSubscription.
func (mr *MockSubscriptionManagementServiceMockRecorder) ResumeSubscription(ctx, subscriptionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeSubscription", reflect.TypeOf((*MockSubscriptionManagementService)(nil).ResumeSubscription), ctx, subscriptionID)
}

// UpgradeSubscription mocks base method.
func (m *MockSubscriptionManagementService) UpgradeSubscription(ctx context.Context, subscriptionID uuid.UUID, newLineItems []services.LineItemUpdate, reason string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeSubscription", ctx, subscriptionID, newLineItems, reason)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpgradeSubscription indicates an expected call of UpgradeSubscription.
func (mr *MockSubscriptionManagementServiceMockRecorder) UpgradeSubscription(ctx, subscriptionID, newLineItems, reason any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeSubscription", reflect.TypeOf((*MockSubscriptionManagementService)(nil).UpgradeSubscription), ctx, subscriptionID, newLineItems, reason)
}

// MockCustomerService is a mock of CustomerService interface.
type MockCustomerService struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerServiceMockRecorder
	isgomock struct{}
}

// MockCustomerServiceMockRecorder is the mock recorder for MockCustomerService.
type MockCustomerServiceMockRecorder struct {
	mock *MockCustomerService
}

// NewMockCustomerService creates a new mock instance.
func NewMockCustomerService(ctrl *gomock.Controller) *MockCustomerService {
	mock := &MockCustomerService{ctrl: ctrl}
	mock.recorder = &MockCustomerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerService) EXPECT() *MockCustomerServiceMockRecorder {
	return m.recorder
}

// AddCustomerToWorkspace mocks base method.
func (m *MockCustomerService) AddCustomerToWorkspace(ctx context.Context, workspaceID, customerID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCustomerToWorkspace", ctx, workspaceID, customerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCustomerToWorkspace indicates an expected call of AddCustomerToWorkspace.
func (mr *MockCustomerServiceMockRecorder) AddCustomerToWorkspace(ctx, workspaceID, customerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCustomerToWorkspace", reflect.TypeOf((*MockCustomerService)(nil).AddCustomerToWorkspace), ctx, workspaceID, customerID)
}

// CreateCustomer mocks base method.
func (m *MockCustomerService) CreateCustomer(ctx context.Context, params services.CreateCustomerParams) (*db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomer", ctx, params)
	ret0, _ := ret[0].(*db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomer indicates an expected call of CreateCustomer.
func (mr *MockCustomerServiceMockRecorder) CreateCustomer(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomer", reflect.TypeOf((*MockCustomerService)(nil).CreateCustomer), ctx, params)
}

// CreateCustomerWallet mocks base method.
func (m *MockCustomerService) CreateCustomerWallet(ctx context.Context, params services.CreateCustomerWalletParams) (*db.CustomerWallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomerWallet", ctx, params)
	ret0, _ := ret[0].(*db.CustomerWallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomerWallet indicates an expected call of CreateCustomerWallet.
func (mr *MockCustomerServiceMockRecorder) CreateCustomerWallet(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomerWallet", reflect.TypeOf((*MockCustomerService)(nil).CreateCustomerWallet), ctx, params)
}

// CreateCustomerWithWeb3Auth mocks base method.
func (m *MockCustomerService) CreateCustomerWithWeb3Auth(ctx context.Context, params services.CreateCustomerWithWeb3AuthParams) (*db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomerWithWeb3Auth", ctx, params)
	ret0, _ := ret[0].(*db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomerWithWeb3Auth indicates an expected call of CreateCustomerWithWeb3Auth.
func (mr *MockCustomerServiceMockRecorder) CreateCustomerWithWeb3Auth(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomerWithWeb3Auth", reflect.TypeOf((*MockCustomerService)(nil).CreateCustomerWithWeb3Auth), ctx, params)
}

// DeleteCustomer mocks base method.
func (m *MockCustomerService) DeleteCustomer(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomer", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCustomer indicates an expected call of DeleteCustomer.
func (mr *MockCustomerServiceMockRecorder) DeleteCustomer(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomer", reflect.TypeOf((*MockCustomerService)(nil).DeleteCustomer), ctx, id)
}

// GetCustomer mocks base method.
func (m *MockCustomerService) GetCustomer(ctx context.Context, id uuid.UUID) (*db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomer", ctx, id)
	ret0, _ := ret[0].(*db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomer indicates an expected call of GetCustomer.
func (mr *MockCustomerServiceMockRecorder) GetCustomer(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomer", reflect.TypeOf((*MockCustomerService)(nil).GetCustomer), ctx, id)
}

// GetCustomerByWeb3AuthID mocks base method.
func (m *MockCustomerService) GetCustomerByWeb3AuthID(ctx context.Context, web3authID string) (*db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerByWeb3AuthID", ctx, web3authID)
	ret0, _ := ret[0].(*db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerByWeb3AuthID indicates an expected call of GetCustomerByWeb3AuthID.
func (mr *MockCustomerServiceMockRecorder) GetCustomerByWeb3AuthID(ctx, web3authID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerByWeb3AuthID", reflect.TypeOf((*MockCustomerService)(nil).GetCustomerByWeb3AuthID), ctx, web3authID)
}

// ListCustomerWallets mocks base method.
func (m *MockCustomerService) ListCustomerWallets(ctx context.Context, customerID uuid.UUID) ([]db.CustomerWallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomerWallets", ctx, customerID)
	ret0, _ := ret[0].([]db.CustomerWallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomerWallets indicates an expected call of ListCustomerWallets.
func (mr *MockCustomerServiceMockRecorder) ListCustomerWallets(ctx, customerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomerWallets", reflect.TypeOf((*MockCustomerService)(nil).ListCustomerWallets), ctx, customerID)
}

// ListCustomers mocks base method.
func (m *MockCustomerService) ListCustomers(ctx context.Context, params services.ListCustomersParams) (*services.ListCustomersResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomers", ctx, params)
	ret0, _ := ret[0].(*services.ListCustomersResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomers indicates an expected call of ListCustomers.
func (mr *MockCustomerServiceMockRecorder) ListCustomers(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomers", reflect.TypeOf((*MockCustomerService)(nil).ListCustomers), ctx, params)
}

// ListWorkspaceCustomers mocks base method.
func (m *MockCustomerService) ListWorkspaceCustomers(ctx context.Context, params services.ListWorkspaceCustomersParams) (*services.ListWorkspaceCustomersResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkspaceCustomers", ctx, params)
	ret0, _ := ret[0].(*services.ListWorkspaceCustomersResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkspaceCustomers indicates an expected call of ListWorkspaceCustomers.
func (mr *MockCustomerServiceMockRecorder) ListWorkspaceCustomers(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspaceCustomers", reflect.TypeOf((*MockCustomerService)(nil).ListWorkspaceCustomers), ctx, params)
}

// UpdateCustomer mocks base method.
func (m *MockCustomerService) UpdateCustomer(ctx context.Context, params services.UpdateCustomerParams) (*db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomer", ctx, params)
	ret0, _ := ret[0].(*db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCustomer indicates an expected call of UpdateCustomer.
func (mr *MockCustomerServiceMockRecorder) UpdateCustomer(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomer", reflect.TypeOf((*MockCustomerService)(nil).UpdateCustomer), ctx, params)
}

// UpdateCustomerOnboardingStatus mocks base method.
func (m *MockCustomerService) UpdateCustomerOnboardingStatus(ctx context.Context, customerID uuid.UUID, finishedOnboarding bool) (*db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomerOnboardingStatus", ctx, customerID, finishedOnboarding)
	ret0, _ := ret[0].(*db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCustomerOnboardingStatus indicates an expected call of UpdateCustomerOnboardingStatus.
func (mr *MockCustomerServiceMockRecorder) UpdateCustomerOnboardingStatus(ctx, customerID, finishedOnboarding any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomerOnboardingStatus", reflect.TypeOf((*MockCustomerService)(nil).UpdateCustomerOnboardingStatus), ctx, customerID, finishedOnboarding)
}

// MockWorkspaceService is a mock of WorkspaceService interface.
type MockWorkspaceService struct {
	ctrl     *gomock.Controller
	recorder *MockWorkspaceServiceMockRecorder
	isgomock struct{}
}

// MockWorkspaceServiceMockRecorder is the mock recorder for MockWorkspaceService.
type MockWorkspaceServiceMockRecorder struct {
	mock *MockWorkspaceService
}

// NewMockWorkspaceService creates a new mock instance.
func NewMockWorkspaceService(ctrl *gomock.Controller) *MockWorkspaceService {
	mock := &MockWorkspaceService{ctrl: ctrl}
	mock.recorder = &MockWorkspaceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkspaceService) EXPECT() *MockWorkspaceServiceMockRecorder {
	return m.recorder
}

// CreateWorkspace mocks base method.
func (m *MockWorkspaceService) CreateWorkspace(ctx context.Context, params services.CreateWorkspaceParams) (*db.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkspace", ctx, params)
	ret0, _ := ret[0].(*db.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkspace indicates an expected call of CreateWorkspace.
func (mr *MockWorkspaceServiceMockRecorder) CreateWorkspace(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkspace", reflect.TypeOf((*MockWorkspaceService)(nil).CreateWorkspace), ctx, params)
}

// DeleteWorkspace mocks base method.
func (m *MockWorkspaceService) DeleteWorkspace(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkspace", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorkspace indicates an expected call of DeleteWorkspace.
func (mr *MockWorkspaceServiceMockRecorder) DeleteWorkspace(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkspace", reflect.TypeOf((*MockWorkspaceService)(nil).DeleteWorkspace), ctx, id)
}

// GetAccountByWorkspace mocks base method.
func (m *MockWorkspaceService) GetAccountByWorkspace(ctx context.Context, workspaceID uuid.UUID) (*db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByWorkspace", ctx, workspaceID)
	ret0, _ := ret[0].(*db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByWorkspace indicates an expected call of GetAccountByWorkspace.
func (mr *MockWorkspaceServiceMockRecorder) GetAccountByWorkspace(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByWorkspace", reflect.TypeOf((*MockWorkspaceService)(nil).GetAccountByWorkspace), ctx, workspaceID)
}

// GetWorkspace mocks base method.
func (m *MockWorkspaceService) GetWorkspace(ctx context.Context, id uuid.UUID) (*db.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspace", ctx, id)
	ret0, _ := ret[0].(*db.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspace indicates an expected call of GetWorkspace.
func (mr *MockWorkspaceServiceMockRecorder) GetWorkspace(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspace", reflect.TypeOf((*MockWorkspaceService)(nil).GetWorkspace), ctx, id)
}

// GetWorkspaceStats mocks base method.
func (m *MockWorkspaceService) GetWorkspaceStats(ctx context.Context, workspaceID uuid.UUID) (*services.WorkspaceStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspaceStats", ctx, workspaceID)
	ret0, _ := ret[0].(*services.WorkspaceStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspaceStats indicates an expected call of GetWorkspaceStats.
func (mr *MockWorkspaceServiceMockRecorder) GetWorkspaceStats(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspaceStats", reflect.TypeOf((*MockWorkspaceService)(nil).GetWorkspaceStats), ctx, workspaceID)
}

// ListAllWorkspaces mocks base method.
func (m *MockWorkspaceService) ListAllWorkspaces(ctx context.Context) ([]db.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllWorkspaces", ctx)
	ret0, _ := ret[0].([]db.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllWorkspaces indicates an expected call of ListAllWorkspaces.
func (mr *MockWorkspaceServiceMockRecorder) ListAllWorkspaces(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllWorkspaces", reflect.TypeOf((*MockWorkspaceService)(nil).ListAllWorkspaces), ctx)
}

// ListWorkspacesByAccount mocks base method.
func (m *MockWorkspaceService) ListWorkspacesByAccount(ctx context.Context, accountID uuid.UUID) ([]db.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkspacesByAccount", ctx, accountID)
	ret0, _ := ret[0].([]db.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkspacesByAccount indicates an expected call of ListWorkspacesByAccount.
func (mr *MockWorkspaceServiceMockRecorder) ListWorkspacesByAccount(ctx, accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspacesByAccount", reflect.TypeOf((*MockWorkspaceService)(nil).ListWorkspacesByAccount), ctx, accountID)
}

// UpdateWorkspace mocks base method.
func (m *MockWorkspaceService) UpdateWorkspace(ctx context.Context, params services.UpdateWorkspaceParams) (*db.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkspace", ctx, params)
	ret0, _ := ret[0].(*db.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkspace indicates an expected call of UpdateWorkspace.
func (mr *MockWorkspaceServiceMockRecorder) UpdateWorkspace(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkspace", reflect.TypeOf((*MockWorkspaceService)(nil).UpdateWorkspace), ctx, params)
}

// MockProductService is a mock of ProductService interface.
type MockProductService struct {
	ctrl     *gomock.Controller
	recorder *MockProductServiceMockRecorder
	isgomock struct{}
}

// MockProductServiceMockRecorder is the mock recorder for MockProductService.
type MockProductServiceMockRecorder struct {
	mock *MockProductService
}

// NewMockProductService creates a new mock instance.
func NewMockProductService(ctrl *gomock.Controller) *MockProductService {
	mock := &MockProductService{ctrl: ctrl}
	mock.recorder = &MockProductServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductService) EXPECT() *MockProductServiceMockRecorder {
	return m.recorder
}

// CreateProduct mocks base method.
func (m *MockProductService) CreateProduct(ctx context.Context, params services.CreateProductParams) (*db.Product, []db.Price, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", ctx, params)
	ret0, _ := ret[0].(*db.Product)
	ret1, _ := ret[1].([]db.Price)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockProductServiceMockRecorder) CreateProduct(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockProductService)(nil).CreateProduct), ctx, params)
}

// DeleteProduct mocks base method.
func (m *MockProductService) DeleteProduct(ctx context.Context, productID, workspaceID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", ctx, productID, workspaceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockProductServiceMockRecorder) DeleteProduct(ctx, productID, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockProductService)(nil).DeleteProduct), ctx, productID, workspaceID)
}

// GetProduct mocks base method.
func (m *MockProductService) GetProduct(ctx context.Context, params services.GetProductParams) (*db.Product, []db.Price, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", ctx, params)
	ret0, _ := ret[0].(*db.Product)
	ret1, _ := ret[1].([]db.Price)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockProductServiceMockRecorder) GetProduct(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockProductService)(nil).GetProduct), ctx, params)
}

// GetPublicProductByPriceID mocks base method.
func (m *MockProductService) GetPublicProductByPriceID(ctx context.Context, priceID uuid.UUID) (*helpers.PublicProductResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicProductByPriceID", ctx, priceID)
	ret0, _ := ret[0].(*helpers.PublicProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicProductByPriceID indicates an expected call of GetPublicProductByPriceID.
func (mr *MockProductServiceMockRecorder) GetPublicProductByPriceID(ctx, priceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicProductByPriceID", reflect.TypeOf((*MockProductService)(nil).GetPublicProductByPriceID), ctx, priceID)
}

// ListProducts mocks base method.
func (m *MockProductService) ListProducts(ctx context.Context, params services.ListProductsParams) (*services.ListProductsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProducts", ctx, params)
	ret0, _ := ret[0].(*services.ListProductsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProducts indicates an expected call of ListProducts.
func (mr *MockProductServiceMockRecorder) ListProducts(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProducts", reflect.TypeOf((*MockProductService)(nil).ListProducts), ctx, params)
}

// UpdateProduct mocks base method.
func (m *MockProductService) UpdateProduct(ctx context.Context, params services.UpdateProductParams) (*db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", ctx, params)
	ret0, _ := ret[0].(*db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockProductServiceMockRecorder) UpdateProduct(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockProductService)(nil).UpdateProduct), ctx, params)
}

// MockWalletService is a mock of WalletService interface.
type MockWalletService struct {
	ctrl     *gomock.Controller
	recorder *MockWalletServiceMockRecorder
	isgomock struct{}
}

// MockWalletServiceMockRecorder is the mock recorder for MockWalletService.
type MockWalletServiceMockRecorder struct {
	mock *MockWalletService
}

// NewMockWalletService creates a new mock instance.
func NewMockWalletService(ctrl *gomock.Controller) *MockWalletService {
	mock := &MockWalletService{ctrl: ctrl}
	mock.recorder = &MockWalletServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletService) EXPECT() *MockWalletServiceMockRecorder {
	return m.recorder
}

// CreateWallet mocks base method.
func (m *MockWalletService) CreateWallet(ctx context.Context, params services.CreateWalletParams) (*db.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", ctx, params)
	ret0, _ := ret[0].(*db.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWallet indicates an expected call of CreateWallet.
func (mr *MockWalletServiceMockRecorder) CreateWallet(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockWalletService)(nil).CreateWallet), ctx, params)
}

// CreateWalletsForAllNetworks mocks base method.
func (m *MockWalletService) CreateWalletsForAllNetworks(ctx context.Context, params services.CreateWalletParams) ([]db.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWalletsForAllNetworks", ctx, params)
	ret0, _ := ret[0].([]db.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWalletsForAllNetworks indicates an expected call of CreateWalletsForAllNetworks.
func (mr *MockWalletServiceMockRecorder) CreateWalletsForAllNetworks(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWalletsForAllNetworks", reflect.TypeOf((*MockWalletService)(nil).CreateWalletsForAllNetworks), ctx, params)
}

// DeleteWallet mocks base method.
func (m *MockWalletService) DeleteWallet(ctx context.Context, walletID, workspaceID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWallet", ctx, walletID, workspaceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWallet indicates an expected call of DeleteWallet.
func (mr *MockWalletServiceMockRecorder) DeleteWallet(ctx, walletID, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWallet", reflect.TypeOf((*MockWalletService)(nil).DeleteWallet), ctx, walletID, workspaceID)
}

// GetWallet mocks base method.
func (m *MockWalletService) GetWallet(ctx context.Context, walletID, workspaceID uuid.UUID) (*db.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWallet", ctx, walletID, workspaceID)
	ret0, _ := ret[0].(*db.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWallet indicates an expected call of GetWallet.
func (mr *MockWalletServiceMockRecorder) GetWallet(ctx, walletID, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWallet", reflect.TypeOf((*MockWalletService)(nil).GetWallet), ctx, walletID, workspaceID)
}

// GetWalletByAddressAndNetwork mocks base method.
func (m *MockWalletService) GetWalletByAddressAndNetwork(ctx context.Context, workspaceID uuid.UUID, walletAddress, networkType string) (*db.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletByAddressAndNetwork", ctx, workspaceID, walletAddress, networkType)
	ret0, _ := ret[0].(*db.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletByAddressAndNetwork indicates an expected call of GetWalletByAddressAndNetwork.
func (mr *MockWalletServiceMockRecorder) GetWalletByAddressAndNetwork(ctx, workspaceID, walletAddress, networkType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletByAddressAndNetwork", reflect.TypeOf((*MockWalletService)(nil).GetWalletByAddressAndNetwork), ctx, workspaceID, walletAddress, networkType)
}

// GetWalletWithCircleData mocks base method.
func (m *MockWalletService) GetWalletWithCircleData(ctx context.Context, walletID, workspaceID uuid.UUID) (*services.WalletWithCircleData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletWithCircleData", ctx, walletID, workspaceID)
	ret0, _ := ret[0].(*services.WalletWithCircleData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletWithCircleData indicates an expected call of GetWalletWithCircleData.
func (mr *MockWalletServiceMockRecorder) GetWalletWithCircleData(ctx, walletID, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletWithCircleData", reflect.TypeOf((*MockWalletService)(nil).GetWalletWithCircleData), ctx, walletID, workspaceID)
}

// ListCircleWallets mocks base method.
func (m *MockWalletService) ListCircleWallets(ctx context.Context, workspaceID uuid.UUID) ([]db.ListCircleWalletsByWorkspaceIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCircleWallets", ctx, workspaceID)
	ret0, _ := ret[0].([]db.ListCircleWalletsByWorkspaceIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCircleWallets indicates an expected call of ListCircleWallets.
func (mr *MockWalletServiceMockRecorder) ListCircleWallets(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCircleWallets", reflect.TypeOf((*MockWalletService)(nil).ListCircleWallets), ctx, workspaceID)
}

// ListWalletsByType mocks base method.
func (m *MockWalletService) ListWalletsByType(ctx context.Context, workspaceID uuid.UUID, walletType string) ([]db.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWalletsByType", ctx, workspaceID, walletType)
	ret0, _ := ret[0].([]db.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWalletsByType indicates an expected call of ListWalletsByType.
func (mr *MockWalletServiceMockRecorder) ListWalletsByType(ctx, workspaceID, walletType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWalletsByType", reflect.TypeOf((*MockWalletService)(nil).ListWalletsByType), ctx, workspaceID, walletType)
}

// ListWalletsByWorkspace mocks base method.
func (m *MockWalletService) ListWalletsByWorkspace(ctx context.Context, workspaceID uuid.UUID) ([]db.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWalletsByWorkspace", ctx, workspaceID)
	ret0, _ := ret[0].([]db.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWalletsByWorkspace indicates an expected call of ListWalletsByWorkspace.
func (mr *MockWalletServiceMockRecorder) ListWalletsByWorkspace(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWalletsByWorkspace", reflect.TypeOf((*MockWalletService)(nil).ListWalletsByWorkspace), ctx, workspaceID)
}

// ListWalletsWithCircleData mocks base method.
func (m *MockWalletService) ListWalletsWithCircleData(ctx context.Context, workspaceID uuid.UUID) ([]db.ListWalletsWithCircleDataByWorkspaceIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWalletsWithCircleData", ctx, workspaceID)
	ret0, _ := ret[0].([]db.ListWalletsWithCircleDataByWorkspaceIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWalletsWithCircleData indicates an expected call of ListWalletsWithCircleData.
func (mr *MockWalletServiceMockRecorder) ListWalletsWithCircleData(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWalletsWithCircleData", reflect.TypeOf((*MockWalletService)(nil).ListWalletsWithCircleData), ctx, workspaceID)
}

// UpdateWallet mocks base method.
func (m *MockWalletService) UpdateWallet(ctx context.Context, workspaceID uuid.UUID, params services.UpdateWalletParams) (*db.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWallet", ctx, workspaceID, params)
	ret0, _ := ret[0].(*db.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWallet indicates an expected call of UpdateWallet.
func (mr *MockWalletServiceMockRecorder) UpdateWallet(ctx, workspaceID, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWallet", reflect.TypeOf((*MockWalletService)(nil).UpdateWallet), ctx, workspaceID, params)
}

// UpdateWalletLastUsed mocks base method.
func (m *MockWalletService) UpdateWalletLastUsed(ctx context.Context, walletID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWalletLastUsed", ctx, walletID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWalletLastUsed indicates an expected call of UpdateWalletLastUsed.
func (mr *MockWalletServiceMockRecorder) UpdateWalletLastUsed(ctx, walletID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWalletLastUsed", reflect.TypeOf((*MockWalletService)(nil).UpdateWalletLastUsed), ctx, walletID)
}

// ValidateWalletAccess mocks base method.
func (m *MockWalletService) ValidateWalletAccess(ctx context.Context, walletID, workspaceID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateWalletAccess", ctx, walletID, workspaceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateWalletAccess indicates an expected call of ValidateWalletAccess.
func (mr *MockWalletServiceMockRecorder) ValidateWalletAccess(ctx, walletID, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateWalletAccess", reflect.TypeOf((*MockWalletService)(nil).ValidateWalletAccess), ctx, walletID, workspaceID)
}

// MockTokenService is a mock of TokenService interface.
type MockTokenService struct {
	ctrl     *gomock.Controller
	recorder *MockTokenServiceMockRecorder
	isgomock struct{}
}

// MockTokenServiceMockRecorder is the mock recorder for MockTokenService.
type MockTokenServiceMockRecorder struct {
	mock *MockTokenService
}

// NewMockTokenService creates a new mock instance.
func NewMockTokenService(ctrl *gomock.Controller) *MockTokenService {
	mock := &MockTokenService{ctrl: ctrl}
	mock.recorder = &MockTokenServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenService) EXPECT() *MockTokenServiceMockRecorder {
	return m.recorder
}

// GetToken mocks base method.
func (m *MockTokenService) GetToken(ctx context.Context, tokenID uuid.UUID) (*db.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", ctx, tokenID)
	ret0, _ := ret[0].(*db.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToken indicates an expected call of GetToken.
func (mr *MockTokenServiceMockRecorder) GetToken(ctx, tokenID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockTokenService)(nil).GetToken), ctx, tokenID)
}

// GetTokenByAddress mocks base method.
func (m *MockTokenService) GetTokenByAddress(ctx context.Context, networkID uuid.UUID, contractAddress string) (*db.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenByAddress", ctx, networkID, contractAddress)
	ret0, _ := ret[0].(*db.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenByAddress indicates an expected call of GetTokenByAddress.
func (mr *MockTokenServiceMockRecorder) GetTokenByAddress(ctx, networkID, contractAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenByAddress", reflect.TypeOf((*MockTokenService)(nil).GetTokenByAddress), ctx, networkID, contractAddress)
}

// GetTokenQuote mocks base method.
func (m *MockTokenService) GetTokenQuote(ctx context.Context, params services.TokenQuoteParams) (*services.TokenQuoteResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenQuote", ctx, params)
	ret0, _ := ret[0].(*services.TokenQuoteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenQuote indicates an expected call of GetTokenQuote.
func (mr *MockTokenServiceMockRecorder) GetTokenQuote(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenQuote", reflect.TypeOf((*MockTokenService)(nil).GetTokenQuote), ctx, params)
}

// ListTokens mocks base method.
func (m *MockTokenService) ListTokens(ctx context.Context) ([]db.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTokens", ctx)
	ret0, _ := ret[0].([]db.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTokens indicates an expected call of ListTokens.
func (mr *MockTokenServiceMockRecorder) ListTokens(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTokens", reflect.TypeOf((*MockTokenService)(nil).ListTokens), ctx)
}

// ListTokensByNetwork mocks base method.
func (m *MockTokenService) ListTokensByNetwork(ctx context.Context, networkID uuid.UUID) ([]db.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTokensByNetwork", ctx, networkID)
	ret0, _ := ret[0].([]db.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTokensByNetwork indicates an expected call of ListTokensByNetwork.
func (mr *MockTokenServiceMockRecorder) ListTokensByNetwork(ctx, networkID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTokensByNetwork", reflect.TypeOf((*MockTokenService)(nil).ListTokensByNetwork), ctx, networkID)
}

// MockNetworkService is a mock of NetworkService interface.
type MockNetworkService struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkServiceMockRecorder
	isgomock struct{}
}

// MockNetworkServiceMockRecorder is the mock recorder for MockNetworkService.
type MockNetworkServiceMockRecorder struct {
	mock *MockNetworkService
}

// NewMockNetworkService creates a new mock instance.
func NewMockNetworkService(ctrl *gomock.Controller) *MockNetworkService {
	mock := &MockNetworkService{ctrl: ctrl}
	mock.recorder = &MockNetworkServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkService) EXPECT() *MockNetworkServiceMockRecorder {
	return m.recorder
}

// CreateNetwork mocks base method.
func (m *MockNetworkService) CreateNetwork(ctx context.Context, params services.CreateNetworkParams) (*db.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetwork", ctx, params)
	ret0, _ := ret[0].(*db.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNetwork indicates an expected call of CreateNetwork.
func (mr *MockNetworkServiceMockRecorder) CreateNetwork(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetwork", reflect.TypeOf((*MockNetworkService)(nil).CreateNetwork), ctx, params)
}

// DeleteNetwork mocks base method.
func (m *MockNetworkService) DeleteNetwork(ctx context.Context, networkID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetwork", ctx, networkID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetwork indicates an expected call of DeleteNetwork.
func (mr *MockNetworkServiceMockRecorder) DeleteNetwork(ctx, networkID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetwork", reflect.TypeOf((*MockNetworkService)(nil).DeleteNetwork), ctx, networkID)
}

// GetNetwork mocks base method.
func (m *MockNetworkService) GetNetwork(ctx context.Context, networkID uuid.UUID) (*db.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetwork", ctx, networkID)
	ret0, _ := ret[0].(*db.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetwork indicates an expected call of GetNetwork.
func (mr *MockNetworkServiceMockRecorder) GetNetwork(ctx, networkID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetwork", reflect.TypeOf((*MockNetworkService)(nil).GetNetwork), ctx, networkID)
}

// GetNetworkByChainID mocks base method.
func (m *MockNetworkService) GetNetworkByChainID(ctx context.Context, chainID int32) (*db.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkByChainID", ctx, chainID)
	ret0, _ := ret[0].(*db.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkByChainID indicates an expected call of GetNetworkByChainID.
func (mr *MockNetworkServiceMockRecorder) GetNetworkByChainID(ctx, chainID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkByChainID", reflect.TypeOf((*MockNetworkService)(nil).GetNetworkByChainID), ctx, chainID)
}

// ListActiveTokensByNetwork mocks base method.
func (m *MockNetworkService) ListActiveTokensByNetwork(ctx context.Context, networkID uuid.UUID) ([]db.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActiveTokensByNetwork", ctx, networkID)
	ret0, _ := ret[0].([]db.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActiveTokensByNetwork indicates an expected call of ListActiveTokensByNetwork.
func (mr *MockNetworkServiceMockRecorder) ListActiveTokensByNetwork(ctx, networkID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActiveTokensByNetwork", reflect.TypeOf((*MockNetworkService)(nil).ListActiveTokensByNetwork), ctx, networkID)
}

// ListNetworks mocks base method.
func (m *MockNetworkService) ListNetworks(ctx context.Context, params services.ListNetworksParams) ([]db.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNetworks", ctx, params)
	ret0, _ := ret[0].([]db.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNetworks indicates an expected call of ListNetworks.
func (mr *MockNetworkServiceMockRecorder) ListNetworks(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNetworks", reflect.TypeOf((*MockNetworkService)(nil).ListNetworks), ctx, params)
}

// UpdateNetwork mocks base method.
func (m *MockNetworkService) UpdateNetwork(ctx context.Context, params services.UpdateNetworkParams) (*db.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNetwork", ctx, params)
	ret0, _ := ret[0].(*db.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNetwork indicates an expected call of UpdateNetwork.
func (mr *MockNetworkServiceMockRecorder) UpdateNetwork(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetwork", reflect.TypeOf((*MockNetworkService)(nil).UpdateNetwork), ctx, params)
}

// MockAPIKeyService is a mock of APIKeyService interface.
type MockAPIKeyService struct {
	ctrl     *gomock.Controller
	recorder *MockAPIKeyServiceMockRecorder
	isgomock struct{}
}

// MockAPIKeyServiceMockRecorder is the mock recorder for MockAPIKeyService.
type MockAPIKeyServiceMockRecorder struct {
	mock *MockAPIKeyService
}

// NewMockAPIKeyService creates a new mock instance.
func NewMockAPIKeyService(ctrl *gomock.Controller) *MockAPIKeyService {
	mock := &MockAPIKeyService{ctrl: ctrl}
	mock.recorder = &MockAPIKeyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIKeyService) EXPECT() *MockAPIKeyServiceMockRecorder {
	return m.recorder
}

// CreateAPIKey mocks base method.
func (m *MockAPIKeyService) CreateAPIKey(ctx context.Context, params services.CreateAPIKeyParams) (db.ApiKey, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAPIKey", ctx, params)
	ret0, _ := ret[0].(db.ApiKey)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// CreateAPIKey indicates an expected call of CreateAPIKey.
func (mr *MockAPIKeyServiceMockRecorder) CreateAPIKey(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAPIKey", reflect.TypeOf((*MockAPIKeyService)(nil).CreateAPIKey), ctx, params)
}

// DeleteAPIKey mocks base method.
func (m *MockAPIKeyService) DeleteAPIKey(ctx context.Context, id, workspaceID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAPIKey", ctx, id, workspaceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAPIKey indicates an expected call of DeleteAPIKey.
func (mr *MockAPIKeyServiceMockRecorder) DeleteAPIKey(ctx, id, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAPIKey", reflect.TypeOf((*MockAPIKeyService)(nil).DeleteAPIKey), ctx, id, workspaceID)
}

// GetAPIKey mocks base method.
func (m *MockAPIKeyService) GetAPIKey(ctx context.Context, id, workspaceID uuid.UUID) (db.ApiKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIKey", ctx, id, workspaceID)
	ret0, _ := ret[0].(db.ApiKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIKey indicates an expected call of GetAPIKey.
func (mr *MockAPIKeyServiceMockRecorder) GetAPIKey(ctx, id, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIKey", reflect.TypeOf((*MockAPIKeyService)(nil).GetAPIKey), ctx, id, workspaceID)
}

// GetAllAPIKeys mocks base method.
func (m *MockAPIKeyService) GetAllAPIKeys(ctx context.Context) ([]db.ApiKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAPIKeys", ctx)
	ret0, _ := ret[0].([]db.ApiKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAPIKeys indicates an expected call of GetAllAPIKeys.
func (mr *MockAPIKeyServiceMockRecorder) GetAllAPIKeys(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAPIKeys", reflect.TypeOf((*MockAPIKeyService)(nil).GetAllAPIKeys), ctx)
}

// ListAPIKeys mocks base method.
func (m *MockAPIKeyService) ListAPIKeys(ctx context.Context, workspaceID uuid.UUID) ([]db.ApiKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAPIKeys", ctx, workspaceID)
	ret0, _ := ret[0].([]db.ApiKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAPIKeys indicates an expected call of ListAPIKeys.
func (mr *MockAPIKeyServiceMockRecorder) ListAPIKeys(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAPIKeys", reflect.TypeOf((*MockAPIKeyService)(nil).ListAPIKeys), ctx, workspaceID)
}

// UpdateAPIKey mocks base method.
func (m *MockAPIKeyService) UpdateAPIKey(ctx context.Context, params services.UpdateAPIKeyParams) (db.ApiKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAPIKey", ctx, params)
	ret0, _ := ret[0].(db.ApiKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAPIKey indicates an expected call of UpdateAPIKey.
func (mr *MockAPIKeyServiceMockRecorder) UpdateAPIKey(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAPIKey", reflect.TypeOf((*MockAPIKeyService)(nil).UpdateAPIKey), ctx, params)
}

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
	isgomock struct{}
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserService) CreateUser(ctx context.Context, params services.CreateUserParams) (*db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, params)
	ret0, _ := ret[0].(*db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserServiceMockRecorder) CreateUser(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserService)(nil).CreateUser), ctx, params)
}

// DeleteUser mocks base method.
func (m *MockUserService) DeleteUser(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserServiceMockRecorder) DeleteUser(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserService)(nil).DeleteUser), ctx, id)
}

// GetUser mocks base method.
func (m *MockUserService) GetUser(ctx context.Context, id uuid.UUID) (*db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, id)
	ret0, _ := ret[0].(*db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserServiceMockRecorder) GetUser(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserService)(nil).GetUser), ctx, id)
}

// GetUserAccount mocks base method.
func (m *MockUserService) GetUserAccount(ctx context.Context, userID uuid.UUID) (*db.GetUserAccountRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAccount", ctx, userID)
	ret0, _ := ret[0].(*db.GetUserAccountRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAccount indicates an expected call of GetUserAccount.
func (mr *MockUserServiceMockRecorder) GetUserAccount(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAccount", reflect.TypeOf((*MockUserService)(nil).GetUserAccount), ctx, userID)
}

// GetUserByEmail mocks base method.
func (m *MockUserService) GetUserByEmail(ctx context.Context, email string) (*db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserServiceMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserService)(nil).GetUserByEmail), ctx, email)
}

// GetUserWithWorkspaceAccess mocks base method.
func (m *MockUserService) GetUserWithWorkspaceAccess(ctx context.Context, userID, workspaceID uuid.UUID) (*db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWithWorkspaceAccess", ctx, userID, workspaceID)
	ret0, _ := ret[0].(*db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWithWorkspaceAccess indicates an expected call of GetUserWithWorkspaceAccess.
func (mr *MockUserServiceMockRecorder) GetUserWithWorkspaceAccess(ctx, userID, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWithWorkspaceAccess", reflect.TypeOf((*MockUserService)(nil).GetUserWithWorkspaceAccess), ctx, userID, workspaceID)
}

// UpdateUser mocks base method.
func (m *MockUserService) UpdateUser(ctx context.Context, params services.UpdateUserParams) (*db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, params)
	ret0, _ := ret[0].(*db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserServiceMockRecorder) UpdateUser(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserService)(nil).UpdateUser), ctx, params)
}

// MockAccountService is a mock of AccountService interface.
type MockAccountService struct {
	ctrl     *gomock.Controller
	recorder *MockAccountServiceMockRecorder
	isgomock struct{}
}

// MockAccountServiceMockRecorder is the mock recorder for MockAccountService.
type MockAccountServiceMockRecorder struct {
	mock *MockAccountService
}

// NewMockAccountService creates a new mock instance.
func NewMockAccountService(ctrl *gomock.Controller) *MockAccountService {
	mock := &MockAccountService{ctrl: ctrl}
	mock.recorder = &MockAccountServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountService) EXPECT() *MockAccountServiceMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockAccountService) CreateAccount(ctx context.Context, params services.CreateAccountParams) (*db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx, params)
	ret0, _ := ret[0].(*db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockAccountServiceMockRecorder) CreateAccount(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockAccountService)(nil).CreateAccount), ctx, params)
}

// DeleteAccount mocks base method.
func (m *MockAccountService) DeleteAccount(ctx context.Context, accountID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", ctx, accountID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockAccountServiceMockRecorder) DeleteAccount(ctx, accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockAccountService)(nil).DeleteAccount), ctx, accountID)
}

// GetAccount mocks base method.
func (m *MockAccountService) GetAccount(ctx context.Context, accountID uuid.UUID) (*db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", ctx, accountID)
	ret0, _ := ret[0].(*db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockAccountServiceMockRecorder) GetAccount(ctx, accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccountService)(nil).GetAccount), ctx, accountID)
}

// ListAccounts mocks base method.
func (m *MockAccountService) ListAccounts(ctx context.Context) ([]db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccounts", ctx)
	ret0, _ := ret[0].([]db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccounts indicates an expected call of ListAccounts.
func (mr *MockAccountServiceMockRecorder) ListAccounts(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccounts", reflect.TypeOf((*MockAccountService)(nil).ListAccounts), ctx)
}

// OnboardAccount mocks base method.
func (m *MockAccountService) OnboardAccount(ctx context.Context, params services.OnboardAccountParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnboardAccount", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnboardAccount indicates an expected call of OnboardAccount.
func (mr *MockAccountServiceMockRecorder) OnboardAccount(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnboardAccount", reflect.TypeOf((*MockAccountService)(nil).OnboardAccount), ctx, params)
}

// SignInOrRegisterAccount mocks base method.
func (m *MockAccountService) SignInOrRegisterAccount(ctx context.Context, createParams services.CreateAccountParams, web3authId, email string) (*services.SignInRegisterData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignInOrRegisterAccount", ctx, createParams, web3authId, email)
	ret0, _ := ret[0].(*services.SignInRegisterData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignInOrRegisterAccount indicates an expected call of SignInOrRegisterAccount.
func (mr *MockAccountServiceMockRecorder) SignInOrRegisterAccount(ctx, createParams, web3authId, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignInOrRegisterAccount", reflect.TypeOf((*MockAccountService)(nil).SignInOrRegisterAccount), ctx, createParams, web3authId, email)
}

// UpdateAccount mocks base method.
func (m *MockAccountService) UpdateAccount(ctx context.Context, params services.UpdateAccountParams) (*db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccount", ctx, params)
	ret0, _ := ret[0].(*db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccount indicates an expected call of UpdateAccount.
func (mr *MockAccountServiceMockRecorder) UpdateAccount(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockAccountService)(nil).UpdateAccount), ctx, params)
}

// ValidateAccountAccess mocks base method.
func (m *MockAccountService) ValidateAccountAccess(ctx context.Context, accountID, workspaceID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAccountAccess", ctx, accountID, workspaceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateAccountAccess indicates an expected call of ValidateAccountAccess.
func (mr *MockAccountServiceMockRecorder) ValidateAccountAccess(ctx, accountID, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAccountAccess", reflect.TypeOf((*MockAccountService)(nil).ValidateAccountAccess), ctx, accountID, workspaceID)
}

// ValidateSignInRequest mocks base method.
func (m *MockAccountService) ValidateSignInRequest(metadata map[string]any) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateSignInRequest", metadata)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ValidateSignInRequest indicates an expected call of ValidateSignInRequest.
func (mr *MockAccountServiceMockRecorder) ValidateSignInRequest(metadata any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSignInRequest", reflect.TypeOf((*MockAccountService)(nil).ValidateSignInRequest), metadata)
}

// MockCurrencyService is a mock of CurrencyService interface.
type MockCurrencyService struct {
	ctrl     *gomock.Controller
	recorder *MockCurrencyServiceMockRecorder
	isgomock struct{}
}

// MockCurrencyServiceMockRecorder is the mock recorder for MockCurrencyService.
type MockCurrencyServiceMockRecorder struct {
	mock *MockCurrencyService
}

// NewMockCurrencyService creates a new mock instance.
func NewMockCurrencyService(ctrl *gomock.Controller) *MockCurrencyService {
	mock := &MockCurrencyService{ctrl: ctrl}
	mock.recorder = &MockCurrencyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCurrencyService) EXPECT() *MockCurrencyServiceMockRecorder {
	return m.recorder
}

// FormatAmount mocks base method.
func (m *MockCurrencyService) FormatAmount(ctx context.Context, amountCents int64, currencyCode string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatAmount", ctx, amountCents, currencyCode)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FormatAmount indicates an expected call of FormatAmount.
func (mr *MockCurrencyServiceMockRecorder) FormatAmount(ctx, amountCents, currencyCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatAmount", reflect.TypeOf((*MockCurrencyService)(nil).FormatAmount), ctx, amountCents, currencyCode)
}

// FormatAmountWithCode mocks base method.
func (m *MockCurrencyService) FormatAmountWithCode(ctx context.Context, amountCents int64, currencyCode string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatAmountWithCode", ctx, amountCents, currencyCode)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FormatAmountWithCode indicates an expected call of FormatAmountWithCode.
func (mr *MockCurrencyServiceMockRecorder) FormatAmountWithCode(ctx, amountCents, currencyCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatAmountWithCode", reflect.TypeOf((*MockCurrencyService)(nil).FormatAmountWithCode), ctx, amountCents, currencyCode)
}

// GetCurrency mocks base method.
func (m *MockCurrencyService) GetCurrency(ctx context.Context, code string) (*helpers.CurrencyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrency", ctx, code)
	ret0, _ := ret[0].(*helpers.CurrencyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrency indicates an expected call of GetCurrency.
func (mr *MockCurrencyServiceMockRecorder) GetCurrency(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrency", reflect.TypeOf((*MockCurrencyService)(nil).GetCurrency), ctx, code)
}

// GetWorkspaceCurrencySettings mocks base method.
func (m *MockCurrencyService) GetWorkspaceCurrencySettings(ctx context.Context, workspaceID uuid.UUID) (*services.WorkspaceCurrencySettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspaceCurrencySettings", ctx, workspaceID)
	ret0, _ := ret[0].(*services.WorkspaceCurrencySettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspaceCurrencySettings indicates an expected call of GetWorkspaceCurrencySettings.
func (mr *MockCurrencyServiceMockRecorder) GetWorkspaceCurrencySettings(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspaceCurrencySettings", reflect.TypeOf((*MockCurrencyService)(nil).GetWorkspaceCurrencySettings), ctx, workspaceID)
}

// ListActiveCurrencies mocks base method.
func (m *MockCurrencyService) ListActiveCurrencies(ctx context.Context) ([]helpers.CurrencyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActiveCurrencies", ctx)
	ret0, _ := ret[0].([]helpers.CurrencyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActiveCurrencies indicates an expected call of ListActiveCurrencies.
func (mr *MockCurrencyServiceMockRecorder) ListActiveCurrencies(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActiveCurrencies", reflect.TypeOf((*MockCurrencyService)(nil).ListActiveCurrencies), ctx)
}

// ListWorkspaceSupportedCurrencies mocks base method.
func (m *MockCurrencyService) ListWorkspaceSupportedCurrencies(ctx context.Context, workspaceID uuid.UUID) ([]helpers.CurrencyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkspaceSupportedCurrencies", ctx, workspaceID)
	ret0, _ := ret[0].([]helpers.CurrencyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkspaceSupportedCurrencies indicates an expected call of ListWorkspaceSupportedCurrencies.
func (mr *MockCurrencyServiceMockRecorder) ListWorkspaceSupportedCurrencies(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspaceSupportedCurrencies", reflect.TypeOf((*MockCurrencyService)(nil).ListWorkspaceSupportedCurrencies), ctx, workspaceID)
}

// UpdateWorkspaceCurrencySettings mocks base method.
func (m *MockCurrencyService) UpdateWorkspaceCurrencySettings(ctx context.Context, workspaceID uuid.UUID, req *services.UpdateWorkspaceCurrencyRequest) (*services.WorkspaceCurrencySettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkspaceCurrencySettings", ctx, workspaceID, req)
	ret0, _ := ret[0].(*services.WorkspaceCurrencySettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkspaceCurrencySettings indicates an expected call of UpdateWorkspaceCurrencySettings.
func (mr *MockCurrencyServiceMockRecorder) UpdateWorkspaceCurrencySettings(ctx, workspaceID, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkspaceCurrencySettings", reflect.TypeOf((*MockCurrencyService)(nil).UpdateWorkspaceCurrencySettings), ctx, workspaceID, req)
}

// MockDashboardMetricsService is a mock of DashboardMetricsService interface.
type MockDashboardMetricsService struct {
	ctrl     *gomock.Controller
	recorder *MockDashboardMetricsServiceMockRecorder
	isgomock struct{}
}

// MockDashboardMetricsServiceMockRecorder is the mock recorder for MockDashboardMetricsService.
type MockDashboardMetricsServiceMockRecorder struct {
	mock *MockDashboardMetricsService
}

// NewMockDashboardMetricsService creates a new mock instance.
func NewMockDashboardMetricsService(ctrl *gomock.Controller) *MockDashboardMetricsService {
	mock := &MockDashboardMetricsService{ctrl: ctrl}
	mock.recorder = &MockDashboardMetricsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDashboardMetricsService) EXPECT() *MockDashboardMetricsServiceMockRecorder {
	return m.recorder
}

// CreateDashboardMetric mocks base method.
func (m *MockDashboardMetricsService) CreateDashboardMetric(ctx context.Context, params db.CreateDashboardMetricParams) (*db.DashboardMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDashboardMetric", ctx, params)
	ret0, _ := ret[0].(*db.DashboardMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDashboardMetric indicates an expected call of CreateDashboardMetric.
func (mr *MockDashboardMetricsServiceMockRecorder) CreateDashboardMetric(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDashboardMetric", reflect.TypeOf((*MockDashboardMetricsService)(nil).CreateDashboardMetric), ctx, params)
}

// GetDailyMetrics mocks base method.
func (m *MockDashboardMetricsService) GetDailyMetrics(ctx context.Context, workspaceID uuid.UUID, date pgtype.Date) (*db.DashboardMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDailyMetrics", ctx, workspaceID, date)
	ret0, _ := ret[0].(*db.DashboardMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDailyMetrics indicates an expected call of GetDailyMetrics.
func (mr *MockDashboardMetricsServiceMockRecorder) GetDailyMetrics(ctx, workspaceID, date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDailyMetrics", reflect.TypeOf((*MockDashboardMetricsService)(nil).GetDailyMetrics), ctx, workspaceID, date)
}

// GetMetricsByDateRange mocks base method.
func (m *MockDashboardMetricsService) GetMetricsByDateRange(ctx context.Context, workspaceID uuid.UUID, startDate, endDate pgtype.Date) ([]db.DashboardMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricsByDateRange", ctx, workspaceID, startDate, endDate)
	ret0, _ := ret[0].([]db.DashboardMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricsByDateRange indicates an expected call of GetMetricsByDateRange.
func (mr *MockDashboardMetricsServiceMockRecorder) GetMetricsByDateRange(ctx, workspaceID, startDate, endDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricsByDateRange", reflect.TypeOf((*MockDashboardMetricsService)(nil).GetMetricsByDateRange), ctx, workspaceID, startDate, endDate)
}

// MockErrorRecoveryService is a mock of ErrorRecoveryService interface.
type MockErrorRecoveryService struct {
	ctrl     *gomock.Controller
	recorder *MockErrorRecoveryServiceMockRecorder
	isgomock struct{}
}

// MockErrorRecoveryServiceMockRecorder is the mock recorder for MockErrorRecoveryService.
type MockErrorRecoveryServiceMockRecorder struct {
	mock *MockErrorRecoveryService
}

// NewMockErrorRecoveryService creates a new mock instance.
func NewMockErrorRecoveryService(ctrl *gomock.Controller) *MockErrorRecoveryService {
	mock := &MockErrorRecoveryService{ctrl: ctrl}
	mock.recorder = &MockErrorRecoveryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockErrorRecoveryService) EXPECT() *MockErrorRecoveryServiceMockRecorder {
	return m.recorder
}

// GetDLQStats mocks base method.
func (m *MockErrorRecoveryService) GetDLQStats(ctx context.Context, workspaceID, providerName string, since time.Time) (*services.DLQProcessingStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDLQStats", ctx, workspaceID, providerName, since)
	ret0, _ := ret[0].(*services.DLQProcessingStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDLQStats indicates an expected call of GetDLQStats.
func (mr *MockErrorRecoveryServiceMockRecorder) GetDLQStats(ctx, workspaceID, providerName, since any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDLQStats", reflect.TypeOf((*MockErrorRecoveryService)(nil).GetDLQStats), ctx, workspaceID, providerName, since)
}

// RecoverSyncSession mocks base method.
func (m *MockErrorRecoveryService) RecoverSyncSession(ctx context.Context, req services.SyncRecoveryRequest) (*services.SyncRecoveryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecoverSyncSession", ctx, req)
	ret0, _ := ret[0].(*services.SyncRecoveryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecoverSyncSession indicates an expected call of RecoverSyncSession.
func (mr *MockErrorRecoveryServiceMockRecorder) RecoverSyncSession(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecoverSyncSession", reflect.TypeOf((*MockErrorRecoveryService)(nil).RecoverSyncSession), ctx, req)
}

// ReplayWebhookEvent mocks base method.
func (m *MockErrorRecoveryService) ReplayWebhookEvent(ctx context.Context, req services.WebhookReplayRequest) (*services.WebhookReplayResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplayWebhookEvent", ctx, req)
	ret0, _ := ret[0].(*services.WebhookReplayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplayWebhookEvent indicates an expected call of ReplayWebhookEvent.
func (mr *MockErrorRecoveryServiceMockRecorder) ReplayWebhookEvent(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplayWebhookEvent", reflect.TypeOf((*MockErrorRecoveryService)(nil).ReplayWebhookEvent), ctx, req)
}

// MockSubscriptionEventService is a mock of SubscriptionEventService interface.
type MockSubscriptionEventService struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionEventServiceMockRecorder
	isgomock struct{}
}

// MockSubscriptionEventServiceMockRecorder is the mock recorder for MockSubscriptionEventService.
type MockSubscriptionEventServiceMockRecorder struct {
	mock *MockSubscriptionEventService
}

// NewMockSubscriptionEventService creates a new mock instance.
func NewMockSubscriptionEventService(ctrl *gomock.Controller) *MockSubscriptionEventService {
	mock := &MockSubscriptionEventService{ctrl: ctrl}
	mock.recorder = &MockSubscriptionEventServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionEventService) EXPECT() *MockSubscriptionEventServiceMockRecorder {
	return m.recorder
}

// CreateSubscriptionEvent mocks base method.
func (m *MockSubscriptionEventService) CreateSubscriptionEvent(ctx context.Context, params services.CreateSubscriptionEventParams) (*db.SubscriptionEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscriptionEvent", ctx, params)
	ret0, _ := ret[0].(*db.SubscriptionEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubscriptionEvent indicates an expected call of CreateSubscriptionEvent.
func (mr *MockSubscriptionEventServiceMockRecorder) CreateSubscriptionEvent(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscriptionEvent", reflect.TypeOf((*MockSubscriptionEventService)(nil).CreateSubscriptionEvent), ctx, params)
}

// GetSubscriptionEvent mocks base method.
func (m *MockSubscriptionEventService) GetSubscriptionEvent(ctx context.Context, eventID, workspaceID uuid.UUID) (*db.SubscriptionEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionEvent", ctx, eventID, workspaceID)
	ret0, _ := ret[0].(*db.SubscriptionEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionEvent indicates an expected call of GetSubscriptionEvent.
func (mr *MockSubscriptionEventServiceMockRecorder) GetSubscriptionEvent(ctx, eventID, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionEvent", reflect.TypeOf((*MockSubscriptionEventService)(nil).GetSubscriptionEvent), ctx, eventID, workspaceID)
}

// GetSubscriptionEventByTxHash mocks base method.
func (m *MockSubscriptionEventService) GetSubscriptionEventByTxHash(ctx context.Context, txHash string) (*db.SubscriptionEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionEventByTxHash", ctx, txHash)
	ret0, _ := ret[0].(*db.SubscriptionEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionEventByTxHash indicates an expected call of GetSubscriptionEventByTxHash.
func (mr *MockSubscriptionEventServiceMockRecorder) GetSubscriptionEventByTxHash(ctx, txHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionEventByTxHash", reflect.TypeOf((*MockSubscriptionEventService)(nil).GetSubscriptionEventByTxHash), ctx, txHash)
}

// ListSubscriptionEvents mocks base method.
func (m *MockSubscriptionEventService) ListSubscriptionEvents(ctx context.Context, params services.ListSubscriptionEventsParams) (*services.ListSubscriptionEventsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptionEvents", ctx, params)
	ret0, _ := ret[0].(*services.ListSubscriptionEventsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscriptionEvents indicates an expected call of ListSubscriptionEvents.
func (mr *MockSubscriptionEventServiceMockRecorder) ListSubscriptionEvents(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptionEvents", reflect.TypeOf((*MockSubscriptionEventService)(nil).ListSubscriptionEvents), ctx, params)
}

// ListSubscriptionEventsBySubscription mocks base method.
func (m *MockSubscriptionEventService) ListSubscriptionEventsBySubscription(ctx context.Context, subscriptionID, workspaceID uuid.UUID) ([]db.SubscriptionEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptionEventsBySubscription", ctx, subscriptionID, workspaceID)
	ret0, _ := ret[0].([]db.SubscriptionEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscriptionEventsBySubscription indicates an expected call of ListSubscriptionEventsBySubscription.
func (mr *MockSubscriptionEventServiceMockRecorder) ListSubscriptionEventsBySubscription(ctx, subscriptionID, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptionEventsBySubscription", reflect.TypeOf((*MockSubscriptionEventService)(nil).ListSubscriptionEventsBySubscription), ctx, subscriptionID, workspaceID)
}

// MockAnalyticsService is a mock of AnalyticsService interface.
type MockAnalyticsService struct {
	ctrl     *gomock.Controller
	recorder *MockAnalyticsServiceMockRecorder
	isgomock struct{}
}

// MockAnalyticsServiceMockRecorder is the mock recorder for MockAnalyticsService.
type MockAnalyticsServiceMockRecorder struct {
	mock *MockAnalyticsService
}

// NewMockAnalyticsService creates a new mock instance.
func NewMockAnalyticsService(ctrl *gomock.Controller) *MockAnalyticsService {
	mock := &MockAnalyticsService{ctrl: ctrl}
	mock.recorder = &MockAnalyticsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnalyticsService) EXPECT() *MockAnalyticsServiceMockRecorder {
	return m.recorder
}

// GetCustomerChart mocks base method.
func (m *MockAnalyticsService) GetCustomerChart(ctx context.Context, workspaceID uuid.UUID, metric, period string, days int, currency string) (*services.ChartData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerChart", ctx, workspaceID, metric, period, days, currency)
	ret0, _ := ret[0].(*services.ChartData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerChart indicates an expected call of GetCustomerChart.
func (mr *MockAnalyticsServiceMockRecorder) GetCustomerChart(ctx, workspaceID, metric, period, days, currency any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerChart", reflect.TypeOf((*MockAnalyticsService)(nil).GetCustomerChart), ctx, workspaceID, metric, period, days, currency)
}

// GetDashboardSummary mocks base method.
func (m *MockAnalyticsService) GetDashboardSummary(ctx context.Context, workspaceID uuid.UUID, currency string) (*services.DashboardSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDashboardSummary", ctx, workspaceID, currency)
	ret0, _ := ret[0].(*services.DashboardSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDashboardSummary indicates an expected call of GetDashboardSummary.
func (mr *MockAnalyticsServiceMockRecorder) GetDashboardSummary(ctx, workspaceID, currency any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDashboardSummary", reflect.TypeOf((*MockAnalyticsService)(nil).GetDashboardSummary), ctx, workspaceID, currency)
}

// GetGasFeePieChart mocks base method.
func (m *MockAnalyticsService) GetGasFeePieChart(ctx context.Context, workspaceID uuid.UUID, days int, currency string) (*services.PieChartData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGasFeePieChart", ctx, workspaceID, days, currency)
	ret0, _ := ret[0].(*services.PieChartData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGasFeePieChart indicates an expected call of GetGasFeePieChart.
func (mr *MockAnalyticsServiceMockRecorder) GetGasFeePieChart(ctx, workspaceID, days, currency any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGasFeePieChart", reflect.TypeOf((*MockAnalyticsService)(nil).GetGasFeePieChart), ctx, workspaceID, days, currency)
}

// GetHourlyMetrics mocks base method.
func (m *MockAnalyticsService) GetHourlyMetrics(ctx context.Context, workspaceID uuid.UUID, currency string) (*services.HourlyMetrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHourlyMetrics", ctx, workspaceID, currency)
	ret0, _ := ret[0].(*services.HourlyMetrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHourlyMetrics indicates an expected call of GetHourlyMetrics.
func (mr *MockAnalyticsServiceMockRecorder) GetHourlyMetrics(ctx, workspaceID, currency any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHourlyMetrics", reflect.TypeOf((*MockAnalyticsService)(nil).GetHourlyMetrics), ctx, workspaceID, currency)
}

// GetMRRChart mocks base method.
func (m *MockAnalyticsService) GetMRRChart(ctx context.Context, workspaceID uuid.UUID, metric, period string, months int, currency string) (*services.ChartData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMRRChart", ctx, workspaceID, metric, period, months, currency)
	ret0, _ := ret[0].(*services.ChartData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMRRChart indicates an expected call of GetMRRChart.
func (mr *MockAnalyticsServiceMockRecorder) GetMRRChart(ctx, workspaceID, metric, period, months, currency any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMRRChart", reflect.TypeOf((*MockAnalyticsService)(nil).GetMRRChart), ctx, workspaceID, metric, period, months, currency)
}

// GetNetworkBreakdown mocks base method.
func (m *MockAnalyticsService) GetNetworkBreakdown(ctx context.Context, workspaceID uuid.UUID, date time.Time, currency string) (*services.NetworkBreakdown, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkBreakdown", ctx, workspaceID, date, currency)
	ret0, _ := ret[0].(*services.NetworkBreakdown)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkBreakdown indicates an expected call of GetNetworkBreakdown.
func (mr *MockAnalyticsServiceMockRecorder) GetNetworkBreakdown(ctx, workspaceID, date, currency any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkBreakdown", reflect.TypeOf((*MockAnalyticsService)(nil).GetNetworkBreakdown), ctx, workspaceID, date, currency)
}

// GetPaymentMetrics mocks base method.
func (m *MockAnalyticsService) GetPaymentMetrics(ctx context.Context, workspaceID uuid.UUID, days int, currency string) (*services.PaymentMetrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentMetrics", ctx, workspaceID, days, currency)
	ret0, _ := ret[0].(*services.PaymentMetrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentMetrics indicates an expected call of GetPaymentMetrics.
func (mr *MockAnalyticsServiceMockRecorder) GetPaymentMetrics(ctx, workspaceID, days, currency any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentMetrics", reflect.TypeOf((*MockAnalyticsService)(nil).GetPaymentMetrics), ctx, workspaceID, days, currency)
}

// GetRevenueChart mocks base method.
func (m *MockAnalyticsService) GetRevenueChart(ctx context.Context, workspaceID uuid.UUID, period string, days int, currency string) (*services.ChartData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRevenueChart", ctx, workspaceID, period, days, currency)
	ret0, _ := ret[0].(*services.ChartData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRevenueChart indicates an expected call of GetRevenueChart.
func (mr *MockAnalyticsServiceMockRecorder) GetRevenueChart(ctx, workspaceID, period, days, currency any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRevenueChart", reflect.TypeOf((*MockAnalyticsService)(nil).GetRevenueChart), ctx, workspaceID, period, days, currency)
}

// GetSubscriptionChart mocks base method.
func (m *MockAnalyticsService) GetSubscriptionChart(ctx context.Context, workspaceID uuid.UUID, metric, period string, days int, currency string) (*services.ChartData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionChart", ctx, workspaceID, metric, period, days, currency)
	ret0, _ := ret[0].(*services.ChartData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionChart indicates an expected call of GetSubscriptionChart.
func (mr *MockAnalyticsServiceMockRecorder) GetSubscriptionChart(ctx, workspaceID, metric, period, days, currency any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionChart", reflect.TypeOf((*MockAnalyticsService)(nil).GetSubscriptionChart), ctx, workspaceID, metric, period, days, currency)
}

// TriggerMetricsRefresh mocks base method.
func (m *MockAnalyticsService) TriggerMetricsRefresh(ctx context.Context, workspaceID uuid.UUID, date time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TriggerMetricsRefresh", ctx, workspaceID, date)
	ret0, _ := ret[0].(error)
	return ret0
}

// TriggerMetricsRefresh indicates an expected call of TriggerMetricsRefresh.
func (mr *MockAnalyticsServiceMockRecorder) TriggerMetricsRefresh(ctx, workspaceID, date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerMetricsRefresh", reflect.TypeOf((*MockAnalyticsService)(nil).TriggerMetricsRefresh), ctx, workspaceID, date)
}

// MockBlockchainSyncService is a mock of BlockchainSyncService interface.
type MockBlockchainSyncService struct {
	ctrl     *gomock.Controller
	recorder *MockBlockchainSyncServiceMockRecorder
	isgomock struct{}
}

// MockBlockchainSyncServiceMockRecorder is the mock recorder for MockBlockchainSyncService.
type MockBlockchainSyncServiceMockRecorder struct {
	mock *MockBlockchainSyncService
}

// NewMockBlockchainSyncService creates a new mock instance.
func NewMockBlockchainSyncService(ctrl *gomock.Controller) *MockBlockchainSyncService {
	mock := &MockBlockchainSyncService{ctrl: ctrl}
	mock.recorder = &MockBlockchainSyncServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockchainSyncService) EXPECT() *MockBlockchainSyncServiceMockRecorder {
	return m.recorder
}

// GetSyncStatus mocks base method.
func (m *MockBlockchainSyncService) GetSyncStatus(ctx context.Context, workspaceID uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSyncStatus", ctx, workspaceID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSyncStatus indicates an expected call of GetSyncStatus.
func (mr *MockBlockchainSyncServiceMockRecorder) GetSyncStatus(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSyncStatus", reflect.TypeOf((*MockBlockchainSyncService)(nil).GetSyncStatus), ctx, workspaceID)
}

// ResyncFailedTransactions mocks base method.
func (m *MockBlockchainSyncService) ResyncFailedTransactions(ctx context.Context, workspaceID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResyncFailedTransactions", ctx, workspaceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResyncFailedTransactions indicates an expected call of ResyncFailedTransactions.
func (mr *MockBlockchainSyncServiceMockRecorder) ResyncFailedTransactions(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResyncFailedTransactions", reflect.TypeOf((*MockBlockchainSyncService)(nil).ResyncFailedTransactions), ctx, workspaceID)
}

// SyncTransactions mocks base method.
func (m *MockBlockchainSyncService) SyncTransactions(ctx context.Context, workspaceID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncTransactions", ctx, workspaceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncTransactions indicates an expected call of SyncTransactions.
func (mr *MockBlockchainSyncServiceMockRecorder) SyncTransactions(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncTransactions", reflect.TypeOf((*MockBlockchainSyncService)(nil).SyncTransactions), ctx, workspaceID)
}

// MockMetricsScheduler is a mock of MetricsScheduler interface.
type MockMetricsScheduler struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsSchedulerMockRecorder
	isgomock struct{}
}

// MockMetricsSchedulerMockRecorder is the mock recorder for MockMetricsScheduler.
type MockMetricsSchedulerMockRecorder struct {
	mock *MockMetricsScheduler
}

// NewMockMetricsScheduler creates a new mock instance.
func NewMockMetricsScheduler(ctrl *gomock.Controller) *MockMetricsScheduler {
	mock := &MockMetricsScheduler{ctrl: ctrl}
	mock.recorder = &MockMetricsSchedulerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsScheduler) EXPECT() *MockMetricsSchedulerMockRecorder {
	return m.recorder
}

// RunMetricsUpdate mocks base method.
func (m *MockMetricsScheduler) RunMetricsUpdate(ctx context.Context, workspaceID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunMetricsUpdate", ctx, workspaceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunMetricsUpdate indicates an expected call of RunMetricsUpdate.
func (mr *MockMetricsSchedulerMockRecorder) RunMetricsUpdate(ctx, workspaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunMetricsUpdate", reflect.TypeOf((*MockMetricsScheduler)(nil).RunMetricsUpdate), ctx, workspaceID)
}

// ScheduleMetricsUpdate mocks base method.
func (m *MockMetricsScheduler) ScheduleMetricsUpdate(ctx context.Context, workspaceID uuid.UUID, interval time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleMetricsUpdate", ctx, workspaceID, interval)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScheduleMetricsUpdate indicates an expected call of ScheduleMetricsUpdate.
func (mr *MockMetricsSchedulerMockRecorder) ScheduleMetricsUpdate(ctx, workspaceID, interval any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleMetricsUpdate", reflect.TypeOf((*MockMetricsScheduler)(nil).ScheduleMetricsUpdate), ctx, workspaceID, interval)
}

// MockPaymentFailureDetector is a mock of PaymentFailureDetector interface.
type MockPaymentFailureDetector struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentFailureDetectorMockRecorder
	isgomock struct{}
}

// MockPaymentFailureDetectorMockRecorder is the mock recorder for MockPaymentFailureDetector.
type MockPaymentFailureDetectorMockRecorder struct {
	mock *MockPaymentFailureDetector
}

// NewMockPaymentFailureDetector creates a new mock instance.
func NewMockPaymentFailureDetector(ctrl *gomock.Controller) *MockPaymentFailureDetector {
	mock := &MockPaymentFailureDetector{ctrl: ctrl}
	mock.recorder = &MockPaymentFailureDetectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentFailureDetector) EXPECT() *MockPaymentFailureDetectorMockRecorder {
	return m.recorder
}

// DetectAndCreateCampaigns mocks base method.
func (m *MockPaymentFailureDetector) DetectAndCreateCampaigns(ctx context.Context, lookbackMinutes int) (*services.DetectionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectAndCreateCampaigns", ctx, lookbackMinutes)
	ret0, _ := ret[0].(*services.DetectionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectAndCreateCampaigns indicates an expected call of DetectAndCreateCampaigns.
func (mr *MockPaymentFailureDetectorMockRecorder) DetectAndCreateCampaigns(ctx, lookbackMinutes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectAndCreateCampaigns", reflect.TypeOf((*MockPaymentFailureDetector)(nil).DetectAndCreateCampaigns), ctx, lookbackMinutes)
}

// ProcessFailedPaymentWebhook mocks base method.
func (m *MockPaymentFailureDetector) ProcessFailedPaymentWebhook(ctx context.Context, workspaceID, subscriptionID uuid.UUID, failureData map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessFailedPaymentWebhook", ctx, workspaceID, subscriptionID, failureData)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessFailedPaymentWebhook indicates an expected call of ProcessFailedPaymentWebhook.
func (mr *MockPaymentFailureDetectorMockRecorder) ProcessFailedPaymentWebhook(ctx, workspaceID, subscriptionID, failureData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessFailedPaymentWebhook", reflect.TypeOf((*MockPaymentFailureDetector)(nil).ProcessFailedPaymentWebhook), ctx, workspaceID, subscriptionID, failureData)
}

// MockCommonServicesInterface is a mock of CommonServicesInterface interface.
type MockCommonServicesInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCommonServicesInterfaceMockRecorder
	isgomock struct{}
}

// MockCommonServicesInterfaceMockRecorder is the mock recorder for MockCommonServicesInterface.
type MockCommonServicesInterfaceMockRecorder struct {
	mock *MockCommonServicesInterface
}

// NewMockCommonServicesInterface creates a new mock instance.
func NewMockCommonServicesInterface(ctrl *gomock.Controller) *MockCommonServicesInterface {
	mock := &MockCommonServicesInterface{ctrl: ctrl}
	mock.recorder = &MockCommonServicesInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommonServicesInterface) EXPECT() *MockCommonServicesInterfaceMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockCommonServicesInterface) BeginTx(ctx context.Context) (pgx.Tx, *db.Queries, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx)
	ret0, _ := ret[0].(pgx.Tx)
	ret1, _ := ret[1].(*db.Queries)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockCommonServicesInterfaceMockRecorder) BeginTx(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockCommonServicesInterface)(nil).BeginTx), ctx)
}

// GetAPIKeyService mocks base method.
func (m *MockCommonServicesInterface) GetAPIKeyService() interfaces.APIKeyService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIKeyService")
	ret0, _ := ret[0].(interfaces.APIKeyService)
	return ret0
}

// GetAPIKeyService indicates an expected call of GetAPIKeyService.
func (mr *MockCommonServicesInterfaceMockRecorder) GetAPIKeyService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIKeyService", reflect.TypeOf((*MockCommonServicesInterface)(nil).GetAPIKeyService))
}

// GetCurrencyService mocks base method.
func (m *MockCommonServicesInterface) GetCurrencyService() interfaces.CurrencyService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrencyService")
	ret0, _ := ret[0].(interfaces.CurrencyService)
	return ret0
}

// GetCurrencyService indicates an expected call of GetCurrencyService.
func (mr *MockCommonServicesInterfaceMockRecorder) GetCurrencyService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrencyService", reflect.TypeOf((*MockCommonServicesInterface)(nil).GetCurrencyService))
}

// GetCypheraSmartWalletAddress mocks base method.
func (m *MockCommonServicesInterface) GetCypheraSmartWalletAddress() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCypheraSmartWalletAddress")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCypheraSmartWalletAddress indicates an expected call of GetCypheraSmartWalletAddress.
func (mr *MockCommonServicesInterfaceMockRecorder) GetCypheraSmartWalletAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCypheraSmartWalletAddress", reflect.TypeOf((*MockCommonServicesInterface)(nil).GetCypheraSmartWalletAddress))
}

// GetDB mocks base method.
func (m *MockCommonServicesInterface) GetDB() db.Querier {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDB")
	ret0, _ := ret[0].(db.Querier)
	return ret0
}

// GetDB indicates an expected call of GetDB.
func (mr *MockCommonServicesInterfaceMockRecorder) GetDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDB", reflect.TypeOf((*MockCommonServicesInterface)(nil).GetDB))
}

// GetDBPool mocks base method.
func (m *MockCommonServicesInterface) GetDBPool() (*pgxpool.Pool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBPool")
	ret0, _ := ret[0].(*pgxpool.Pool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDBPool indicates an expected call of GetDBPool.
func (mr *MockCommonServicesInterfaceMockRecorder) GetDBPool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBPool", reflect.TypeOf((*MockCommonServicesInterface)(nil).GetDBPool))
}

// GetDiscountService mocks base method.
func (m *MockCommonServicesInterface) GetDiscountService() interfaces.DiscountService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiscountService")
	ret0, _ := ret[0].(interfaces.DiscountService)
	return ret0
}

// GetDiscountService indicates an expected call of GetDiscountService.
func (mr *MockCommonServicesInterfaceMockRecorder) GetDiscountService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiscountService", reflect.TypeOf((*MockCommonServicesInterface)(nil).GetDiscountService))
}

// GetExchangeRateService mocks base method.
func (m *MockCommonServicesInterface) GetExchangeRateService() interfaces.ExchangeRateService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExchangeRateService")
	ret0, _ := ret[0].(interfaces.ExchangeRateService)
	return ret0
}

// GetExchangeRateService indicates an expected call of GetExchangeRateService.
func (mr *MockCommonServicesInterfaceMockRecorder) GetExchangeRateService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchangeRateService", reflect.TypeOf((*MockCommonServicesInterface)(nil).GetExchangeRateService))
}

// GetGasSponsorshipService mocks base method.
func (m *MockCommonServicesInterface) GetGasSponsorshipService() interfaces.GasSponsorshipService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGasSponsorshipService")
	ret0, _ := ret[0].(interfaces.GasSponsorshipService)
	return ret0
}

// GetGasSponsorshipService indicates an expected call of GetGasSponsorshipService.
func (mr *MockCommonServicesInterfaceMockRecorder) GetGasSponsorshipService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGasSponsorshipService", reflect.TypeOf((*MockCommonServicesInterface)(nil).GetGasSponsorshipService))
}

// GetLogger mocks base method.
func (m *MockCommonServicesInterface) GetLogger() *zap.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogger")
	ret0, _ := ret[0].(*zap.Logger)
	return ret0
}

// GetLogger indicates an expected call of GetLogger.
func (mr *MockCommonServicesInterfaceMockRecorder) GetLogger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogger", reflect.TypeOf((*MockCommonServicesInterface)(nil).GetLogger))
}

// GetTaxService mocks base method.
func (m *MockCommonServicesInterface) GetTaxService() interfaces.TaxService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaxService")
	ret0, _ := ret[0].(interfaces.TaxService)
	return ret0
}

// GetTaxService indicates an expected call of GetTaxService.
func (mr *MockCommonServicesInterfaceMockRecorder) GetTaxService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaxService", reflect.TypeOf((*MockCommonServicesInterface)(nil).GetTaxService))
}

// RunInTransaction mocks base method.
func (m *MockCommonServicesInterface) RunInTransaction(ctx context.Context, fn func(*db.Queries) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunInTransaction", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunInTransaction indicates an expected call of RunInTransaction.
func (mr *MockCommonServicesInterfaceMockRecorder) RunInTransaction(ctx, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunInTransaction", reflect.TypeOf((*MockCommonServicesInterface)(nil).RunInTransaction), ctx, fn)
}

// RunInTransactionWithRetry mocks base method.
func (m *MockCommonServicesInterface) RunInTransactionWithRetry(ctx context.Context, maxRetries int, fn func(*db.Queries) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunInTransactionWithRetry", ctx, maxRetries, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunInTransactionWithRetry indicates an expected call of RunInTransactionWithRetry.
func (mr *MockCommonServicesInterfaceMockRecorder) RunInTransactionWithRetry(ctx, maxRetries, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunInTransactionWithRetry", reflect.TypeOf((*MockCommonServicesInterface)(nil).RunInTransactionWithRetry), ctx, maxRetries, fn)
}

// WithTx mocks base method.
func (m *MockCommonServicesInterface) WithTx(tx pgx.Tx) *db.Queries {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", tx)
	ret0, _ := ret[0].(*db.Queries)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockCommonServicesInterfaceMockRecorder) WithTx(tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockCommonServicesInterface)(nil).WithTx), tx)
}
