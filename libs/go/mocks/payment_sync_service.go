// Code generated by MockGen. DO NOT EDIT.
// Source: libs/go/client/payment_sync/interface.go
//
// Generated by this command:
//
//	mockgen -source=libs/go/client/payment_sync/interface.go -destination=libs/go/mocks/payment_sync_service.go -package=mocks PaymentSyncService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	payment_sync "github.com/cyphera/cyphera-api/libs/go/client/payment_sync"
	gomock "go.uber.org/mock/gomock"
)

// MockPaymentSyncService is a mock of PaymentSyncService interface.
type MockPaymentSyncService struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentSyncServiceMockRecorder
	isgomock struct{}
}

// MockPaymentSyncServiceMockRecorder is the mock recorder for MockPaymentSyncService.
type MockPaymentSyncServiceMockRecorder struct {
	mock *MockPaymentSyncService
}

// NewMockPaymentSyncService creates a new mock instance.
func NewMockPaymentSyncService(ctrl *gomock.Controller) *MockPaymentSyncService {
	mock := &MockPaymentSyncService{ctrl: ctrl}
	mock.recorder = &MockPaymentSyncServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentSyncService) EXPECT() *MockPaymentSyncServiceMockRecorder {
	return m.recorder
}

// CancelSubscription mocks base method.
func (m *MockPaymentSyncService) CancelSubscription(ctx context.Context, externalID string, cancelAtPeriodEnd, invoiceNow bool) (payment_sync.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelSubscription", ctx, externalID, cancelAtPeriodEnd, invoiceNow)
	ret0, _ := ret[0].(payment_sync.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelSubscription indicates an expected call of CancelSubscription.
func (mr *MockPaymentSyncServiceMockRecorder) CancelSubscription(ctx, externalID, cancelAtPeriodEnd, invoiceNow any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelSubscription", reflect.TypeOf((*MockPaymentSyncService)(nil).CancelSubscription), ctx, externalID, cancelAtPeriodEnd, invoiceNow)
}

// CapturePaymentIntent mocks base method.
func (m *MockPaymentSyncService) CapturePaymentIntent(ctx context.Context, paymentIntentExternalID string, amountToCapture int64) (payment_sync.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CapturePaymentIntent", ctx, paymentIntentExternalID, amountToCapture)
	ret0, _ := ret[0].(payment_sync.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CapturePaymentIntent indicates an expected call of CapturePaymentIntent.
func (mr *MockPaymentSyncServiceMockRecorder) CapturePaymentIntent(ctx, paymentIntentExternalID, amountToCapture any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CapturePaymentIntent", reflect.TypeOf((*MockPaymentSyncService)(nil).CapturePaymentIntent), ctx, paymentIntentExternalID, amountToCapture)
}

// CheckConnection mocks base method.
func (m *MockPaymentSyncService) CheckConnection(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckConnection", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckConnection indicates an expected call of CheckConnection.
func (mr *MockPaymentSyncServiceMockRecorder) CheckConnection(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckConnection", reflect.TypeOf((*MockPaymentSyncService)(nil).CheckConnection), ctx)
}

// Configure mocks base method.
func (m *MockPaymentSyncService) Configure(ctx context.Context, config map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configure", ctx, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// Configure indicates an expected call of Configure.
func (mr *MockPaymentSyncServiceMockRecorder) Configure(ctx, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockPaymentSyncService)(nil).Configure), ctx, config)
}

// CreateCustomer mocks base method.
func (m *MockPaymentSyncService) CreateCustomer(ctx context.Context, customerData payment_sync.Customer) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomer", ctx, customerData)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomer indicates an expected call of CreateCustomer.
func (mr *MockPaymentSyncServiceMockRecorder) CreateCustomer(ctx, customerData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomer", reflect.TypeOf((*MockPaymentSyncService)(nil).CreateCustomer), ctx, customerData)
}

// CreateExternalAccount mocks base method.
func (m *MockPaymentSyncService) CreateExternalAccount(ctx context.Context, customerExternalID string, accountData payment_sync.ExternalAccount, setAsDefault bool) (payment_sync.ExternalAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExternalAccount", ctx, customerExternalID, accountData, setAsDefault)
	ret0, _ := ret[0].(payment_sync.ExternalAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExternalAccount indicates an expected call of CreateExternalAccount.
func (mr *MockPaymentSyncServiceMockRecorder) CreateExternalAccount(ctx, customerExternalID, accountData, setAsDefault any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExternalAccount", reflect.TypeOf((*MockPaymentSyncService)(nil).CreateExternalAccount), ctx, customerExternalID, accountData, setAsDefault)
}

// CreateInvoice mocks base method.
func (m *MockPaymentSyncService) CreateInvoice(ctx context.Context, customerExternalID, subscriptionExternalID string, items []payment_sync.InvoiceLineItem, autoAdvance bool) (payment_sync.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvoice", ctx, customerExternalID, subscriptionExternalID, items, autoAdvance)
	ret0, _ := ret[0].(payment_sync.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInvoice indicates an expected call of CreateInvoice.
func (mr *MockPaymentSyncServiceMockRecorder) CreateInvoice(ctx, customerExternalID, subscriptionExternalID, items, autoAdvance any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvoice", reflect.TypeOf((*MockPaymentSyncService)(nil).CreateInvoice), ctx, customerExternalID, subscriptionExternalID, items, autoAdvance)
}

// CreatePaymentIntent mocks base method.
func (m *MockPaymentSyncService) CreatePaymentIntent(ctx context.Context, amount int64, currency, customerExternalID, paymentMethodExternalID string, confirm, offSession bool, metadata map[string]string) (payment_sync.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePaymentIntent", ctx, amount, currency, customerExternalID, paymentMethodExternalID, confirm, offSession, metadata)
	ret0, _ := ret[0].(payment_sync.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePaymentIntent indicates an expected call of CreatePaymentIntent.
func (mr *MockPaymentSyncServiceMockRecorder) CreatePaymentIntent(ctx, amount, currency, customerExternalID, paymentMethodExternalID, confirm, offSession, metadata any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePaymentIntent", reflect.TypeOf((*MockPaymentSyncService)(nil).CreatePaymentIntent), ctx, amount, currency, customerExternalID, paymentMethodExternalID, confirm, offSession, metadata)
}

// CreatePrice mocks base method.
func (m *MockPaymentSyncService) CreatePrice(ctx context.Context, priceData payment_sync.Price) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePrice", ctx, priceData)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePrice indicates an expected call of CreatePrice.
func (mr *MockPaymentSyncServiceMockRecorder) CreatePrice(ctx, priceData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePrice", reflect.TypeOf((*MockPaymentSyncService)(nil).CreatePrice), ctx, priceData)
}

// CreateProduct mocks base method.
func (m *MockPaymentSyncService) CreateProduct(ctx context.Context, productData payment_sync.Product) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", ctx, productData)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockPaymentSyncServiceMockRecorder) CreateProduct(ctx, productData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockPaymentSyncService)(nil).CreateProduct), ctx, productData)
}

// CreateRefund mocks base method.
func (m *MockPaymentSyncService) CreateRefund(ctx context.Context, chargeExternalID string, amount int64, reason string, metadata map[string]string) (payment_sync.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRefund", ctx, chargeExternalID, amount, reason, metadata)
	ret0, _ := ret[0].(payment_sync.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRefund indicates an expected call of CreateRefund.
func (mr *MockPaymentSyncServiceMockRecorder) CreateRefund(ctx, chargeExternalID, amount, reason, metadata any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRefund", reflect.TypeOf((*MockPaymentSyncService)(nil).CreateRefund), ctx, chargeExternalID, amount, reason, metadata)
}

// CreateSubscription mocks base method.
func (m *MockPaymentSyncService) CreateSubscription(ctx context.Context, subscriptionData payment_sync.Subscription) (payment_sync.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscription", ctx, subscriptionData)
	ret0, _ := ret[0].(payment_sync.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubscription indicates an expected call of CreateSubscription.
func (mr *MockPaymentSyncServiceMockRecorder) CreateSubscription(ctx, subscriptionData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscription", reflect.TypeOf((*MockPaymentSyncService)(nil).CreateSubscription), ctx, subscriptionData)
}

// DeleteCustomer mocks base method.
func (m *MockPaymentSyncService) DeleteCustomer(ctx context.Context, externalID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomer", ctx, externalID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCustomer indicates an expected call of DeleteCustomer.
func (mr *MockPaymentSyncServiceMockRecorder) DeleteCustomer(ctx, externalID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomer", reflect.TypeOf((*MockPaymentSyncService)(nil).DeleteCustomer), ctx, externalID)
}

// DeleteExternalAccount mocks base method.
func (m *MockPaymentSyncService) DeleteExternalAccount(ctx context.Context, customerExternalID, externalAccountID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExternalAccount", ctx, customerExternalID, externalAccountID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExternalAccount indicates an expected call of DeleteExternalAccount.
func (mr *MockPaymentSyncServiceMockRecorder) DeleteExternalAccount(ctx, customerExternalID, externalAccountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExternalAccount", reflect.TypeOf((*MockPaymentSyncService)(nil).DeleteExternalAccount), ctx, customerExternalID, externalAccountID)
}

// DeleteProduct mocks base method.
func (m *MockPaymentSyncService) DeleteProduct(ctx context.Context, externalID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", ctx, externalID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockPaymentSyncServiceMockRecorder) DeleteProduct(ctx, externalID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockPaymentSyncService)(nil).DeleteProduct), ctx, externalID)
}

// FinalizeInvoice mocks base method.
func (m *MockPaymentSyncService) FinalizeInvoice(ctx context.Context, externalInvoiceID string) (payment_sync.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeInvoice", ctx, externalInvoiceID)
	ret0, _ := ret[0].(payment_sync.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinalizeInvoice indicates an expected call of FinalizeInvoice.
func (mr *MockPaymentSyncServiceMockRecorder) FinalizeInvoice(ctx, externalInvoiceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeInvoice", reflect.TypeOf((*MockPaymentSyncService)(nil).FinalizeInvoice), ctx, externalInvoiceID)
}

// GetCustomer mocks base method.
func (m *MockPaymentSyncService) GetCustomer(ctx context.Context, externalID string) (payment_sync.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomer", ctx, externalID)
	ret0, _ := ret[0].(payment_sync.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomer indicates an expected call of GetCustomer.
func (mr *MockPaymentSyncServiceMockRecorder) GetCustomer(ctx, externalID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomer", reflect.TypeOf((*MockPaymentSyncService)(nil).GetCustomer), ctx, externalID)
}

// GetExternalAccount mocks base method.
func (m *MockPaymentSyncService) GetExternalAccount(ctx context.Context, customerExternalID, externalAccountID string) (payment_sync.ExternalAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExternalAccount", ctx, customerExternalID, externalAccountID)
	ret0, _ := ret[0].(payment_sync.ExternalAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExternalAccount indicates an expected call of GetExternalAccount.
func (mr *MockPaymentSyncServiceMockRecorder) GetExternalAccount(ctx, customerExternalID, externalAccountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExternalAccount", reflect.TypeOf((*MockPaymentSyncService)(nil).GetExternalAccount), ctx, customerExternalID, externalAccountID)
}

// GetInvoice mocks base method.
func (m *MockPaymentSyncService) GetInvoice(ctx context.Context, externalID string) (payment_sync.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoice", ctx, externalID)
	ret0, _ := ret[0].(payment_sync.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoice indicates an expected call of GetInvoice.
func (mr *MockPaymentSyncServiceMockRecorder) GetInvoice(ctx, externalID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoice", reflect.TypeOf((*MockPaymentSyncService)(nil).GetInvoice), ctx, externalID)
}

// GetPrice mocks base method.
func (m *MockPaymentSyncService) GetPrice(ctx context.Context, externalID string) (payment_sync.Price, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrice", ctx, externalID)
	ret0, _ := ret[0].(payment_sync.Price)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrice indicates an expected call of GetPrice.
func (mr *MockPaymentSyncServiceMockRecorder) GetPrice(ctx, externalID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrice", reflect.TypeOf((*MockPaymentSyncService)(nil).GetPrice), ctx, externalID)
}

// GetProduct mocks base method.
func (m *MockPaymentSyncService) GetProduct(ctx context.Context, externalID string) (payment_sync.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", ctx, externalID)
	ret0, _ := ret[0].(payment_sync.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockPaymentSyncServiceMockRecorder) GetProduct(ctx, externalID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockPaymentSyncService)(nil).GetProduct), ctx, externalID)
}

// GetServiceName mocks base method.
func (m *MockPaymentSyncService) GetServiceName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetServiceName indicates an expected call of GetServiceName.
func (mr *MockPaymentSyncServiceMockRecorder) GetServiceName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceName", reflect.TypeOf((*MockPaymentSyncService)(nil).GetServiceName))
}

// GetSubscription mocks base method.
func (m *MockPaymentSyncService) GetSubscription(ctx context.Context, externalID string) (payment_sync.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscription", ctx, externalID)
	ret0, _ := ret[0].(payment_sync.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscription indicates an expected call of GetSubscription.
func (mr *MockPaymentSyncServiceMockRecorder) GetSubscription(ctx, externalID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscription", reflect.TypeOf((*MockPaymentSyncService)(nil).GetSubscription), ctx, externalID)
}

// GetTransaction mocks base method.
func (m *MockPaymentSyncService) GetTransaction(ctx context.Context, externalID string) (payment_sync.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", ctx, externalID)
	ret0, _ := ret[0].(payment_sync.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockPaymentSyncServiceMockRecorder) GetTransaction(ctx, externalID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockPaymentSyncService)(nil).GetTransaction), ctx, externalID)
}

// HandleWebhook mocks base method.
func (m *MockPaymentSyncService) HandleWebhook(ctx context.Context, requestBody []byte, signatureHeader string) (payment_sync.WebhookEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleWebhook", ctx, requestBody, signatureHeader)
	ret0, _ := ret[0].(payment_sync.WebhookEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleWebhook indicates an expected call of HandleWebhook.
func (mr *MockPaymentSyncServiceMockRecorder) HandleWebhook(ctx, requestBody, signatureHeader any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleWebhook", reflect.TypeOf((*MockPaymentSyncService)(nil).HandleWebhook), ctx, requestBody, signatureHeader)
}

// ListCustomers mocks base method.
func (m *MockPaymentSyncService) ListCustomers(ctx context.Context, params payment_sync.ListParams) ([]payment_sync.Customer, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomers", ctx, params)
	ret0, _ := ret[0].([]payment_sync.Customer)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCustomers indicates an expected call of ListCustomers.
func (mr *MockPaymentSyncServiceMockRecorder) ListCustomers(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomers", reflect.TypeOf((*MockPaymentSyncService)(nil).ListCustomers), ctx, params)
}

// ListExternalAccounts mocks base method.
func (m *MockPaymentSyncService) ListExternalAccounts(ctx context.Context, customerExternalID string, params payment_sync.ListParams) ([]payment_sync.ExternalAccount, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExternalAccounts", ctx, customerExternalID, params)
	ret0, _ := ret[0].([]payment_sync.ExternalAccount)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListExternalAccounts indicates an expected call of ListExternalAccounts.
func (mr *MockPaymentSyncServiceMockRecorder) ListExternalAccounts(ctx, customerExternalID, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExternalAccounts", reflect.TypeOf((*MockPaymentSyncService)(nil).ListExternalAccounts), ctx, customerExternalID, params)
}

// ListInvoices mocks base method.
func (m *MockPaymentSyncService) ListInvoices(ctx context.Context, params payment_sync.ListParams) ([]payment_sync.Invoice, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInvoices", ctx, params)
	ret0, _ := ret[0].([]payment_sync.Invoice)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListInvoices indicates an expected call of ListInvoices.
func (mr *MockPaymentSyncServiceMockRecorder) ListInvoices(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvoices", reflect.TypeOf((*MockPaymentSyncService)(nil).ListInvoices), ctx, params)
}

// ListPrices mocks base method.
func (m *MockPaymentSyncService) ListPrices(ctx context.Context, productExternalID string, params payment_sync.ListParams) ([]payment_sync.Price, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPrices", ctx, productExternalID, params)
	ret0, _ := ret[0].([]payment_sync.Price)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPrices indicates an expected call of ListPrices.
func (mr *MockPaymentSyncServiceMockRecorder) ListPrices(ctx, productExternalID, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrices", reflect.TypeOf((*MockPaymentSyncService)(nil).ListPrices), ctx, productExternalID, params)
}

// ListProducts mocks base method.
func (m *MockPaymentSyncService) ListProducts(ctx context.Context, params payment_sync.ListParams) ([]payment_sync.Product, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProducts", ctx, params)
	ret0, _ := ret[0].([]payment_sync.Product)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProducts indicates an expected call of ListProducts.
func (mr *MockPaymentSyncServiceMockRecorder) ListProducts(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProducts", reflect.TypeOf((*MockPaymentSyncService)(nil).ListProducts), ctx, params)
}

// ListSubscriptions mocks base method.
func (m *MockPaymentSyncService) ListSubscriptions(ctx context.Context, params payment_sync.ListParams) ([]payment_sync.Subscription, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptions", ctx, params)
	ret0, _ := ret[0].([]payment_sync.Subscription)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSubscriptions indicates an expected call of ListSubscriptions.
func (mr *MockPaymentSyncServiceMockRecorder) ListSubscriptions(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptions", reflect.TypeOf((*MockPaymentSyncService)(nil).ListSubscriptions), ctx, params)
}

// ListTransactions mocks base method.
func (m *MockPaymentSyncService) ListTransactions(ctx context.Context, params payment_sync.ListParams) ([]payment_sync.Transaction, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransactions", ctx, params)
	ret0, _ := ret[0].([]payment_sync.Transaction)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTransactions indicates an expected call of ListTransactions.
func (mr *MockPaymentSyncServiceMockRecorder) ListTransactions(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactions", reflect.TypeOf((*MockPaymentSyncService)(nil).ListTransactions), ctx, params)
}

// PayInvoice mocks base method.
func (m *MockPaymentSyncService) PayInvoice(ctx context.Context, externalInvoiceID, paymentMethodExternalID string) (payment_sync.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PayInvoice", ctx, externalInvoiceID, paymentMethodExternalID)
	ret0, _ := ret[0].(payment_sync.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PayInvoice indicates an expected call of PayInvoice.
func (mr *MockPaymentSyncServiceMockRecorder) PayInvoice(ctx, externalInvoiceID, paymentMethodExternalID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PayInvoice", reflect.TypeOf((*MockPaymentSyncService)(nil).PayInvoice), ctx, externalInvoiceID, paymentMethodExternalID)
}

// ReactivateSubscription mocks base method.
func (m *MockPaymentSyncService) ReactivateSubscription(ctx context.Context, externalID string) (payment_sync.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReactivateSubscription", ctx, externalID)
	ret0, _ := ret[0].(payment_sync.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReactivateSubscription indicates an expected call of ReactivateSubscription.
func (mr *MockPaymentSyncServiceMockRecorder) ReactivateSubscription(ctx, externalID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReactivateSubscription", reflect.TypeOf((*MockPaymentSyncService)(nil).ReactivateSubscription), ctx, externalID)
}

// SendInvoice mocks base method.
func (m *MockPaymentSyncService) SendInvoice(ctx context.Context, externalInvoiceID string) (payment_sync.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendInvoice", ctx, externalInvoiceID)
	ret0, _ := ret[0].(payment_sync.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendInvoice indicates an expected call of SendInvoice.
func (mr *MockPaymentSyncServiceMockRecorder) SendInvoice(ctx, externalInvoiceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendInvoice", reflect.TypeOf((*MockPaymentSyncService)(nil).SendInvoice), ctx, externalInvoiceID)
}

// SetDefaultExternalAccount mocks base method.
func (m *MockPaymentSyncService) SetDefaultExternalAccount(ctx context.Context, customerExternalID, externalAccountID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDefaultExternalAccount", ctx, customerExternalID, externalAccountID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDefaultExternalAccount indicates an expected call of SetDefaultExternalAccount.
func (mr *MockPaymentSyncServiceMockRecorder) SetDefaultExternalAccount(ctx, customerExternalID, externalAccountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultExternalAccount", reflect.TypeOf((*MockPaymentSyncService)(nil).SetDefaultExternalAccount), ctx, customerExternalID, externalAccountID)
}

// StartInitialSync mocks base method.
func (m *MockPaymentSyncService) StartInitialSync(ctx context.Context, workspaceID string, config payment_sync.InitialSyncConfig) (payment_sync.SyncSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartInitialSync", ctx, workspaceID, config)
	ret0, _ := ret[0].(payment_sync.SyncSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartInitialSync indicates an expected call of StartInitialSync.
func (mr *MockPaymentSyncServiceMockRecorder) StartInitialSync(ctx, workspaceID, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartInitialSync", reflect.TypeOf((*MockPaymentSyncService)(nil).StartInitialSync), ctx, workspaceID, config)
}

// UpdateCustomer mocks base method.
func (m *MockPaymentSyncService) UpdateCustomer(ctx context.Context, externalID string, customerData payment_sync.Customer) (payment_sync.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomer", ctx, externalID, customerData)
	ret0, _ := ret[0].(payment_sync.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCustomer indicates an expected call of UpdateCustomer.
func (mr *MockPaymentSyncServiceMockRecorder) UpdateCustomer(ctx, externalID, customerData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomer", reflect.TypeOf((*MockPaymentSyncService)(nil).UpdateCustomer), ctx, externalID, customerData)
}

// UpdateExternalAccount mocks base method.
func (m *MockPaymentSyncService) UpdateExternalAccount(ctx context.Context, customerExternalID, externalAccountID string, accountData payment_sync.ExternalAccount) (payment_sync.ExternalAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExternalAccount", ctx, customerExternalID, externalAccountID, accountData)
	ret0, _ := ret[0].(payment_sync.ExternalAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateExternalAccount indicates an expected call of UpdateExternalAccount.
func (mr *MockPaymentSyncServiceMockRecorder) UpdateExternalAccount(ctx, customerExternalID, externalAccountID, accountData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExternalAccount", reflect.TypeOf((*MockPaymentSyncService)(nil).UpdateExternalAccount), ctx, customerExternalID, externalAccountID, accountData)
}

// UpdatePrice mocks base method.
func (m *MockPaymentSyncService) UpdatePrice(ctx context.Context, externalID string, priceData payment_sync.Price) (payment_sync.Price, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePrice", ctx, externalID, priceData)
	ret0, _ := ret[0].(payment_sync.Price)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePrice indicates an expected call of UpdatePrice.
func (mr *MockPaymentSyncServiceMockRecorder) UpdatePrice(ctx, externalID, priceData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePrice", reflect.TypeOf((*MockPaymentSyncService)(nil).UpdatePrice), ctx, externalID, priceData)
}

// UpdateProduct mocks base method.
func (m *MockPaymentSyncService) UpdateProduct(ctx context.Context, externalID string, productData payment_sync.Product) (payment_sync.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", ctx, externalID, productData)
	ret0, _ := ret[0].(payment_sync.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockPaymentSyncServiceMockRecorder) UpdateProduct(ctx, externalID, productData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockPaymentSyncService)(nil).UpdateProduct), ctx, externalID, productData)
}

// UpdateSubscription mocks base method.
func (m *MockPaymentSyncService) UpdateSubscription(ctx context.Context, externalID string, itemsToUpdate []payment_sync.SubscriptionItem, prorationBehavior string, metadata map[string]string, otherUpdateFields map[string]any) (payment_sync.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscription", ctx, externalID, itemsToUpdate, prorationBehavior, metadata, otherUpdateFields)
	ret0, _ := ret[0].(payment_sync.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubscription indicates an expected call of UpdateSubscription.
func (mr *MockPaymentSyncServiceMockRecorder) UpdateSubscription(ctx, externalID, itemsToUpdate, prorationBehavior, metadata, otherUpdateFields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscription", reflect.TypeOf((*MockPaymentSyncService)(nil).UpdateSubscription), ctx, externalID, itemsToUpdate, prorationBehavior, metadata, otherUpdateFields)
}

// VoidInvoice mocks base method.
func (m *MockPaymentSyncService) VoidInvoice(ctx context.Context, externalInvoiceID string) (payment_sync.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VoidInvoice", ctx, externalInvoiceID)
	ret0, _ := ret[0].(payment_sync.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VoidInvoice indicates an expected call of VoidInvoice.
func (mr *MockPaymentSyncServiceMockRecorder) VoidInvoice(ctx, externalInvoiceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VoidInvoice", reflect.TypeOf((*MockPaymentSyncService)(nil).VoidInvoice), ctx, externalInvoiceID)
}
