service: cyphera-api

frameworkVersion: '3'

plugins:
  - serverless-domain-manager

provider:
  name: aws
  runtime: provided.al2
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  httpApi:
    payload: '1.0'
    cors: true
    metrics: true
  environment:
    GIN_MODE: release
    DELEGATION_SERVER_URL: ${ssm:/cyphera/delegation-server-alb-dns-${self:provider.stage}}:50051
    RDS_SECRET_ARN: ${ssm:/cyphera/rds-secret-arn-${self:provider.stage}}
    DB_HOST: ${ssm:/cyphera/rds-endpoint-${self:provider.stage}}
    DB_NAME: cyphera
    DB_PORT: 5432
    DB_SSLMODE: require
    SUPABASE_URL: ${ssm:/cyphera/supabase/url-${self:provider.stage}~true}
    SUPABASE_JWT_SECRET: ${secretsmanager:cyphera/cyphera-api/supabase/jwt-secret-${self:provider.stage}}
    CIRCLE_API_KEY: ${secretsmanager:cyphera/delegation-server/circle/api-key-${self:provider.stage}}
    CYPHERA_SMART_WALLET_ADDRESS: ${ssm:/cyphera/wallet/smart-wallet-address-${self:provider.stage}~true}
    CORS_ALLOWED_ORIGINS: ${ssm:/cyphera/cors/allowed-origins-${self:provider.stage}}
    CORS_ALLOWED_METHODS: ${ssm:/cyphera/cors/allowed-methods-${self:provider.stage}}
    CORS_ALLOWED_HEADERS: ${ssm:/cyphera/cors/allowed-headers-${self:provider.stage}}
    CORS_EXPOSED_HEADERS: ${ssm:/cyphera/cors/exposed-headers-${self:provider.stage}}
    CORS_ALLOW_CREDENTIALS: ${ssm:/cyphera/cors/allow-credentials-${self:provider.stage}}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
          Resource:
            - ${ssm:/cyphera/rds-secret-arn-${self:provider.stage}}
        - Effect: "Allow"
          Action:
            - "ec2:CreateNetworkInterface"
            - "ec2:DescribeNetworkInterfaces"
            - "ec2:DeleteNetworkInterface"
          Resource: "*"
        - Effect: "Allow"
          Action:
            - "logs:CreateLogGroup"
            - "logs:CreateLogStream"
            - "logs:PutLogEvents"
          Resource: "arn:aws:logs:*:*:*"
        - Effect: Allow
          Action: [secretsmanager:GetSecretValue]
          Resource:
            - "arn:aws:secretsmanager:${aws:region}:${aws:accountId}:secret:cyphera/cyphera-api/supabase/jwt-secret-${self:provider.stage}*"
            - "arn:aws:secretsmanager:${aws:region}:${aws:accountId}:secret:cyphera/delegation-server/circle/api-key-${self:provider.stage}*"
        - Effect: Allow
          Action: [ssm:GetParameters, ssm:GetParameter]
          Resource:
            - "arn:aws:ssm:${aws:region}:${aws:accountId}:parameter/cyphera/supabase/url-${self:provider.stage}"
            - "arn:aws:ssm:${aws:region}:${aws:accountId}:parameter/cyphera/wallet/smart-wallet-address-${self:provider.stage}"
            - "arn:aws:ssm:${aws:region}:${aws:accountId}:parameter/cyphera/cors/*-${self:provider.stage}"

  vpc:
    securityGroupIds:
      - ${ssm:/cyphera/lambda-security-group-id-${self:provider.stage}}
    subnetIds:
      - ${ssm:/cyphera/private-subnet-1-${self:provider.stage}}
      - ${ssm:/cyphera/private-subnet-2-${self:provider.stage}}

custom:
  customDomain:
    domainName: ${self:provider.stage}.api.cypherapay.com
    certificateArn: ${ssm:/cyphera/wildcard-api-cert-arn}
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: false
    endpointType: regional
    securityPolicy: TLS_1_2
    apiType: http
    autoDomain: true

functions:
  main:
    handler: bootstrap
    events:
      - httpApi:
          path: /health
          method: GET
      - httpApi:
          path: /{proxy+}
          method: ANY
    timeout: 29
    memorySize: 256