AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Cyphera API - Minimal Test Deployment

Parameters:
  Stage:
    Type: String
    Description: Deployment stage (e.g., dev, prod)
    Default: dev
  DeploymentBucketName:
    Type: String
    Description: S3 bucket name for SAM deployment artifacts (Required by deploy command)
  LambdaSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Security Group ID for the Lambda function
  PrivateSubnet1Id:
    Type: AWS::EC2::Subnet::Id
    Description: Private Subnet 1 ID
  PrivateSubnet2Id:
    Type: AWS::EC2::Subnet::Id
    Description: Private Subnet 2 ID
  # New Parameters for Environment Variables
  ParamDelegationServerAlbDns:
    Type: String
    Description: DNS Name of the Delegation Server ALB (from SSM)
  ParamRdsSecretArn:
    Type: String
    Description: ARN of the RDS Secret (from SSM)
  ParamRdsEndpoint:
    Type: String
    Description: Endpoint address of the RDS instance (from SSM)
  ParamSupabaseUrl:
    Type: String
    Description: Supabase URL (from SSM SecureString)
  ParamSupabaseJwtSecret:
    Type: String
    Description: Supabase JWT Secret (from Secrets Manager)
    NoEcho: true # Mask secret value in logs/console
  ParamCircleApiKey:
    Type: String
    Description: Circle API Key (from Secrets Manager)
    NoEcho: true # Mask secret value in logs/console
  ParamSmartWalletAddress:
    Type: String
    Description: Smart Wallet Address (from SSM SecureString)
  ParamCorsAllowedOrigins:
    Type: String
    Description: CORS Allowed Origins (from SSM)
  ParamCorsAllowedMethods:
    Type: String
    Description: CORS Allowed Methods (from SSM)
  ParamCorsAllowedHeaders:
    Type: String
    Description: CORS Allowed Headers (from SSM)
  ParamCorsExposedHeaders:
    Type: String
    Description: CORS Exposed Headers (from SSM)
  ParamCorsAllowCredentials:
    Type: String # CloudFormation expects boolean as string 'true'/'false' for parameters
    Description: CORS Allow Credentials (from SSM)

Globals:
  Function:
    Timeout: 29
    MemorySize: 256
    Runtime: provided.al2
    Architectures:
      - x86_64
    Tracing: Active # Enable X-Ray for Lambda
    Environment:
      Variables:
        GIN_MODE: release
        STAGE: !Ref Stage
        # --- Reference Parameterized Environment Variables ---
        DELEGATION_SERVER_URL: !Sub "https://${ParamDelegationServerAlbDns}" # Construct URL from parameter
        RDS_SECRET_ARN: !Ref ParamRdsSecretArn
        DB_HOST: !Ref ParamRdsEndpoint
        DB_NAME: cyphera # Static value
        DB_PORT: '5432' # Static value
        DB_SSLMODE: require # Static value
        SUPABASE_URL: !Ref ParamSupabaseUrl
        SUPABASE_JWT_SECRET: !Ref ParamSupabaseJwtSecret
        CIRCLE_API_KEY: !Ref ParamCircleApiKey
        CYPHERA_SMART_WALLET_ADDRESS: !Ref ParamSmartWalletAddress
        CORS_ALLOWED_ORIGINS: !Ref ParamCorsAllowedOrigins
        CORS_ALLOWED_METHODS: !Ref ParamCorsAllowedMethods
        CORS_ALLOWED_HEADERS: !Ref ParamCorsAllowedHeaders
        CORS_EXPOSED_HEADERS: !Ref ParamCorsExposedHeaders
        CORS_ALLOW_CREDENTIALS: !Ref ParamCorsAllowCredentials
    VpcConfig: # Reference new parameters
      SecurityGroupIds:
        - !Ref LambdaSecurityGroupId
      SubnetIds:
        - !Ref PrivateSubnet1Id
        - !Ref PrivateSubnet2Id

Resources:
  # --- Lambda Function (Minimal) ---
  MainFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "cyphera-api-${Stage}"
      Handler: bootstrap # Your Go binary
      CodeUri: . # Points to the root - SAM build/deploy will handle packaging
      Policies:
        # Base policies
        - AWSLambdaBasicExecutionRole
        - AWSLambdaVPCAccessExecutionRole
        - AmazonEC2FullAccess # Add policy for X-Ray Daemon in VPC
        # Explicit policy to read specific secrets (Adding back)
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:cyphera/cyphera-api/supabase/jwt-secret-${Stage}"
                - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:cyphera/delegation-server/circle/api-key-${Stage}"
                - !Ref ParamRdsSecretArn
        # Policy to read SSM parameters (Adding back)
        - SSMParameterReadPolicy:
            ParameterName: !Sub "/cyphera/*-${Stage}"
      Events:
        HealthCheck:
          Type: HttpApi
          Properties:
            Path: /health
            Method: GET
            ApiId: !Ref HttpApi
        CatchAll:
          Type: HttpApi
          Properties:
            Path: /{proxy+}
            Method: ANY
            ApiId: !Ref HttpApi

  # --- HTTP API Gateway --- (Adding back)
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: !Ref Stage
      CorsConfiguration: # Reference parameters instead of direct resolve
        AllowOrigins: !Ref ParamCorsAllowedOrigins
        AllowMethods: !Ref ParamCorsAllowedMethods
        AllowHeaders: !Ref ParamCorsAllowedHeaders
        ExposeHeaders: !Ref ParamCorsExposedHeaders
        AllowCredentials: !Ref ParamCorsAllowCredentials

  # --- Custom Domain Name --- (Adding back)
  # Ensure the Route53 Hosted Zone for cypherapay.com exists and the certificate ARN is correct
  # ApiDomainName:
  #   Type: AWS::ApiGatewayV2::DomainName
  #   Properties:
  #     DomainName: !Sub "${Stage}.api.cypherapay.com"
  #     DomainNameConfigurations:
  #       - CertificateArn: '{{resolve:ssm:/cyphera/wildcard-api-cert-arn}}' # Keeping resolve here as it might work
  #         EndpointType: REGIONAL
  #         SecurityPolicy: TLS_1_2

  # ApiMapping:
  #   Type: AWS::ApiGatewayV2::ApiMapping
  #   Properties:
  #     ApiId: !Ref HttpApi
  #     DomainName: !Ref ApiDomainName
  #     Stage: !Ref Stage

  # --- Explicit Log Group ---
  MainFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/cyphera-api-${Stage}"
      RetentionInDays: 14

Outputs:
  ApiEndpoint: # Add back API endpoint output
    Description: "API Gateway endpoint URL for Stage"
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}"
  FunctionArn:
    Description: "Main Lambda Function ARN"
    Value: !GetAtt MainFunction.Arn
  HttpApiId:
    Description: "HTTP API ID"
    Value: !Ref HttpApi 